<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>『魏超』的 blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.weichao.io/"/>
  <updated>2020-08-19T08:59:23.742Z</updated>
  <id>http://www.weichao.io/</id>
  
  <author>
    <name>魏超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>app 保活与拉活</title>
    <link href="http://www.weichao.io/2020/08/19/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/"/>
    <id>http://www.weichao.io/2020/08/19/app-保活与拉活/</id>
    <published>2020-08-19T08:53:04.000Z</published>
    <updated>2020-08-19T08:59:23.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="http://gityuan.com/2018/05/19/android-process-adj/" title="http://gityuan.com/2018/05/19/android-process-adj/" target="_blank" rel="external">解读Android进程优先级ADJ算法</a></li><li><a href="https://juejin.im/post/6844904032809517070" title="https://juejin.im/post/6844904032809517070" target="_blank" rel="external">2020年了，Android后台保活还有戏吗？看我如何优雅的实现！</a></li><li><a href="http://gityuan.com/2018/02/24/process-keep-forever/#%E5%9B%9B-%E6%80%BB%E7%BB%93" title="http://gityuan.com/2018/02/24/process-keep-forever/#%E5%9B%9B-%E6%80%BB%E7%BB%93" target="_blank" rel="external">深度剖析APP保活案例</a></li></ul><hr><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a><strong>源码</strong></h1><p><a href="http://localhost:10086/0/keep_alive_demo.git" title="http://localhost:10086/0/keep_alive_demo.git" target="_blank" rel="external">keep_alive_demo</a></p><hr><h1 id="进程的优先级与回收机制"><a href="#进程的优先级与回收机制" class="headerlink" title="进程的优先级与回收机制"></a><strong>进程的优先级与回收机制</strong></h1><p><a href="http://androidos.net.cn/android/9.0.0_r8/xref/frameworks/base/services/core/java/com/android/server/am/ProcessList.java" title="http://androidos.net.cn/android/9.0.0_r8/xref/frameworks/base/services/core/java/com/android/server/am/ProcessList.java" target="_blank" rel="external">ProcessList.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span>[] mOomAdj = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;</div><div class="line">        FOREGROUND_APP_ADJ, VISIBLE_APP_ADJ, PERCEPTIBLE_APP_ADJ,</div><div class="line">        BACKUP_APP_ADJ, CACHED_APP_MIN_ADJ, CACHED_APP_MAX_ADJ</div><div class="line">&#125;;</div></pre></td></tr></table></figure><table><thead><tr><th>ADJ 级别</th><th>取值（Android 7.0 以前的值）</th><th>含义</th></tr></thead><tbody><tr><td>NATIVE_ADJ</td><td>-1000（-17）</td><td>native 进程（不被系统管理）</td></tr><tr><td>SYSTEM_ADJ</td><td>-900（-16）</td><td>仅指 system_server 进程</td></tr><tr><td>PERSISTENT_PROC_ADJ</td><td>-800（-12）</td><td>系统 persistent 进程，比如 telephony</td></tr><tr><td>PERSISTENT_SERVICE_ADJ</td><td>-700（-11）</td><td>关联着系统或 persistent 进程</td></tr><tr><td><code>FOREGROUND_APP_ADJ</code></td><td>0（0）</td><td>前台进程</td></tr><tr><td><code>VISIBLE_APP_ADJ</code></td><td>100（1）</td><td>可见进程</td></tr><tr><td><code>PERCEPTIBLE_APP_ADJ</code></td><td>200（2）</td><td>可感知进程，比如后台音乐播放</td></tr><tr><td><code>BACKUP_APP_ADJ</code></td><td>300（3）</td><td>备份进程</td></tr><tr><td>HEAVY_WEIGHT_APP_ADJ</td><td>400（4）</td><td>后台的重量级进程</td></tr><tr><td>SERVICE_ADJ</td><td>500（5）</td><td>服务进程</td></tr><tr><td>HOME_APP_ADJ</td><td>600（6）</td><td>Home 进程</td></tr><tr><td>PREVIOUS_APP_ADJ</td><td>700（7）</td><td>上一个 app 的进程（往往通过按返回键）</td></tr><tr><td>SERVICE_B_ADJ</td><td>800（8）</td><td>B List 中的 Service</td></tr><tr><td><code>CACHED_APP_MIN_ADJ</code></td><td>900（9）</td><td>不可见进程的 ADJ 最小值</td></tr><tr><td><code>CACHED_APP_MAX_ADJ</code></td><td>906（15）</td><td>不可见进程的 ADJ 最大值</td></tr><tr><td>UNKNOWN_ADJ</td><td>1001（16）</td><td>一般指将要会缓存进程，无法获取确定值</td></tr></tbody></table><h2 id="进程回收机制：Low-Memory-Killer"><a href="#进程回收机制：Low-Memory-Killer" class="headerlink" title="进程回收机制：Low Memory Killer"></a><strong>进程回收机制：Low Memory Killer</strong></h2><p>当系统剩余空闲内存低于某阈值（比如 147 MB），则从 ADJ 大于或等于相应阈值（比如 900）的进程中，杀死 ADJ 值最大的进程，如果存在多个 ADJ 相同的进程，则杀死内存最大的进程。</p><h3 id="查看内存阈值"><a href="#查看内存阈值" class="headerlink" title="查看内存阈值"></a><strong>查看内存阈值</strong></h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /sys/module/lowmemorykiller/parameters/minfree</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/1.png" alt=""><br>单位是 4KB（一页），所以对于该设备：</p><ul><li>前台进程：18432 * 4KB / 1024 = 72 MB</li><li>可见进程：90 MB</li><li>可感知进程：108 MB</li><li>备份进程：126 MB</li><li>不可见进程的 ADJ 最小值：216 MB</li><li>不可见进程的 ADJ 最大值：315 MB</li></ul><h2 id="查看进程的优先级"><a href="#查看进程的优先级" class="headerlink" title="查看进程的优先级"></a><strong>查看进程的优先级</strong></h2><p>1、确定进程值，是 3107：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/2.png" alt=""></p><p>2、查看进程的优先级：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /proc/<span class="number">3107</span>/oom_adj</div></pre></td></tr></table></figure></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/3.png" alt=""><br>启动 app 后，查看 app 进程的优先级是前台进程；<br>1、如果按返回键，是 8；<br>2、如果按 HOME 键，是 6；<br>3、锁屏不会改变优先级。</p><h2 id="ADJ-算法"><a href="#ADJ-算法" class="headerlink" title="ADJ 算法"></a><strong>ADJ 算法</strong></h2><p><a href="http://androidos.net.cn/android/9.0.0_r8/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java" title="http://androidos.net.cn/android/9.0.0_r8/xref/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java" target="_blank" rel="external">ActivityManagerService.java</a></p><ul><li>updateOomAdjLocked：更新 ADJ，当目标进程为空，或者被杀则返回 false；否则返回 true；</li><li>computeOomAdjLocked：计算 ADJ，返回计算后的 RawAdj 值；</li><li>applyOomAdjLocked：使用 ADJ，当需要杀掉目标进程则返回 false；否则返回 true。</li></ul><hr><h1 id="app-保活"><a href="#app-保活" class="headerlink" title="app 保活"></a><strong>app 保活</strong></h1><h2 id="提升进程的优先级"><a href="#提升进程的优先级" class="headerlink" title="提升进程的优先级"></a><strong>提升进程的优先级</strong></h2><p>操作流程：启动 app -&gt; 按 HOME 键回到桌面 -&gt; 锁屏 -&gt; 解锁</p><p>默认进程优先级的变化：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/4.png" alt=""></p><h3 id="1-像素法"><a href="#1-像素法" class="headerlink" title="1 像素法"></a><strong>1 像素法</strong></h3><p>使用 1 像素法后进程优先级的变化：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/5.png" alt=""></p><p>原理：在 Application 里注册广播，监听锁屏和解锁的事件；当收到锁屏广播时启动一个 1 像素的页面，当收到解锁广播时关闭这个页面。<br>缺点：只在锁屏时有效。</p><p>1、注册广播：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        KeepAliveManager.getInstance().registerBroadcast(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeepAliveReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"KeepReceiver"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        String action = intent.getAction();</div><div class="line">        Log.e(TAG, <span class="string">"onReceive："</span> + action);</div><div class="line">        <span class="keyword">if</span> (TextUtils.equals(action, Intent.ACTION_SCREEN_OFF)) &#123;</div><div class="line">            KeepAliveManager.getInstance().startKeepAlive(context);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TextUtils.equals(action, Intent.ACTION_SCREEN_ON)) &#123;</div><div class="line">            KeepAliveManager.getInstance().finishKeepAlive();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeepAliveManager</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> KeepAliveManager sInstance;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> KeepAliveReceiver mKeepAliveReceiver;</div><div class="line">    <span class="keyword">private</span> WeakReference&lt;Activity&gt; mKeepAliveActivity;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">KeepAliveManager</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeepAliveManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (KeepAliveManager.class) &#123;</div><div class="line">                <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> KeepAliveManager();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBroadcast</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        IntentFilter filter = <span class="keyword">new</span> IntentFilter();</div><div class="line"></div><div class="line">        filter.addAction(Intent.ACTION_SCREEN_ON);</div><div class="line">        filter.addAction(Intent.ACTION_SCREEN_OFF);</div><div class="line"></div><div class="line">        mKeepAliveReceiver = <span class="keyword">new</span> KeepAliveReceiver();</div><div class="line">        context.registerReceiver(mKeepAliveReceiver, filter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregisterBroadcast</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mKeepAliveReceiver != <span class="keyword">null</span>) &#123;</div><div class="line">            context.unregisterReceiver(mKeepAliveReceiver);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startKeepAlive</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(context, KeepAliveActivity.class);</div><div class="line">        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        context.startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishKeepAlive</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mKeepAliveActivity != <span class="keyword">null</span>) &#123;</div><div class="line">            Activity activity = mKeepAliveActivity.get();</div><div class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">                activity.finish();</div><div class="line">            &#125;</div><div class="line">            mKeepAliveActivity = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActivity</span><span class="params">(KeepAliveActivity keep)</span> </span>&#123;</div><div class="line">        mKeepAliveActivity = <span class="keyword">new</span> WeakReference&lt;Activity&gt;(keep);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、1 像素的页面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeepAliveActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"KeepAliveActivity"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        Log.d(TAG, <span class="string">"onCreate"</span>);</div><div class="line"></div><div class="line">        Window window = getWindow();</div><div class="line">        window.setGravity(Gravity.START | Gravity.TOP);</div><div class="line">        WindowManager.LayoutParams params = window.getAttributes();</div><div class="line">        params.width = <span class="number">1</span>;</div><div class="line">        params.height = <span class="number">1</span>;</div><div class="line">        params.x = <span class="number">0</span>;</div><div class="line">        params.y = <span class="number">0</span>;</div><div class="line">        window.setAttributes(params);</div><div class="line"></div><div class="line">        KeepAliveManager.getInstance().setActivity(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        Log.d(TAG, <span class="string">"onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="前台进程法"><a href="#前台进程法" class="headerlink" title="前台进程法"></a><strong>前台进程法</strong></h3><p>使用前台进程法后进程优先级的变化：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/6.png" alt=""></p><p>原理：在 Application 里启动前台进程。<br>缺点：自 Android 8.0 开始会在通知栏显示消息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForegroundService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ForegroundService"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVICE_ID = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        Log.d(TAG, <span class="string">"ForegroundService 服务创建了"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR2) &#123;</div><div class="line">            startForeground(SERVICE_ID, <span class="keyword">new</span> Notification());</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.O) &#123;</div><div class="line">            startForeground(SERVICE_ID, <span class="keyword">new</span> Notification());</div><div class="line">            <span class="comment">// 删除通知栏消息</span></div><div class="line">            startService(<span class="keyword">new</span> Intent(<span class="keyword">this</span>, InnerService.class));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            NotificationManager manager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">            NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(<span class="string">"channel"</span>, <span class="string">"title"</span>, NotificationManager.IMPORTANCE_NONE);</div><div class="line">            <span class="keyword">if</span> (manager != <span class="keyword">null</span>) &#123;</div><div class="line">                manager.createNotificationChannel(channel);</div><div class="line">                Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">"channel"</span>).build();</div><div class="line">                startForeground(SERVICE_ID, notification);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onCreate();</div><div class="line">            Log.d(TAG, <span class="string">"InnerService 服务创建了"</span>);</div><div class="line"></div><div class="line">            startForeground(SERVICE_ID, <span class="keyword">new</span> Notification());</div><div class="line">            stopSelf();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="加入系统白名单"><a href="#加入系统白名单" class="headerlink" title="加入系统白名单"></a><strong>加入系统白名单</strong></h2><p>以华为为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHuawei</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (Build.BRAND == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> Build.BRAND.toLowerCase().equals(<span class="string">"huawei"</span>) || Build.BRAND.toLowerCase().equals(<span class="string">"honor"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goHuaweiSetting</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        showActivity(<span class="string">"com.huawei.systemmanager"</span>, <span class="string">"com.huawei.systemmanager.startupmgr.ui.StartupNormalAppListActivity"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        showActivity(<span class="string">"com.huawei.systemmanager"</span>, <span class="string">"com.huawei.systemmanager.optimize.bootstart.BootStartActivity"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showActivity</span><span class="params">(String packageName, String activityDir)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">    intent.setComponent(<span class="keyword">new</span> ComponentName(packageName, activityDir));</div><div class="line">    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="app-拉活"><a href="#app-拉活" class="headerlink" title="app 拉活"></a><strong>app 拉活</strong></h1><h2 id="全家桶"><a href="#全家桶" class="headerlink" title="全家桶"></a><strong>全家桶</strong></h2><p>监听其他大厂的 app 发出的广播进行拉活。</p><h2 id="账号同步"><a href="#账号同步" class="headerlink" title="账号同步"></a><strong>账号同步</strong></h2><p>原理：系统有自动同步账号数据的机制。<br>缺点：时间不确定。</p><p>添加账号：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"AccountHelper"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_TYPE = <span class="string">"io.weichao.lib_keep_alive.account"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_NAME = <span class="string">"测试"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_PASSWORD = <span class="string">"111111"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_AUTHORITY = <span class="string">"io.weichao.lib_keep_alive.provider"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addAccount</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        AccountManager accountManager = (AccountManager) context.getSystemService(Context.ACCOUNT_SERVICE);</div><div class="line">        <span class="comment">// 获得此类型的账户，需要增加权限：</span></div><div class="line">        <span class="comment">// &lt;uses-permission</span></div><div class="line">        <span class="comment">//        android:name="android.permission.GET_ACCOUNTS"</span></div><div class="line">        <span class="comment">//        android:maxSdkVersion="22" /&gt;</span></div><div class="line">        Account[] accounts = accountManager.getAccountsByType(ACCOUNT_TYPE);</div><div class="line">        <span class="keyword">if</span> (accounts.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"账户已存在"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Account account = <span class="keyword">new</span> Account(ACCOUNT_NAME, ACCOUNT_TYPE);</div><div class="line">        <span class="comment">// 给这个账户类型添加一个账户，需要增加权限：</span></div><div class="line">        <span class="comment">// &lt;uses-permission</span></div><div class="line">        <span class="comment">//        android:name="android.permission.AUTHENTICATE_ACCOUNTS"</span></div><div class="line">        <span class="comment">//        android:maxSdkVersion="22" /&gt;</span></div><div class="line">        accountManager.addAccountExplicitly(account, ACCOUNT_PASSWORD, <span class="keyword">new</span> Bundle());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">autoSync</span><span class="params">()</span> </span>&#123;</div><div class="line">        Account account = <span class="keyword">new</span> Account(ACCOUNT_NAME, ACCOUNT_TYPE);</div><div class="line">        <span class="comment">// 以下 3 个需要增加权限：&lt;uses-permission android:name="android.permission.WRITE_SYNC_SETTINGS" /&gt;</span></div><div class="line">        <span class="comment">// 设置同步</span></div><div class="line">        ContentResolver.setIsSyncable(account, ACCOUNT_AUTHORITY, <span class="number">1</span>);</div><div class="line">        <span class="comment">// 自动同步</span></div><div class="line">        ContentResolver.setSyncAutomatically(account, ACCOUNT_AUTHORITY, <span class="keyword">true</span>);</div><div class="line">        <span class="comment">// 设置同步周期</span></div><div class="line">        ContentResolver.addPeriodicSync(account, ACCOUNT_AUTHORITY, <span class="keyword">new</span> Bundle(), <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SyncService"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SyncAdapter mSyncAdapter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        mSyncAdapter = <span class="keyword">new</span> SyncAdapter(getApplicationContext(), <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mSyncAdapter.getSyncAdapterBinder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractThreadedSyncAdapter</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SyncAdapter</span><span class="params">(Context context, <span class="keyword">boolean</span> autoInitialize)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(context, autoInitialize);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPerformSync</span><span class="params">(Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)</span> </span>&#123;</div><div class="line">            Log.d(TAG, <span class="string">"同步账户数据--do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当用户主动同步或者系统自动同步账号数据时，会进行拉活：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/7.png" alt=""><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E4%BF%9D%E6%B4%BB%E4%B8%8E%E6%8B%89%E6%B4%BB/8.png" alt=""></p><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a><strong>推送</strong></h2><p>接入各个手机厂商的推送。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://git
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>组件化 + WebView 命令模式</title>
    <link href="http://www.weichao.io/2020/08/18/%E7%BB%84%E4%BB%B6%E5%8C%96-WebView-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.weichao.io/2020/08/18/组件化-WebView-命令模式/</id>
    <published>2020-08-17T16:50:46.000Z</published>
    <updated>2020-08-17T16:54:09.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件化结构"><a href="#组件化结构" class="headerlink" title="组件化结构"></a><strong>组件化结构</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E7%BB%84%E4%BB%B6%E5%8C%96-WebView-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/1.png" alt=""></p><p>源码：<a href="http://colors.black:10086/0/webview_demo" title="http://colors.black:10086/0/webview_demo" target="_blank" rel="external">WebView_demo</a></p><hr><h1 id="AutoService-路由-接口下沉：避免-app-对-module-webview-中的类的直接引用"><a href="#AutoService-路由-接口下沉：避免-app-对-module-webview-中的类的直接引用" class="headerlink" title="AutoService 路由 + 接口下沉：避免 app 对 module_webview 中的类的直接引用"></a><strong>AutoService 路由 + 接口下沉：避免 app 对 module_webview 中的类的直接引用</strong></h1><p>1、在 lib_base 中创建一个类，并封装一个方法——让 ServiceLoader 加载指定 type 的 Service，并且返回第 1 个查找到的 Service：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.weichao.lib_base.service_loader;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ServiceLoader;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoaderX</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ServiceLoaderX</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">load</span><span class="params">(Class&lt;T&gt; service)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> ServiceLoader.load(service).iterator().next();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、接口下沉，在 lib_common 中定义一个 Service 接口，接口中的方法将由 module_webview 中的类实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.weichao.lib_common.auto_service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"></div><div class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWebViewService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startWebViewActivity</span><span class="params">(Context context, String url, String title, <span class="keyword">boolean</span> isShowActionBar)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Fragment <span class="title">getWebViewFragment</span><span class="params">(String url, <span class="keyword">boolean</span> canNativeRefresh)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、module_webview 实现接口中的方法，并且使用路由 AutoService 注册其 Service type（需和实现的接口一致）。<br>先添加 AutoService 的依赖：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// https://github.com/google/auto/tree/master/service</span></div><div class="line">    <span class="comment">// 路由</span></div><div class="line">    annotationProcessor <span class="string">'com.google.auto.service:auto-service:1.0-rc7'</span></div><div class="line">    implementation <span class="string">'com.google.auto.service:auto-service:1.0-rc7'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> io.weichao.module_webview;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"></div><div class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.auto.service.AutoService;</div><div class="line"></div><div class="line"><span class="keyword">import</span> io.weichao.lib_common.auto_service.IWebViewService;</div><div class="line"><span class="keyword">import</span> io.weichao.module_webview.utils.Constants;</div><div class="line"></div><div class="line"><span class="meta">@AutoService</span>(&#123;IWebViewService.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewServiceImpl</span> <span class="keyword">implements</span> <span class="title">IWebViewService</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startWebViewActivity</span><span class="params">(Context context, String url, String title, <span class="keyword">boolean</span> isShowActionBar)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</div><div class="line">            Intent intent = <span class="keyword">new</span> Intent(context, WebViewActivity.class);</div><div class="line">            intent.putExtra(Constants.TITLE, title);</div><div class="line">            intent.putExtra(Constants.URL, url);</div><div class="line">            intent.putExtra(Constants.IS_SHOW_ACTION_BAR, isShowActionBar);</div><div class="line">            context.startActivity(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getWebViewFragment</span><span class="params">(String url, <span class="keyword">boolean</span> canNativeRefresh)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> WebViewFragment.newInstance(url, canNativeRefresh);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4、app 使用调用 lib_base 中 ServiceLoaderX 类封装好的方法，查找注册的 Service type 为 IWebViewService 的类，如果找到了，说明该 Service 在某个 module 中有实现类，再调用其实现的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IWebViewService webviewService = ServiceLoaderX.load(IWebViewService.class);</div><div class="line">if (webviewService != null) &#123;</div><div class="line">    webviewService.startWebViewActivity(MainActivity.this, &quot;https://www.baidu.com&quot;, &quot;百度&quot;, true);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="让-module-webview-拥有独立运行的能力"><a href="#让-module-webview-拥有独立运行的能力" class="headerlink" title="让 module_webview 拥有独立运行的能力"></a><strong>让 module_webview 拥有独立运行的能力</strong></h1><p>1、gradle.properties 添加开关控制 module 是以 application/library 方式编译：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#module_webview_is_application=true</div><div class="line">module_webview_is_application=false</div></pre></td></tr></table></figure></p><p>2、module_webview 打包时需要获取配置信息：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (module_webview_is_application.toBoolean()) &#123;</div><div class="line">    apply plugin: <span class="string">'com.android.application'</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    apply plugin: <span class="string">'com.android.library'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="keyword">if</span> (module_webview_is_application.toBoolean()) &#123;</div><div class="line">            applicationId <span class="string">"io.weichao.module_webview"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">sourceSets</span> &#123;</div><div class="line">        main &#123;</div><div class="line">            <span class="keyword">if</span> (module_webview_is_application.toBoolean()) &#123;</div><div class="line">                manifest.srcFile <span class="string">'src/main/AndroidManifest.xml'</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                manifest.srcFile <span class="string">'src/main/manifest_library.xml'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、app 打包时需要获取配置信息，当 module_webview 是 application 时不可用：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">if</span> (!module_webview_is_application.toBoolean()) &#123;</div><div class="line">        implementation <span class="keyword">project</span>(<span class="string">":module_webview"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h1 id="让-module-webview-运行在独立进程，并与主进程通信"><a href="#让-module-webview-运行在独立进程，并与主进程通信" class="headerlink" title="让 module_webview 运行在独立进程，并与主进程通信"></a><strong>让 module_webview 运行在独立进程，并与主进程通信</strong></h1><h2 id="注册-Activity-时声明运行的进程"><a href="#注册-Activity-时声明运行的进程" class="headerlink" title="注册 Activity 时声明运行的进程"></a><strong>注册 Activity 时声明运行的进程</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"io.weichao.module_webview"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:usesCleartextTraffic</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">".WebViewActivity"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:process</span>=<span class="string">":webview"</span></span></div><div class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/Theme.AppCompat.Light.NoActionBar"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E7%BB%84%E4%BB%B6%E5%8C%96-WebView-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/2.png" alt=""></p><h2 id="建立-webview-进程与主进程的连接并保持连接，由主进程处理-Web-请求（这里使用了命令模式）"><a href="#建立-webview-进程与主进程的连接并保持连接，由主进程处理-Web-请求（这里使用了命令模式）" class="headerlink" title="建立 webview 进程与主进程的连接并保持连接，由主进程处理 Web 请求（这里使用了命令模式）"></a><strong>建立 webview 进程与主进程的连接并保持连接，由主进程处理 Web 请求（这里使用了命令模式）</strong></h2><p>1、创建 webview 进程到主进程的 AIDL，用于处理 Web 的请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package io.weichao.module_webview;</div><div class="line"></div><div class="line">interface IWebviewProcessToMainProcessAidl &#123;</div><div class="line">    void handleWebCommand(String commandName, String paramsJson);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、在主进程——创建 Service，用于接受 webview 进程的连接：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainProcessCommandService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> MainProcessCommandManager.getInstance();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>MainProcessCommandManager 中的 Command 是使用 AutoService 注册的，处理 Web 请求时会根据根据 name 属性查找已注册的 Command，并调用其方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainProcessCommandManager</span> <span class="keyword">extends</span> <span class="title">IWebviewProcessToMainProcessAidl</span>.<span class="title">Stub</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MainProcessCommandManager sInstance;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Command&gt; sCommandMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainProcessCommandManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (MainProcessCommandManager.class) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> MainProcessCommandManager();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MainProcessCommandManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServiceLoader&lt;Command&gt; serviceLoader = ServiceLoader.load(Command.class);</div><div class="line">        <span class="keyword">for</span> (Command command : serviceLoader) &#123;</div><div class="line">            <span class="keyword">if</span> (!sCommandMap.containsKey(command.name())) &#123;</div><div class="line">                sCommandMap.put(command.name(), command);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 实现 AIDL 中的方法，将 String 类型的参数转换为 Map 类型。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleWebCommand</span><span class="params">(String commandName, String paramsJson)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">        MainProcessCommandManager.getInstance().executeCommand(commandName, <span class="keyword">new</span> Gson().fromJson(paramsJson, Map.class));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据 name 属性查找已注册的 Command，并调用其方法。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">(String commandName, Map params)</span> </span>&#123;</div><div class="line">        Command command = sCommandMap.get(commandName);</div><div class="line">        <span class="keyword">if</span> (command != <span class="keyword">null</span>) &#123;</div><div class="line">            command.execute(params);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>抽象出的命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Map paramsMap)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、在 webview 进程——自定义 WebView，建立 webview 进程与主进程的连接，并将接收到的 Web 的请求通过 AIDL 交给主进程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseWebView</span> <span class="keyword">extends</span> <span class="title">WebView</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"BaseWebView"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseWebView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseWebView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseWebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseWebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 建立连接，注入 Java 对象。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        WebviewProcessCommandDispatcher.getInstance().initAidlConnection();</div><div class="line">        DefaultWebSettings.getInstance().setSettings(<span class="keyword">this</span>);</div><div class="line">        addJavascriptInterface(<span class="keyword">this</span>, <span class="string">"jsInterface"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebViewCallBack</span><span class="params">(WebViewCallBack webViewCallBack)</span> </span>&#123;</div><div class="line">        setWebViewClient(<span class="keyword">new</span> DefaultWebViewClient(webViewCallBack));</div><div class="line">        setWebChromeClient(<span class="keyword">new</span> DefaultWebChromeClient(webViewCallBack));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Web 通过 window.jsInterface.takeNativeAction() 调用的方法。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeNativeAction</span><span class="params">(<span class="keyword">final</span> String paramsJson)</span> </span>&#123;</div><div class="line">        Log.i(TAG, paramsJson);</div><div class="line">        <span class="keyword">if</span> (!TextUtils.isEmpty(paramsJson)) &#123;</div><div class="line">            <span class="keyword">final</span> JsParam jsParam = <span class="keyword">new</span> Gson().fromJson(paramsJson, JsParam.class);</div><div class="line">            <span class="keyword">if</span> (jsParam != <span class="keyword">null</span>) &#123;</div><div class="line">                WebviewProcessCommandDispatcher.getInstance().executeCommand(jsParam.name, <span class="keyword">new</span> Gson().toJson(jsParam.param));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebviewProcessCommandDispatcher</span> <span class="keyword">implements</span> <span class="title">ServiceConnection</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebviewProcessCommandDispatcher sInstance;</div><div class="line">    <span class="keyword">private</span> IWebviewProcessToMainProcessAidl iWebviewProcessToMainProcessAidl;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebviewProcessCommandDispatcher <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (WebviewProcessCommandDispatcher.class) &#123;</div><div class="line">                sInstance = <span class="keyword">new</span> WebviewProcessCommandDispatcher();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAidlConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(BaseApplication.sApplication, MainProcessCommandService.class);</div><div class="line">        BaseApplication.sApplication.bindService(intent, <span class="keyword">this</span>, Context.BIND_AUTO_CREATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">        iWebviewProcessToMainProcessAidl = IWebviewProcessToMainProcessAidl.Stub.asInterface(service);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">        iWebviewProcessToMainProcessAidl = <span class="keyword">null</span>;</div><div class="line">        initAidlConnection();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindingDied</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">        iWebviewProcessToMainProcessAidl = <span class="keyword">null</span>;</div><div class="line">        initAidlConnection();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 通过 AIDL 交给主进程。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeCommand</span><span class="params">(String commandName, String params)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (iWebviewProcessToMainProcessAidl != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                iWebviewProcessToMainProcessAidl.handleWebCommand(commandName, params);</div><div class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4、在 app 注册命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AutoService</span>(&#123;Command.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandShowToast</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"showToast"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Map parameters)</span> </span>&#123;</div><div class="line">        Handler handler = <span class="keyword">new</span> Handler(Looper.getMainLooper());</div><div class="line">        handler.post(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Toast.makeText(BaseApplication.sApplication, String.valueOf(parameters.get(<span class="string">"message"</span>)), Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="如果需要，可以将处理结果从主进程返回给-webview-进程，并通过回调显示"><a href="#如果需要，可以将处理结果从主进程返回给-webview-进程，并通过回调显示" class="headerlink" title="如果需要，可以将处理结果从主进程返回给 webview 进程，并通过回调显示"></a><strong>如果需要，可以将处理结果从主进程返回给 webview 进程，并通过回调显示</strong></h2><p>1、创建主进程到 webview 进程的 AIDL，用于返回 Web 请求的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package io.weichao.module_webview;</div><div class="line"></div><div class="line">interface ICallbackFromMainProcessToWebviewProcessAidl &#123;</div><div class="line">    void onResult(String callbackName, String response);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、修改 webview 进程到主进程的 AIDL，将用于回调的方法作为参数传递：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">import io.weichao.module_webview.ICallbackFromMainProcessToWebviewProcessAidl;</div><div class="line"></div><div class="line">interface IWebviewProcessToMainProcessAidl &#123;</div><div class="line">    void handleWebCommand(String commandName, String paramsJson, in ICallbackFromMainProcessToWebviewProcessAidl callback);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件化结构&quot;&gt;&lt;a href=&quot;#组件化结构&quot; class=&quot;headerlink&quot; title=&quot;组件化结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;组件化结构&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://weichao-io-1257283924.c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>app 换肤</title>
    <link href="http://www.weichao.io/2020/08/13/app-%E6%8D%A2%E8%82%A4/"/>
    <id>http://www.weichao.io/2020/08/13/app-换肤/</id>
    <published>2020-08-13T01:22:52.000Z</published>
    <updated>2020-08-13T01:40:17.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://www.jianshu.com/p/d487f0aa9818" title="https://www.jianshu.com/p/d487f0aa9818" target="_blank" rel="external">Android资源篇1：资源编译与打包</a></li><li><a href="https://blog.csdn.net/CrazyMo_/article/details/94741088" title="https://blog.csdn.net/CrazyMo_/article/details/94741088" target="_blank" rel="external">Android进阶——从源文件到APK背后的所有主要流程小结</a></li><li><a href="https://www.jianshu.com/p/ef64106ca1d3" title="https://www.jianshu.com/p/ef64106ca1d3" target="_blank" rel="external">Android资源查找分析</a></li></ul><hr><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h1><ol><li>替换 res 目录中的资源；</li><li>不重启；</li><li>无闪烁。</li></ol><hr><h1 id="换肤原理"><a href="#换肤原理" class="headerlink" title="换肤原理"></a><strong>换肤原理</strong></h1><p>1、设置 Activity 的 LayoutInflater 为自定义的 Factory2，这样当调用 Activity#setContentView() 方法时会接管创建 View 的操作；<br>2、在创建 View 成功后，查看 View 是否包含在换肤范围内的属性，如果有，就将 View 存起来；<br>3、当执行换肤时，会先下载皮肤包，然后将皮肤包中的资源合并到宿主 app 的资源中，形成新的资源包；遍历（2）中保存的 View，将资源替换为新的资源包中的资源。</p><p>源码：<a href="http://colors.black:10086/0/skin_demo" title="http://colors.black:10086/0/skin_demo" target="_blank" rel="external">skin_demo</a></p><hr><h1 id="资源"><a href="#资源" class="headerlink" title="资源"></a><strong>资源</strong></h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a><strong>分类</strong></h2><h3 id="assets"><a href="#assets" class="headerlink" title="assets"></a><strong>assets</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E6%8D%A2%E8%82%A4/1.png" alt=""></p><h3 id="res"><a href="#res" class="headerlink" title="res"></a><strong>res</strong></h3><ul><li>animator：属性动画 XML 文件</li><li>anim：视图动画 XML 文件</li><li>color：颜色 XML 文件</li><li>drawable：drawable XML 文件、Bitmap 文件（.png、.9.png、.jpg、.gif 等）</li><li>layout：布局 XML 文件</li><li>menu：菜单 XML 文件</li><li>raw：原始资源文件</li><li>values：字符串、颜色、尺寸、样式、属性等 XML 文件</li><li>xml：XML 文件</li></ul><h2 id="资源打包流程"><a href="#资源打包流程" class="headerlink" title="资源打包流程"></a><strong>资源打包流程</strong></h2><p>资源打包是由 AAPT 工具完成，assert、res/raw、Bitmap 文件会被原封不动地打包到 APK 里，XML 会被编译成二进制文件，最终生成 R.java 和 resources.arsc。</p><p>详细流程：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E6%8D%A2%E8%82%A4/2.png" alt=""></p><p>R.java 存储资源 ID（系统资源以 0x01 开头，应用资源以 0x7f 开头）：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E6%8D%A2%E8%82%A4/3.png" alt=""></p><p>resources.arsc 存储资源 ID 和文件的映射关系：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E6%8D%A2%E8%82%A4/4.png" alt=""></p><h2 id="布局-XML-解析流程"><a href="#布局-XML-解析流程" class="headerlink" title="布局 XML 解析流程"></a><strong>布局 XML 解析流程</strong></h2><h3 id="在-Activity-中加载布局-XML-文件"><a href="#在-Activity-中加载布局-XML-文件" class="headerlink" title="在 Activity 中加载布局 XML 文件"></a><strong>在 Activity 中加载布局 XML 文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Activity：直接交给-Window-处理"><a href="#Activity：直接交给-Window-处理" class="headerlink" title="Activity：直接交给 Window 处理"></a><strong>Activity：直接交给 Window 处理</strong></h3><p>此处的 Window 是 PhoneWindow。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public void setContentView(@LayoutRes int layoutResID) &#123;</div><div class="line">    getWindow().setContentView(layoutResID);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="PhoneWindow：创建-DecorView"><a href="#PhoneWindow：创建-DecorView" class="headerlink" title="PhoneWindow：创建 DecorView"></a><strong>PhoneWindow：创建 DecorView</strong></h3><p>创建 DecorView 作为 Window 的顶层 View，然后交给 LayoutInflater 处理，同时 DecorView 作为 parent。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</div><div class="line">        installDecor();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    mLayoutInflater.inflate(layoutResID, mContentParent);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="LayoutInflater-处理"><a href="#LayoutInflater-处理" class="headerlink" title="LayoutInflater 处理"></a><strong>LayoutInflater 处理</strong></h3><p>1、获取 Context 绑定的 Resources；<br>2、创建 XML 资源解析器，解析 XML；<br>3、通过 createViewFromTag() 方法创建 View。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(@LayoutRes <span class="keyword">int</span> resource, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Resources res = getContext().getResources();</div><div class="line">    <span class="keyword">final</span> XmlResourceParser parser = res.getLayout(resource);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> inflate(parser, root, attachToRoot);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        parser.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">inflate</span><span class="params">(XmlPullParser parser, @Nullable ViewGroup root, <span class="keyword">boolean</span> attachToRoot)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    View result = root;</div><div class="line">    ...</div><div class="line">    <span class="keyword">final</span> String name = parser.getName();</div><div class="line">    ...</div><div class="line">    <span class="keyword">final</span> View temp = createViewFromTag(root, name, inflaterContext, attrs);</div><div class="line"></div><div class="line">    ViewGroup.LayoutParams params = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</div><div class="line">        params = root.generateLayoutParams(attrs);</div><div class="line">        <span class="keyword">if</span> (!attachToRoot) &#123;</div><div class="line">            temp.setLayoutParams(params);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    rInflateChildren(parser, temp, attrs, <span class="keyword">true</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span> &amp;&amp; attachToRoot) &#123;</div><div class="line">        root.addView(temp, params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span> || !attachToRoot) &#123;</div><div class="line">        result = temp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">View <span class="title">createViewFromTag</span><span class="params">(View parent, String name, Context context, AttributeSet attrs, <span class="keyword">boolean</span> ignoreThemeAttr)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    View view;</div><div class="line">    <span class="comment">// view 创建顺序是 mFactory2、mFactory、mPrivateFactory、onCreateView、createView</span></div><div class="line">    <span class="keyword">if</span> (mFactory2 != <span class="keyword">null</span>) &#123;</div><div class="line">        view = mFactory2.onCreateView(parent, name, context, attrs);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mFactory != <span class="keyword">null</span>) &#123;</div><div class="line">        view = mFactory.onCreateView(name, context, attrs);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        view = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span> &amp;&amp; mPrivateFactory != <span class="keyword">null</span>) &#123;</div><div class="line">        view = mPrivateFactory.onCreateView(parent, name, context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> Object lastContext = mConstructorArgs[<span class="number">0</span>];</div><div class="line">        mConstructorArgs[<span class="number">0</span>] = context;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (-<span class="number">1</span> == name.indexOf(<span class="string">'.'</span>)) &#123;</div><div class="line">                view = onCreateView(parent, name, attrs);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                view = createView(name, <span class="keyword">null</span>, attrs);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mConstructorArgs[<span class="number">0</span>] = lastContext;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>所以自定义 Factory2 就可以实现抢在系统之前创建 View。</p><h2 id="Resources-初始化流程"><a href="#Resources-初始化流程" class="headerlink" title="Resources 初始化流程"></a><strong>Resources 初始化流程</strong></h2><p>在 app 启动流程中，当 zygote fork 出 app 进程后，会在 app 进程执行 ActivityThread#main() 方法。</p><h3 id="ActivityThread：除了启动主线程-Looper，还创建了-ContextImpl-对象"><a href="#ActivityThread：除了启动主线程-Looper，还创建了-ContextImpl-对象" class="headerlink" title="ActivityThread：除了启动主线程 Looper，还创建了 ContextImpl 对象"></a><strong>ActivityThread：除了启动主线程 Looper，还创建了 ContextImpl 对象</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    Looper.prepareMainLooper();</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">    thread.attach(<span class="keyword">false</span>, startSeq);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    Looper.loop();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(<span class="keyword">boolean</span> system, <span class="keyword">long</span> startSeq)</span> </span>&#123;</div><div class="line">    sCurrentActivityThread = <span class="keyword">this</span>;</div><div class="line">    mSystemThread = system;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">    mInstrumentation = <span class="keyword">new</span> Instrumentation();</div><div class="line">    mInstrumentation.basicInit(<span class="keyword">this</span>);</div><div class="line">    ContextImpl context = ContextImpl.createAppContext(<span class="keyword">this</span>, getSystemContext().mPackageInfo);</div><div class="line">    mInitialApplication = context.mPackageInfo.makeApplication(<span class="keyword">true</span>, <span class="keyword">null</span>);</div><div class="line">    mInitialApplication.onCreate();</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ContextImpl：通过-LoadedApk-获取-Resources，并绑定"><a href="#ContextImpl：通过-LoadedApk-获取-Resources，并绑定" class="headerlink" title="ContextImpl：通过 LoadedApk 获取 Resources，并绑定"></a><strong>ContextImpl：通过 LoadedApk 获取 Resources，并绑定</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> ContextImpl <span class="title">createAppContext</span><span class="params">(ActivityThread mainThread, LoadedApk packageInfo)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    ContextImpl context = <span class="keyword">new</span> ContextImpl(<span class="keyword">null</span>, mainThread, packageInfo, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>, <span class="keyword">null</span>);</div><div class="line">    context.setResources(packageInfo.getResources());</div><div class="line">    <span class="keyword">return</span> context;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="LoadedApk：将获取-Resources-的工作转给-ResourcesManager"><a href="#LoadedApk：将获取-Resources-的工作转给-ResourcesManager" class="headerlink" title="LoadedApk：将获取 Resources 的工作转给 ResourcesManager"></a><strong>LoadedApk：将获取 Resources 的工作转给 ResourcesManager</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mResources == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">final</span> String[] splitPaths;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            splitPaths = getSplitPaths(<span class="keyword">null</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"null split not found"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mResources = ResourcesManager.getInstance().getResources(<span class="keyword">null</span>, mResDir, splitPaths, mOverlayDirs, mApplicationInfo.sharedLibraryFiles, Display.DEFAULT_DISPLAY, <span class="keyword">null</span>, getCompatibilityInfo(), getClassLoader());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mResources;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ResourcesManager：创建-ResourcesImpl-中的-AssetManager；创建-ResourcesImpl"><a href="#ResourcesManager：创建-ResourcesImpl-中的-AssetManager；创建-ResourcesImpl" class="headerlink" title="ResourcesManager：创建 ResourcesImpl 中的 AssetManager；创建 ResourcesImpl"></a><strong>ResourcesManager：创建 ResourcesImpl 中的 AssetManager；创建 ResourcesImpl</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Resources <span class="title">getResources</span><span class="params">(@Nullable IBinder activityToken, @Nullable String resDir, @Nullable String[] splitResDirs, @Nullable String[] overlayDirs, @Nullable String[] libDirs, <span class="keyword">int</span> displayId, @Nullable Configuration overrideConfig, @NonNull CompatibilityInfo compatInfo, @Nullable ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ResourcesKey key = <span class="keyword">new</span> ResourcesKey(resDir, splitResDirs, overlayDirs, libDirs, displayId, overrideConfig != <span class="keyword">null</span> ? <span class="keyword">new</span> Configuration(overrideConfig) : <span class="keyword">null</span>, compatInfo);</div><div class="line">    classLoader = classLoader != <span class="keyword">null</span> ? classLoader : ClassLoader.getSystemClassLoader();</div><div class="line">    <span class="keyword">return</span> getOrCreateResources(activityToken, key, classLoader);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="function">Resources <span class="title">getOrCreateResources</span><span class="params">(@Nullable IBinder activityToken, @NonNull ResourcesKey key, @NonNull ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    ResourcesImpl resourcesImpl = createResourcesImpl(key);</div><div class="line">    <span class="keyword">if</span> (resourcesImpl == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Resources resources;</div><div class="line">    <span class="keyword">if</span> (activityToken != <span class="keyword">null</span>) &#123;</div><div class="line">        resources = getOrCreateResourcesForActivityLocked(activityToken, classLoader, resourcesImpl, key.mCompatInfo);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        resources = getOrCreateResourcesLocked(classLoader, resourcesImpl, key.mCompatInfo);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> resources;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="function">ResourcesImpl <span class="title">createResourcesImpl</span><span class="params">(@NonNull ResourcesKey key)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> DisplayAdjustments daj = <span class="keyword">new</span> DisplayAdjustments(key.mOverrideConfiguration);</div><div class="line">    daj.setCompatibilityInfo(key.mCompatInfo);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> AssetManager assets = createAssetManager(key);</div><div class="line">    <span class="keyword">if</span> (assets == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> DisplayMetrics dm = getDisplayMetrics(key.mDisplayId, daj);</div><div class="line">    <span class="keyword">final</span> Configuration config = generateConfig(key, dm);</div><div class="line">    <span class="keyword">final</span> ResourcesImpl impl = <span class="keyword">new</span> ResourcesImpl(assets, dm, config, daj);</div><div class="line">    <span class="keyword">return</span> impl;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@VisibleForTesting</span></div><div class="line"><span class="keyword">protected</span> <span class="meta">@Nullable</span> <span class="function">AssetManager <span class="title">createAssetManager</span><span class="params">(@NonNull <span class="keyword">final</span> ResourcesKey key)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> AssetManager.Builder builder = <span class="keyword">new</span> AssetManager.Builder();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (key.mResDir != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            builder.addApkAssets(loadApkAssets(key.mResDir, <span class="keyword">false</span> <span class="comment">/*sharedLib*/</span>, <span class="keyword">false</span> <span class="comment">/*overlay*/</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"failed to add asset path "</span> + key.mResDir);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (key.mSplitResDirs != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> String splitResDir : key.mSplitResDirs) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                builder.addApkAssets(loadApkAssets(splitResDir, <span class="keyword">false</span> <span class="comment">/*sharedLib*/</span>, <span class="keyword">false</span> <span class="comment">/*overlay*/</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"failed to add split asset path "</span> + splitResDir);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (key.mOverlayDirs != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> String idmapPath : key.mOverlayDirs) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                builder.addApkAssets(loadApkAssets(idmapPath, <span class="keyword">false</span> <span class="comment">/*sharedLib*/</span>, <span class="keyword">true</span> <span class="comment">/*overlay*/</span>));</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                Log.w(TAG, <span class="string">"failed to add overlay path "</span> + idmapPath);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (key.mLibDirs != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> String libDir : key.mLibDirs) &#123;</div><div class="line">            <span class="keyword">if</span> (libDir.endsWith(<span class="string">".apk"</span>)) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    builder.addApkAssets(loadApkAssets(libDir, <span class="keyword">true</span> <span class="comment">/*sharedLib*/</span>, <span class="keyword">false</span> <span class="comment">/*overlay*/</span>));</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    Log.w(TAG, <span class="string">"Asset path '"</span> + libDir +</div><div class="line">                            <span class="string">"' does not exist or contains no resources."</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> builder.build();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="AssetManager：将系统资源和用户资源合并"><a href="#AssetManager：将系统资源和用户资源合并" class="headerlink" title="AssetManager：将系统资源和用户资源合并"></a><strong>AssetManager：将系统资源和用户资源合并</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayList&lt;ApkAssets&gt; mUserApkAssets = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Builder <span class="title">addApkAssets</span><span class="params">(ApkAssets apkAssets)</span> </span>&#123;</div><div class="line">        mUserApkAssets.add(apkAssets);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AssetManager <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ApkAssets[] systemApkAssets = getSystem().getApkAssets();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> totalApkAssetCount = systemApkAssets.length + mUserApkAssets.size();</div><div class="line">        <span class="keyword">final</span> ApkAssets[] apkAssets = <span class="keyword">new</span> ApkAssets[totalApkAssetCount];</div><div class="line"></div><div class="line">        System.arraycopy(systemApkAssets, <span class="number">0</span>, apkAssets, <span class="number">0</span>, systemApkAssets.length);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> userApkAssetCount = mUserApkAssets.size();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userApkAssetCount; i++) &#123;</div><div class="line">            apkAssets[i + systemApkAssets.length] = mUserApkAssets.get(i);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> AssetManager assetManager = <span class="keyword">new</span> AssetManager(<span class="keyword">false</span> <span class="comment">/*sentinel*/</span>);</div><div class="line">        assetManager.mApkAssets = apkAssets;</div><div class="line">        AssetManager.nativeSetApkAssets(assetManager.mObject, apkAssets, <span class="keyword">false</span> <span class="comment">/*invalidateCaches*/</span>);</div><div class="line">        <span class="keyword">return</span> assetManager;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="资源查找流程"><a href="#资源查找流程" class="headerlink" title="资源查找流程"></a><strong>资源查找流程</strong></h2><p>以查找字符串为例，依次经过 Context -&gt; ContextImpl-&gt; Resources -&gt; ResourcesImpl -&gt; AssetManager，其中 ContextImpl、ResourcesImpl、AssetManager 在 app 启动时初始化 Resource 时创建。<br>AssetManager 调用 native 层代码会获取 ResTable 资源表，然后根据机器配置在 ResTable 的 mPackageGroups 数组中查找到一个最合适的值。详细流程参考<a href="https://www.jianshu.com/p/ef64106ca1d3" title="https://www.jianshu.com/p/ef64106ca1d3" target="_blank" rel="external">Android资源查找分析</a>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getString(R.string.app_name);</div></pre></td></tr></table></figure></p><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a><strong>Context</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getString</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> getResources().getString(resId);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ContextImpl"><a href="#ContextImpl" class="headerlink" title="ContextImpl"></a><strong>ContextImpl</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mResources;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a><strong>Resources</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(@StringRes <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</div><div class="line">    <span class="keyword">return</span> getText(id).toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NonNull</span> <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getText</span><span class="params">(@StringRes <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</div><div class="line">    CharSequence res = mResourcesImpl.getAssets().getResourceText(id);</div><div class="line">    <span class="keyword">if</span> (res != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"String resource ID #0x"</span> + Integer.toHexString(id));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="ResourcesImpl"><a href="#ResourcesImpl" class="headerlink" title="ResourcesImpl"></a><strong>ResourcesImpl</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@UnsupportedAppUsage</span></div><div class="line"><span class="function"><span class="keyword">public</span> AssetManager <span class="title">getAssets</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mAssets;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="AssetManager"><a href="#AssetManager" class="headerlink" title="AssetManager"></a><strong>AssetManager</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Nullable</span> <span class="function">CharSequence <span class="title">getResourceText</span><span class="params">(@StringRes <span class="keyword">int</span> resId)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">final</span> TypedValue outValue = mValue;</div><div class="line">        <span class="keyword">if</span> (getResourceValue(resId, <span class="number">0</span>, outValue, <span class="keyword">true</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> outValue.coerceToString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">getResourceValue</span><span class="params">(@AnyRes <span class="keyword">int</span> resId, <span class="keyword">int</span> densityDpi, @NonNull TypedValue outValue, <span class="keyword">boolean</span> resolveRefs)</span> </span>&#123;</div><div class="line">    Preconditions.checkNotNull(outValue, <span class="string">"outValue"</span>);</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        ensureValidLocked();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> cookie = nativeGetResourceValue(mObject, resId, (<span class="keyword">short</span>) densityDpi, outValue, resolveRefs);</div><div class="line">        <span class="keyword">if</span> (cookie &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        outValue.changingConfigurations = ActivityInfo.activityInfoConfigNativeToJava(outValue.changingConfigurations);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (outValue.type == TypedValue.TYPE_STRING) &#123;</div><div class="line">            outValue.string = mApkAssets[cookie - <span class="number">1</span>].getStringFromPool(outValue.data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a><strong>效果</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/app-%E6%8D%A2%E8%82%A4/5.gif" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ww
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>APK 文件加固</title>
    <link href="http://www.weichao.io/2020/08/11/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/"/>
    <id>http://www.weichao.io/2020/08/11/APK-文件加固/</id>
    <published>2020-08-10T22:19:02.000Z</published>
    <updated>2020-08-10T22:29:24.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="加固原理"><a href="#加固原理" class="headerlink" title="加固原理"></a><strong>加固原理</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/1.png" alt=""></p><p>源码：<br>1、<a href="http://colors.black:10086/0/protect-app" title="http://colors.black:10086/0/protect-app" target="_blank" rel="external">ProtectApp</a><br>2、<a href="http://colors.black:10086/0/ShellAddProject" title="http://colors.black:10086/0/ShellAddProject" target="_blank" rel="external">ShellAddProject</a></p><hr><h1 id="APK-文件打包流程"><a href="#APK-文件打包流程" class="headerlink" title="APK 文件打包流程"></a><strong>APK 文件打包流程</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/2.png" alt=""></p><hr><h1 id="创建-APK-文件、壳"><a href="#创建-APK-文件、壳" class="headerlink" title="创建 APK 文件、壳"></a><strong>创建 APK 文件、壳</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/3.png" alt=""></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew assembleDebug</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/4.png" alt=""></p><hr><h1 id="加壳流程"><a href="#加壳流程" class="headerlink" title="加壳流程"></a><strong>加壳流程</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/5.png" alt=""></p><h2 id="加密-DEX-文件"><a href="#加密-DEX-文件" class="headerlink" title="加密 DEX 文件"></a><strong>加密 DEX 文件</strong></h2><h3 id="将-APK-文件解压缩"><a href="#将-APK-文件解压缩" class="headerlink" title="将 APK 文件解压缩"></a><strong>将 APK 文件解压缩</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unZip</span><span class="params">(File srcFile, File dstDir)</span> </span>&#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">dstDir.delete();</div><div class="line">ZipFile zipFile = <span class="keyword">new</span> ZipFile(srcFile);</div><div class="line">Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</div><div class="line"><span class="keyword">while</span> (entries.hasMoreElements()) &#123;</div><div class="line">ZipEntry zipEntry = entries.nextElement();</div><div class="line">String name = zipEntry.getName();</div><div class="line"><span class="keyword">if</span> (name.equals(<span class="string">"META-INF/CERT.RSA"</span>) || name.equals(<span class="string">"META-INF/CERT.SF"</span>)</div><div class="line">|| name.equals(<span class="string">"META-INF/MANIFEST.MF"</span>)) &#123;</div><div class="line"><span class="keyword">continue</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!zipEntry.isDirectory()) &#123;</div><div class="line">File file = <span class="keyword">new</span> File(dstDir, name);</div><div class="line"><span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</div><div class="line">file.getParentFile().mkdirs();</div><div class="line">&#125;</div><div class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">InputStream is = zipFile.getInputStream(zipEntry);</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">fos.write(buffer, <span class="number">0</span>, len);</div><div class="line">&#125;</div><div class="line">is.close();</div><div class="line">fos.close();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">zipFile.close();</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/6.png" alt=""></p><h3 id="将解压缩出来的-DEX-文件加密"><a href="#将解压缩出来的-DEX-文件加密" class="headerlink" title="将解压缩出来的 DEX 文件加密"></a><strong>将解压缩出来的 DEX 文件加密</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">File[] DEXFiles = dstDir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file, String s)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> s.endsWith(<span class="string">".dex"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">for</span> (File file : DEXFiles) &#123;</div><div class="line"><span class="comment">// 读数据</span></div><div class="line"><span class="keyword">byte</span>[] buffer = Utils.getBytes(file);</div><div class="line"><span class="comment">// 加密</span></div><div class="line"><span class="keyword">byte</span>[] encryptBytes = encrypt(buffer);</div><div class="line"><span class="comment">// 写数据， 替换原来的数据</span></div><div class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">fos.write(encryptBytes);</div><div class="line">fos.flush();</div><div class="line">fos.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] content) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="keyword">return</span> encryptCipher.doFinal(content);</div><div class="line">&#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="将-DEX-文件重命名"><a href="#将-DEX-文件重命名" class="headerlink" title="将 DEX 文件重命名"></a><strong>将 DEX 文件重命名</strong></h3><p>classes.dex -&gt; classes_.dex<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/7.png" alt=""></p><h2 id="获取壳的-DEX-文件"><a href="#获取壳的-DEX-文件" class="headerlink" title="获取壳的 DEX 文件"></a><strong>获取壳的 DEX 文件</strong></h2><h3 id="将-AAR-文件解压缩"><a href="#将-AAR-文件解压缩" class="headerlink" title="将 AAR 文件解压缩"></a><strong>将 AAR 文件解压缩</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/8.png" alt=""></p><h3 id="根据解压缩出来的-JAR-文件使用-dx-命令生成-DEX-文件"><a href="#根据解压缩出来的-JAR-文件使用-dx-命令生成-DEX-文件" class="headerlink" title="根据解压缩出来的 JAR 文件使用 dx 命令生成 DEX 文件"></a><strong>根据解压缩出来的 JAR 文件使用 dx 命令生成 DEX 文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">File[] files = dir.listFiles(<span class="keyword">new</span> FilenameFilter() &#123;</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file, String s)</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> s.equals(<span class="string">"classes.jar"</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">if</span> (files == <span class="keyword">null</span> || files.length &lt;= <span class="number">0</span>) &#123;</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"the aar is invalidate"</span>);</div><div class="line">&#125;</div><div class="line">File classesJARFile = files[<span class="number">0</span>];</div><div class="line">File classesDEXFile = <span class="keyword">new</span> File(classesJARFile.getParentFile(), <span class="string">"classes.dex"</span>);</div><div class="line">dxCommand(classesDEXFile, classesJARFile);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dxCommand</span><span class="params">(File DEXFile, File JARFile)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</div><div class="line">Runtime runtime = Runtime.getRuntime();</div><div class="line">Process process = runtime</div><div class="line">.exec(<span class="string">"cmd.exe /C dx --dex --output="</span> + DEXFile.getAbsolutePath() + <span class="string">" "</span> + JARFile.getAbsolutePath());</div><div class="line">System.out.println(<span class="string">"start dx..."</span>);</div><div class="line"></div><div class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</div><div class="line">String line;</div><div class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">System.out.println(line);</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">process.waitFor();</div><div class="line">System.out.println(<span class="string">"waiting..."</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line"><span class="keyword">throw</span> e;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.exitValue() != <span class="number">0</span>) &#123;</div><div class="line">InputStream inputStream = process.getErrorStream();</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line"><span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">bos.write(buffer, <span class="number">0</span>, len);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="keyword">new</span> String(bos.toByteArray(), <span class="string">"GBK"</span>));</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"dx failed!"</span>);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"finish dx!"</span>);</div><div class="line">process.destroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/9.png" alt=""></p><h2 id="合成新的-APK-文件"><a href="#合成新的-APK-文件" class="headerlink" title="合成新的 APK 文件"></a><strong>合成新的 APK 文件</strong></h2><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a><strong>打包</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zip</span><span class="params">(File srcDir, File dstFile)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">dstFile.delete();</div><div class="line"><span class="comment">// 对输出文件做 CRC32 校验</span></div><div class="line">CheckedOutputStream cos = <span class="keyword">new</span> CheckedOutputStream(<span class="keyword">new</span> FileOutputStream(dstFile), <span class="keyword">new</span> CRC32());</div><div class="line"></div><div class="line">ZipOutputStream zos = <span class="keyword">new</span> ZipOutputStream(cos);</div><div class="line">compress(srcDir, zos, <span class="string">""</span>);</div><div class="line">zos.flush();</div><div class="line">zos.close();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(File srcFile, ZipOutputStream zos, String basePath)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"><span class="keyword">if</span> (srcFile.isDirectory()) &#123;</div><div class="line">compressDir(srcFile, zos, basePath);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">compressFile(srcFile, zos, basePath);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compressDir</span><span class="params">(File dir, ZipOutputStream zos, String basePath)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">File[] files = dir.listFiles();</div><div class="line"><span class="keyword">if</span> (files.length &lt; <span class="number">1</span>) &#123;</div><div class="line">ZipEntry entry = <span class="keyword">new</span> ZipEntry(basePath + dir.getName() + <span class="string">"/"</span>);</div><div class="line">zos.putNextEntry(entry);</div><div class="line">zos.closeEntry();</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (File file : files) &#123;</div><div class="line">compress(file, zos, basePath + dir.getName() + <span class="string">"/"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">compressFile</span><span class="params">(File file, ZipOutputStream zos, String basePath)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">String name = basePath + file.getName();</div><div class="line">String[] names = name.split(<span class="string">"/"</span>);</div><div class="line"></div><div class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line"><span class="keyword">if</span> (names.length &gt; <span class="number">1</span>) &#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; names.length; i++) &#123;</div><div class="line">builder.append(<span class="string">"/"</span>);</div><div class="line">builder.append(names[i]);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">builder.append(<span class="string">"/"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ZipEntry entry = <span class="keyword">new</span> ZipEntry(builder.toString().substring(<span class="number">1</span>));</div><div class="line">zos.putNextEntry(entry);</div><div class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</div><div class="line"><span class="keyword">int</span> count;</div><div class="line"><span class="keyword">byte</span> data[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">while</span> ((count = bis.read(data, <span class="number">0</span>, <span class="number">1024</span>)) != -<span class="number">1</span>) &#123;</div><div class="line">zos.write(data, <span class="number">0</span>, count);</div><div class="line">&#125;</div><div class="line">bis.close();</div><div class="line">zos.closeEntry();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/10.png" alt=""></p><h3 id="使用-jarsigner-命令签名"><a href="#使用-jarsigner-命令签名" class="headerlink" title="使用 jarsigner 命令签名"></a><strong>使用 jarsigner 命令签名</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">signature</span><span class="params">(File unsignedAPKFile, File signedAPKFile)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</div><div class="line"><span class="comment">// .keystore</span></div><div class="line"><span class="comment">//String cmd[] = &#123; "cmd.exe", "/C ", "jarsigner", "-sigalg", "MD5withRSA", "-digestalg", "SHA1", "-keystore",</span></div><div class="line"><span class="comment">//"source/apk/debug.keystore", "-storepass", "android", "-keypass",</span></div><div class="line"><span class="comment">//"android", "-signedjar", signedApk.getAbsolutePath(), unsignedApk.getAbsolutePath(),</span></div><div class="line"><span class="comment">//"android" &#125;;</span></div><div class="line"><span class="comment">// .jks</span></div><div class="line">String cmd[] = &#123; <span class="string">"cmd.exe"</span>, <span class="string">"/C "</span>, <span class="string">"jarsigner"</span>, <span class="string">"-verbose"</span>, <span class="string">"-keystore"</span>, <span class="string">"source/apk/debug.jks"</span>, <span class="string">"-storepass"</span>,</div><div class="line"><span class="string">"aaaaaa"</span>, <span class="string">"-keypass"</span>, <span class="string">"aaaaaa"</span>, <span class="string">"-signedjar"</span>, signedAPKFile.getAbsolutePath(),</div><div class="line">unsignedAPKFile.getAbsolutePath(), <span class="string">"aaaaaa"</span> &#125;;</div><div class="line">Process process = Runtime.getRuntime().exec(cmd);</div><div class="line">System.out.println(<span class="string">"start sign..."</span>);</div><div class="line"></div><div class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(process.getInputStream()));</div><div class="line">String line;</div><div class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">System.out.println(line);</div><div class="line">&#125;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">process.waitFor();</div><div class="line">System.out.println(<span class="string">"waiting..."</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line"><span class="keyword">throw</span> e;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (process.exitValue() != <span class="number">0</span>) &#123;</div><div class="line">InputStream inputStream = process.getErrorStream();</div><div class="line"><span class="keyword">int</span> len;</div><div class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</div><div class="line">ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line"><span class="keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">bos.write(buffer, <span class="number">0</span>, len);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="keyword">new</span> String(bos.toByteArray(), <span class="string">"GBK"</span>));</div><div class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"sign failed!"</span>);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"finish sign!"</span>);</div><div class="line">process.destroy();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/11.png" alt=""></p><hr><h1 id="脱壳流程"><a href="#脱壳流程" class="headerlink" title="脱壳流程"></a><strong>脱壳流程</strong></h1><h2 id="将-APK-文件解压缩-1"><a href="#将-APK-文件解压缩-1" class="headerlink" title="将 APK 文件解压缩"></a><strong>将 APK 文件解压缩</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unZip</span><span class="params">(File srcFile, File dstDir)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        dstDir.delete();</div><div class="line">        ZipFile zipFile = <span class="keyword">new</span> ZipFile(srcFile);</div><div class="line">        Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</div><div class="line">        <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</div><div class="line">            ZipEntry zipEntry = entries.nextElement();</div><div class="line">            String name = zipEntry.getName();</div><div class="line">            <span class="keyword">if</span> (name.equals(<span class="string">"META-INF/CERT.RSA"</span>) || name.equals(<span class="string">"META-INF/CERT.SF"</span>)</div><div class="line">                    || name.equals(<span class="string">"META-INF/MANIFEST.MF"</span>)) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!zipEntry.isDirectory()) &#123;</div><div class="line">                File file = <span class="keyword">new</span> File(dstDir, name);</div><div class="line">                <span class="keyword">if</span> (!file.getParentFile().exists()) &#123;</div><div class="line">                    file.getParentFile().mkdirs();</div><div class="line">                &#125;</div><div class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">                InputStream is = zipFile.getInputStream(zipEntry);</div><div class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">                <span class="keyword">int</span> len;</div><div class="line">                <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">                    fos.write(buffer, <span class="number">0</span>, len);</div><div class="line">                &#125;</div><div class="line">                is.close();</div><div class="line">                fos.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        zipFile.close();</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="将解压缩出来的-DEX-文件解密"><a href="#将解压缩出来的-DEX-文件解密" class="headerlink" title="将解压缩出来的 DEX 文件解密"></a><strong>将解压缩出来的 DEX 文件解密</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    decryptCipher = Cipher.getInstance(ALGORITHM);</div><div class="line">    <span class="keyword">byte</span>[] keyStr = password.getBytes();</div><div class="line">    SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(keyStr, <span class="string">"AES"</span>);</div><div class="line">    decryptCipher.init(Cipher.DECRYPT_MODE, key);</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] content) &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> decryptCipher.doFinal(content);</div><div class="line">    &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="加载解密后的-DEX-文件（插件化原理）"><a href="#加载解密后的-DEX-文件（插件化原理）" class="headerlink" title="加载解密后的 DEX 文件（插件化原理）"></a><strong>加载解密后的 DEX 文件（插件化原理）</strong></h2><hr><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a><strong>验证</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/APK-%E6%96%87%E4%BB%B6%E5%8A%A0%E5%9B%BA/12.gif" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;加固原理&quot;&gt;&lt;a href=&quot;#加固原理&quot; class=&quot;headerlink&quot; title=&quot;加固原理&quot;&gt;&lt;/a&gt;&lt;strong&gt;加固原理&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://weichao-io-1257283924.cos.a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NAS 搭建环境 &amp; 部署 Git 服务端</title>
    <link href="http://www.weichao.io/2020/07/12/NAS-%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83-%E9%83%A8%E7%BD%B2-Git-%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>http://www.weichao.io/2020/07/12/NAS-搭建环境-部署-Git-服务端/</id>
    <published>2020-07-12T05:58:33.000Z</published>
    <updated>2020-07-12T06:07:35.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a><strong>缘起</strong></h1><p>起初购买 NAS 是因为 2018 年老家盖房，我负责弱电部分。除了电话、有线电视、网络、网络电视以外，还有监控系统。</p><p>对于监控系统，我原计划是在室外部分采用有线传输的<a href="https://item.jd.com/4415837.html" title="https://item.jd.com/4415837.html" target="_blank" rel="external">萤石C5S</a>及其公有云，在室内部分采用无线传输的<a href="https://item.jd.com/5083558.html" title="https://item.jd.com/5083558.html" target="_blank" rel="external">米家智能摄像机</a>及私有云，私有云由 NAS 实现。由于摄像机部署在室内时采集的数据属于敏感数据，所以私有云存储是很有必要的。</p><p>经过调研，最终 NAS 购买了<a href="https://item.jd.com/2496077.html" title="https://item.jd.com/2496077.html" target="_blank" rel="external">威廉通TS-451+</a>，并配置了<a href="https://item.jd.com/100004198714.html" title="https://item.jd.com/100004198714.html" target="_blank" rel="external">红盘</a>作为系统盘、<a href="https://item.jd.com/4934516.html" title="https://item.jd.com/4934516.html" target="_blank" rel="external">紫盘</a>作为摄像头数据专用盘、<a href="https://item.jd.com/1578736992.html" title="https://item.jd.com/1578736992.html" target="_blank" rel="external">APC BK650-CH</a>作为 NAS 后备电源。</p><p>后来因为长辈不喜室内监控，所以监控系统的室内部分就放弃了。到了 2019 年，我的房子装修，实现了室内监控，再次翻牌 NAS。</p><hr><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a><strong>搭建环境</strong></h1><p>由于价格原因，ISP 我放弃了联通，转投电信了。光纤入户后接光猫，由于光猫接口有限，所以接出来一个路由器，现在使用的是<a href="https://item.jd.com/100012605828.html" title="https://item.jd.com/100012605828.html" target="_blank" rel="external">华为路由AX3 Pro</a>，是 WiFi6 协议的。</p><h2 id="配置内网访问"><a href="#配置内网访问" class="headerlink" title="配置内网访问"></a><strong>配置内网访问</strong></h2><h3 id="确定路由器-IP"><a href="#确定路由器-IP" class="headerlink" title="确定路由器 IP"></a><strong>确定路由器 IP</strong></h3><p>登录光猫 192.168.1.1，可以看到接入的设备的 IP。我这里接了两个路由器，其中华为路由器的 IP 是 192.168.1.17。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF1.jpg" alt=""></p><h3 id="确定-NAS-IP"><a href="#确定-NAS-IP" class="headerlink" title="确定 NAS IP"></a><strong>确定 NAS IP</strong></h3><p>登录路由器 192.168.1.17，可以看到 NAS IP 是 192.168.3.9。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF2.jpg" alt=""></p><p>同时将路由器 IP 设置为静态 IP。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF3.jpg" alt=""></p><h3 id="登录-NAS"><a href="#登录-NAS" class="headerlink" title="登录 NAS"></a><strong>登录 NAS</strong></h3><p>此时，通过 192.168.3.9 就可以访问 NAS 了，前提是两个设备在同一内网中，也就是连接同一个路由器。</p><p>将 NAS IP 设置为静态 IP。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF4.jpg" alt=""></p><h2 id="配置外网访问"><a href="#配置外网访问" class="headerlink" title="配置外网访问"></a><strong>配置外网访问</strong></h2><h3 id="查看公网-IP"><a href="#查看公网-IP" class="headerlink" title="查看公网 IP"></a><strong>查看公网 IP</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF5.jpg" alt=""></p><h3 id="扫描未被占用的端口"><a href="#扫描未被占用的端口" class="headerlink" title="扫描未被占用的端口"></a><strong>扫描未被占用的端口</strong></h3><p>因为 http 的 80 端口和 https 的 443 端口太容易被占用了，所以使用<a href="http://tool.chinaz.com/port/" title="http://tool.chinaz.com/port/" target="_blank" rel="external">站长工具</a>扫描端口，找到两个未被占用的端口，比如 8888、4443。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF6.jpg" alt=""></p><h3 id="修改-NAS-端口"><a href="#修改-NAS-端口" class="headerlink" title="修改 NAS 端口"></a><strong>修改 NAS 端口</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF7.jpg" alt=""></p><h3 id="启动-NAS-UPnP-转发"><a href="#启动-NAS-UPnP-转发" class="headerlink" title="启动 NAS UPnP 转发"></a><strong>启动 NAS UPnP 转发</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF8.jpg" alt=""></p><p>启动后可以在路由器中看到同样的信息。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF9.jpg" alt=""></p><h3 id="配置光猫端口映射"><a href="#配置光猫端口映射" class="headerlink" title="配置光猫端口映射"></a><strong>配置光猫端口映射</strong></h3><p>将 8888 和 4443 端口映射给路由器。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF10.jpg" alt=""></p><p>此时，通过[IP:端口]就可以访问 NAS 了。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF11.jpg" alt=""></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF12.jpg" alt=""></p><hr><h1 id="部署-Git-服务端"><a href="#部署-Git-服务端" class="headerlink" title="部署 Git 服务端"></a><strong>部署 Git 服务端</strong></h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><strong>下载</strong></h2><p>下载 ContainerStation。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF13.jpg" alt=""></p><p>下载 GitLab。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF14.jpg" alt=""></p><h2 id="添加-NAS-服务"><a href="#添加-NAS-服务" class="headerlink" title="添加 NAS 服务"></a><strong>添加 NAS 服务</strong></h2><p>我给 GitLab 设置的端口是 10086，所以在 NAS 中添加 NAS 服务。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF15.jpg" alt=""></p><h2 id="配置光猫端口映射-1"><a href="#配置光猫端口映射-1" class="headerlink" title="配置光猫端口映射"></a><strong>配置光猫端口映射</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF16.jpg" alt=""></p><h2 id="2GB-RAM-时访问-GitLab"><a href="#2GB-RAM-时访问-GitLab" class="headerlink" title="2GB RAM 时访问 GitLab"></a><strong>2GB RAM 时访问 GitLab</strong></h2><p>大概率会报错。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF17.jpg" alt=""></p><p>这是因为 NAS 自带的 RAM 为 2GB，而 <a href="https://docs.gitlab.com/ee/install/requirements.html#memory" title="https://docs.gitlab.com/ee/install/requirements.html#memory" target="_blank" rel="external">GitLab 要求的最小 RAM 为 4GB</a>，所以又增加了<a href="https://item.jd.com/45678117643.html" title="https://item.jd.com/45678117643.html" target="_blank" rel="external">内存</a>到 8GB。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF18.jpg" alt=""></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF19.jpg" alt=""></p><h2 id="8GB-RAM-时访问-GitLab"><a href="#8GB-RAM-时访问-GitLab" class="headerlink" title="8GB RAM 时访问 GitLab"></a><strong>8GB RAM 时访问 GitLab</strong></h2><p>可以正常使用了。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF/NAS%20%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83%20%26%20%E9%83%A8%E7%BD%B2%20Git%20%E6%9C%8D%E5%8A%A1%E7%AB%AF20.jpg" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;&lt;strong&gt;缘起&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;起初购买 NAS 是因为 2018 年老家盖房，我负责弱电部分。除了电话、有线电视、网络、网络电视以外，还
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>热修复</title>
    <link href="http://www.weichao.io/2020/04/13/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    <id>http://www.weichao.io/2020/04/13/热修复/</id>
    <published>2020-04-13T15:01:33.000Z</published>
    <updated>2020-04-13T15:05:50.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://zhuanlan.zhihu.com/p/75465215" title="https://zhuanlan.zhihu.com/p/75465215" target="_blank" rel="external">全面解析 Android 热修复原理</a></li><li><a href="https://www.lizenghai.com/archives/36469.html#311_Dalvik_dex" title="https://www.lizenghai.com/archives/36469.html#311_Dalvik_dex" target="_blank" rel="external">基于QZone dex分包技术的热修复插件详解</a></li></ul><hr><h1 id="与插件化区别"><a href="#与插件化区别" class="headerlink" title="与插件化区别"></a><strong>与插件化区别</strong></h1><p>补丁包中的类和资源在宿主中已经存在，只是有 bug 需要被修复。</p><hr><h1 id="各框架实现原理"><a href="#各框架实现原理" class="headerlink" title="各框架实现原理"></a><strong>各框架实现原理</strong></h1><blockquote><p><del>Andfix</del>（兼容复杂已废弃）<br>Java 中的类，方法，变量，对应到虚拟机里的实现是 Class，ArtMethod，ArtField。Andfix 是把旧方法的 ArtMethod 内容替换成新方法的 ArtMethod 内容，再次调用旧方法，就会跳转到新方法的入口。</p><p>Qzone（dex 插桩）<br>Qzone 基于的是 dex 分包方案。把有 bug 的方法修复以后，放到一个单独的 dex 补丁文件，让程序运行期间加载 dex 补丁，执行修复后的方法。</p><p>Robust（方法重定向）<br>对每个函数都在编译打包阶段自动的插入了一段代码。类似于代理，将方法执行的代码重定向到其他方法中。</p><p>Tinker<br>Tinker 通过计算对比指定的 base apk 中的 dex 与修改后的 apk 中的 dex 的区别，补丁包中的内容即为两者差分的描述。运行时将 base apk 中的 dex 与补丁包进行合成，重启后加载全新的合成后的 dex 文件。</p></blockquote><hr><h1 id="Qzone-需要解决的问题"><a href="#Qzone-需要解决的问题" class="headerlink" title="Qzone 需要解决的问题"></a><strong>Qzone 需要解决的问题</strong></h1><h2 id="Dalvik-虚拟机中-CLASS-ISPREVERIFIED-导致的校验失败"><a href="#Dalvik-虚拟机中-CLASS-ISPREVERIFIED-导致的校验失败" class="headerlink" title="Dalvik 虚拟机中 CLASS_ISPREVERIFIED 导致的校验失败"></a><strong>Dalvik 虚拟机中 CLASS_ISPREVERIFIED 导致的校验失败</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">E/AndroidRuntime(<span class="number">20525</span>): FATAL EXCEPTION: main</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): java.lang.IllegalAccessError: Class ref in pre-verified <span class="class"><span class="keyword">class</span> <span class="title">resolved</span> <span class="title">to</span> <span class="title">unexpected</span> <span class="title">implementation</span></span></div><div class="line">E/AndroidRuntime(20525): at zeus.test.hotfix.TestHotFixActivity.onCreate(Unknown Source)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.Activity.performCreate(Activity.java:<span class="number">5188</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:<span class="number">1094</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:<span class="number">2074</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:<span class="number">2135</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.ActivityThread.access$<span class="number">700</span>(ActivityThread.java:<span class="number">140</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.ActivityThread$H.handleMessage(ActivityThread.java:<span class="number">1237</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.os.Handler.dispatchMessage(Handler.java:<span class="number">99</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.os.Looper.loop(Looper.java:<span class="number">137</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at android.app.ActivityThread.main(ActivityThread.java:<span class="number">4921</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at java.lang.reflect.Method.invokeNative(Native Method)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at java.lang.reflect.Method.invoke(Method.java:<span class="number">511</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:<span class="number">1038</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:<span class="number">805</span>)</div><div class="line">E/AndroidRuntime(<span class="number">20525</span>): at dalvik.system.NativeStart.main(Native Method)</div></pre></td></tr></table></figure><p>如果一个类和它直接引用的类都在同一个 dex 中的话，那么这个类就会被打上 CLASS_ISPREVERIFIED 标记，而补丁包中的类存在于另一个 dex，不能满足 CLASS_ISPREVERIFIED 导致校验失败，所以需要避免类被打上 CLASS_ISPREVERIFIED 标记。</p><p>解决办法：</p><p>1、创建一个 dex；</p><p>比如随便创建一个 AntilazyLoad.java。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntilazyLoad</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>make module 将 java 文件编译成 class 文件。</p><p>执行命令编译成 dex 文件。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dx --dex --output=hack.dex com\enjoy\patch\hack\AntilazyLoad.class</div></pre></td></tr></table></figure></p><p>2、让每个类都引用这个 dex。</p><p>将 hack.dex 放入 assets 目录。</p><p>借助 gradle，在 compileDebugJavaWithJavac 任务后，且在 transformClassesWithDexBuilderForDebug 任务前，修改每个类。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//gradle 执行会解析 build.gradle 文件，afterEvaluate 表示在解析完成之后再执行我们的代码</span></div><div class="line">afterEvaluate (&#123;</div><div class="line">    android.getApplicationVariants.all &#123;</div><div class="line">        variant-&gt;</div><div class="line">        <span class="comment">//获得 debug/release</span></div><div class="line">        String variantName = variant.getName()</div><div class="line">        <span class="comment">//首字母大写</span></div><div class="line">        String capitalizedName = variantName.capitalize()</div><div class="line">        <span class="comment">//通过任务名字找到打包 dex 的任务</span></div><div class="line">        <span class="keyword">Task</span> dexTask = <span class="keyword">project</span>.getTasks().findByName(<span class="string">"transformClassesWithDexBuilderFor"</span> + capitalizedName)</div><div class="line">        <span class="comment">//定义 doFirst()</span></div><div class="line">        dexTask.<span class="keyword">doFirst</span> &#123;</div><div class="line">            <span class="comment">//获取 .class 文件集合</span></div><div class="line">            Set&lt;<span class="keyword">File</span>&gt; files = dexTask.getInputs().getFiles().getFiles()</div><div class="line">            <span class="comment">//遍历</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">File</span> <span class="keyword">file</span> : files) &#123;</div><div class="line">                String filePath = <span class="keyword">file</span>.getAbsolutePath()</div><div class="line">                <span class="comment">//依赖的库会以 .jar 包形式传过来，对依赖库也执行插桩</span></div><div class="line">                <span class="keyword">if</span> (filePath.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                    processJar(<span class="keyword">file</span>)</div><div class="line">                <span class="comment">//主要是我们的业务字节码 .class 文件</span></div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filePath.endsWith(<span class="string">".class"</span>)) &#123;</div><div class="line">                    processClass(variant.getDirName(), <span class="keyword">file</span>)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> processClass(String dirName, <span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">    <span class="comment">//获取文件的绝对路径</span></div><div class="line">    String filePath = <span class="keyword">file</span>.getAbsolutePath()</div><div class="line">    <span class="comment">//去掉目录名，保留包名+类名</span></div><div class="line">    String className = filePath.split(dirName)[<span class="number">1</span>].subString(<span class="number">1</span>)</div><div class="line">    <span class="comment">//控制台打印</span></div><div class="line">    <span class="keyword">println</span> className</div><div class="line">    <span class="keyword">if</span> (className.startsWith(<span class="string">"com\\hotfix\\MyApplication"</span>) || isAndroidClass(className))&#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="comment">//执行插桩，插桩之后的 .class 数据用 byte[] 保存</span></div><div class="line">        FileInputStream is = <span class="keyword">new</span> FileInputStream(filePath)</div><div class="line">        <span class="keyword">byte</span>[] byteCode = referHackWhenInit(is)</div><div class="line">        is.close()</div><div class="line">        <span class="comment">//用插桩之后的字节码数据覆盖掉插桩之前的字节码数据</span></div><div class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(filePath)</div><div class="line">        os.<span class="keyword">write</span>(byteCode)</div><div class="line">        os.close()</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//执行插桩的核心代码</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">byte</span>[] referHackWhenInit(InputStream inputStream) <span class="keyword">throws</span> IOException &#123;</div><div class="line">    <span class="comment">//class 文件解析器</span></div><div class="line">    ClassReader cr = <span class="keyword">new</span> ClassReader(inputStream)</div><div class="line">    <span class="comment">//class 文件输出器</span></div><div class="line">    ClassWriter cw = <span class="keyword">new</span> ClassWirter(cr, <span class="number">0</span>)</div><div class="line">    <span class="comment">//class 文件访问者，相当于操作回调</span></div><div class="line">    ClassVisitor cv = <span class="keyword">new</span> ClassVisitor(Opcodes.ASM5, cw) &#123;</div><div class="line">        @Overide</div><div class="line">        <span class="keyword">public</span> MethodVisitor visitMethod(<span class="keyword">int</span> access, <span class="keyword">final</span> String name, String desc,</div><div class="line">                                         String signature, String[] exceptions) &#123;</div><div class="line">            MethodVisitor mv = <span class="keyword">super</span>.visitMethod(access, name, desc, signature, exceptions)</div><div class="line">            mv = <span class="keyword">new</span> MethodVisitor(Opcodes.ASM5, mv) &#123;</div><div class="line">                @Override</div><div class="line">                <span class="keyword">public</span> <span class="keyword">void</span> visitInsn(<span class="keyword">int</span> opcode) &#123;</div><div class="line">                    <span class="comment">//若当前访问的方法是构造方法，则在构造方法 return 之前插入字节码</span></div><div class="line">                    <span class="keyword">if</span> (<span class="string">"&lt;init&gt;"</span>.equals(name) &amp;&amp; opcode == Opcodes.<span class="keyword">RETURN</span>) &#123;</div><div class="line">                        <span class="keyword">super</span>.visitInsn(Type.getType(<span class="string">"LpackageName/AntilazyLoad;"</span>))</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">super</span>.visitInsn(opcode)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> mv</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//解析器启动解析</span></div><div class="line">    cr.accept(cv, <span class="number">0</span>)</div><div class="line">    <span class="keyword">return</span> cw.toByteArray()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="自定义插件实现插桩并生成补丁包"><a href="#自定义插件实现插桩并生成补丁包" class="headerlink" title="自定义插件实现插桩并生成补丁包"></a><strong>自定义插件实现插桩并生成补丁包</strong></h3><p>1、在 project 下新建名为 buildSrc 的 Directory（不是新建 Module）；</p><p>2、build 编译项目后，会在 buildSrc 下生成 .gradle 文件夹和 build 文件夹；</p><p>3、拷贝一个 Module 的 build.gradle 文件放入 buildSrc 文件夹，并引入 gradleApi；<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'java-library'</span></div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    implementation <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line">    <span class="comment">// 引入 gradleApi</span></div><div class="line">    implementation gradleApi()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">sourceCompatibility</span> = <span class="string">"1.7"</span></div><div class="line"><span class="keyword">targetCompatibility</span> = <span class="string">"1.7"</span></div></pre></td></tr></table></figure></p><p>4、在 buildSrc 下新建 src/main/java 目录，用于存放插件的 Java 源代码；接着在该 src/main/java 目录下新建一个 Java 包，比如 com.enjoy.plugin 包；接着创建一个 PatchPlugin 类，PatchPlugin 作为插件类须实现 Plugin<project> 接口，并实现 apply() 方法；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.enjoy.plugin;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.gradle.api.Plugin;</div><div class="line"><span class="keyword">import</span> org.gradle.api.Project;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Oveerride</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(Project project)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!project.getPlugins().hasPlugin(AppPlugin.class)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> GradleException(<span class="string">"无法在非android application插件中使用热修复插件"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//创建一个patch&#123;&#125;配置</span></div><div class="line">        <span class="comment">//就和引入了 apply plugin: 'com.android.application' 一样，可以配置android&#123;&#125;</span></div><div class="line">        project.getExtensions().create(<span class="string">"patch"</span>, PatchExtension.class);</div><div class="line"></div><div class="line">        <span class="comment">//gradle执行会解析build.gradle文件，afterEvaluate表示在解析完成之后再执行我们的代码</span></div><div class="line">        project.afterEvaluate(<span class="keyword">new</span> Action&lt;Project&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">final</span> Project project)</span> </span>&#123;</div><div class="line">                <span class="keyword">final</span> PatchExtension patchExtension =</div><div class="line">                        project.getExtensions().findByType(PatchExtension.class);</div><div class="line">                <span class="comment">//获得用户的配置，在debug模式下是否开启热修复</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">boolean</span> debugOn = patchExtension.debugOn;</div><div class="line">                <span class="comment">//得到android的配置</span></div><div class="line">                AppExtension android = project.getExtensions().getByType(AppExtension.class);</div><div class="line">                <span class="comment">// android项目默认会有 debug和release，</span></div><div class="line">                <span class="comment">// 那么getApplicationVariants就是包含了debug和release的集合，all表示对集合进行遍历</span></div><div class="line">                android.getApplicationVariants().all(<span class="keyword">new</span> Action&lt;ApplicationVariant&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(ApplicationVariant applicationVariant)</span> </span>&#123;</div><div class="line">                        <span class="comment">//当前用户是debug模式，并且没有配置debug运行执行热修复</span></div><div class="line">                        <span class="keyword">if</span> (applicationVariant.getName().contains(<span class="string">"debug"</span>) &amp;&amp; !debugOn) &#123;</div><div class="line">                            <span class="keyword">return</span>;</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//配置热修复插件生成补丁的一系列任务</span></div><div class="line">                        configTasks(project, applicationVariant,</div><div class="line">                                patchExtension);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></project></p><p>5、在 app/build.gradle 中引用插件后，gradle 编译时就会执行插件的 apply() 方法；<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: com.enjoy.patch.plugin.PatchPlugin</div></pre></td></tr></table></figure></p><p>6、暴露一些用户可配置的参数；</p><p>新建 PatchExtension 类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PatchExtension</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> debugOn;</div><div class="line">    String output;</div><div class="line">    String applicationName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PatchExtension</span><span class="params">()</span> </span>&#123;</div><div class="line">        debugOn = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDebugOn</span><span class="params">(<span class="keyword">boolean</span> debugOn)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.debugOn = debugOn;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOutput</span><span class="params">(String output)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.output = output;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationName</span><span class="params">(String applicationName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.applicationName = applicationName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 gradle 中使用。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">patch &#123;</div><div class="line">    debugOn <span class="keyword">true</span></div><div class="line">    applicationName <span class="string">'com.enjoy.qzonefix.MyApplication'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>PatchPlugin 设置 JavaBean 为 PatchExtension，并使用传递进来的参数。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">project.getExtensions().create(<span class="string">"patch"</span>, PatchExtension.class);</div><div class="line"></div><div class="line"><span class="keyword">final</span> PatchExtension patchExtension = project.getExtensions().findByType(PatchExtension.class);</div></pre></td></tr></table></figure></p><p>7、保存 mapping 文件，给以后补丁包用；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获得android的混淆任务</span></div><div class="line"><span class="keyword">final</span> Task proguardTask =</div><div class="line">        project.getTasks().findByName(<span class="string">"transformClassesAndResourcesWithProguardFor"</span> + capitalizeName);</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 备份本次的mapping文件</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">final</span> File mappingBak = <span class="keyword">new</span> File(outputDir, <span class="string">"mapping.txt"</span>);</div><div class="line"><span class="comment">//如果没开启混淆，则为null，不需要备份mapping</span></div><div class="line"><span class="keyword">if</span> (proguardTask != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// dolast：在这个任务之后再干一些事情</span></div><div class="line">    <span class="comment">// 在混淆后备份mapping</span></div><div class="line">    proguardTask.doLast(<span class="keyword">new</span> Action&lt;Task&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Task task)</span> </span>&#123;</div><div class="line">            <span class="comment">//混淆任务输出的所有文件</span></div><div class="line">            TaskOutputs outputs = proguardTask.getOutputs();</div><div class="line">            Set&lt;File&gt; files = outputs.getFiles().getFiles();</div><div class="line">            <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">                <span class="comment">//把mapping文件备份</span></div><div class="line">                <span class="keyword">if</span> (file.getName().endsWith(<span class="string">"mapping.txt"</span>)) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        FileUtils.copyFile(file, mappingBak);</div><div class="line">                        project.getLogger().error(<span class="string">"备份混淆mapping文件:"</span> + mappingBak.getCanonicalPath());</div><div class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//将上次混淆的mapping应用到本次,如果没有上次的混淆文件就没操作</span></div><div class="line"><span class="keyword">if</span> (mappingBak.exists() &amp;&amp; proguardTask != <span class="keyword">null</span>) &#123;</div><div class="line">    TransformTask task = (TransformTask) proguardTask;</div><div class="line">    ProGuardTransform transform = (ProGuardTransform) task.getTransform();</div><div class="line">    transform.applyTestedMapping(mappingBak);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>8、记录 MD5，并生成补丁包。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 在混淆后 记录类的hash值，并生成补丁包</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">final</span> File hexFile = <span class="keyword">new</span> File(outputDir, <span class="string">"hex.txt"</span>);</div><div class="line"></div><div class="line"><span class="comment">// 需要打包补丁的类的jar包</span></div><div class="line"><span class="keyword">final</span> File patchClassFile = <span class="keyword">new</span> File(outputDir, <span class="string">"patchClass.jar"</span>);</div><div class="line"><span class="comment">// 用dx打包后的jar包</span></div><div class="line"><span class="keyword">final</span> File patchFile = <span class="keyword">new</span> File(outputDir, <span class="string">"patch.jar"</span>);</div><div class="line"></div><div class="line"><span class="comment">//打包dex任务</span></div><div class="line"><span class="keyword">final</span> Task dexTask =</div><div class="line">        project.getTasks().findByName(<span class="string">"transformClassesWithDexBuilderFor"</span> + capitalizeName);</div><div class="line"></div><div class="line"><span class="comment">//dofirst：在任务之前干一些事情</span></div><div class="line"><span class="comment">// 在把class打包dex之前，插桩并记录每个class的md5 hash值</span></div><div class="line">dexTask.doFirst(<span class="keyword">new</span> Action&lt;Task&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Task task)</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         *  插桩 记录md5并对比</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        PatchGenerator patchGenerator = <span class="keyword">new</span> PatchGenerator(project, patchFile,</div><div class="line">                patchClassFile, hexFile);</div><div class="line">        <span class="comment">//用户配置的application，实际上可以解析manifest自动获取，但是java实现太麻烦了，干脆让用户自己配置</span></div><div class="line">        String applicationName = patchExtension.applicationName;</div><div class="line">        <span class="comment">//windows下 目录输出是  xx\xx\  ,linux下是  /xx/xx ,把 . 替换成平台相关的斜杠</span></div><div class="line">        applicationName = applicationName.replaceAll(<span class="string">"\\."</span>,</div><div class="line">                Matcher.quoteReplacement(File.separator));</div><div class="line">        <span class="comment">//记录类的md5</span></div><div class="line">        Map&lt;String, String&gt; newHexs = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        <span class="comment">//任务的输入，dex打包任务要输入什么？ 自然是所有的class与jar包了！</span></div><div class="line">        Set&lt;File&gt; files = dexTask.getInputs().getFiles().getFiles();</div><div class="line">        <span class="keyword">for</span> (File file : files) &#123;</div><div class="line">            String filePath = file.getAbsolutePath();</div><div class="line">            <span class="keyword">if</span> (filePath.endsWith(<span class="string">".jar"</span>)) &#123;</div><div class="line">                processJar(applicationName, file, newHexs, patchGenerator);</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filePath.endsWith(<span class="string">".class"</span>)) &#123;</div><div class="line">                processClass(applicationName, variant.getDirName(), file, newHexs,</div><div class="line">                        patchGenerator);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="comment">//类的md5集合 写入到文件</span></div><div class="line">        Utils.writeHex(newHexs, hexFile);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//生成补丁</span></div><div class="line">            patchGenerator.generate();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * /xxxxx/app/build/intermediates/classes/debug/com/enjoy/qzonefix/MainActivity.class</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> hexs</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processClass</span><span class="params">(String applicationName, String dirName, File file,</span></span></div><div class="line"><span class="function"><span class="params">                         Map&lt;String, String&gt; hexs,</span></span></div><div class="line"><span class="function"><span class="params">                         PatchGenerator patchGenerator)</span> </span>&#123;</div><div class="line"></div><div class="line">    String filePath = file.getAbsolutePath();</div><div class="line">    <span class="comment">//注意这里的filePath包含了目录+包名+类名，所以去掉目录</span></div><div class="line">    String className = filePath.split(dirName)[<span class="number">1</span>].substring(<span class="number">1</span>);</div><div class="line">    <span class="comment">//application或者android support我们不管</span></div><div class="line">    <span class="keyword">if</span> (className.startsWith(applicationName) || Utils.isAndroidClass(className)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        FileInputStream is = <span class="keyword">new</span> FileInputStream(filePath);</div><div class="line">        <span class="comment">//执行插桩</span></div><div class="line">        <span class="keyword">byte</span>[] byteCode = ClassUtils.referHackWhenInit(is);</div><div class="line">        String hex = Utils.hex(byteCode);</div><div class="line">        is.close();</div><div class="line"></div><div class="line">        FileOutputStream os = <span class="keyword">new</span> FileOutputStream(filePath);</div><div class="line">        os.write(byteCode);</div><div class="line">        os.close();</div><div class="line"></div><div class="line">        hexs.put(className, hex);</div><div class="line">        <span class="comment">//对比缓存的md5，不一致则放入补丁</span></div><div class="line">        patchGenerator.checkClass(className, hex, byteCode);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">processJar</span><span class="params">(String applicationName, File file, Map&lt;String, String&gt; hexs,</span></span></div><div class="line"><span class="function"><span class="params">                       PatchGenerator patchGenerator)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//  无论是windows还是linux jar包都是 /</span></div><div class="line">        applicationName = applicationName.replaceAll(Matcher.quoteReplacement(File.separator),</div><div class="line">                <span class="string">"/"</span>);</div><div class="line">        File bakJar = <span class="keyword">new</span> File(file.getParent(), file.getName() + <span class="string">".bak"</span>);</div><div class="line">        JarOutputStream jarOutputStream = <span class="keyword">new</span> JarOutputStream(<span class="keyword">new</span> FileOutputStream(bakJar));</div><div class="line"></div><div class="line">        JarFile jarFile = <span class="keyword">new</span> JarFile(file);</div><div class="line">        Enumeration&lt;JarEntry&gt; entries = jarFile.entries();</div><div class="line">        <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</div><div class="line">            JarEntry jarEntry = entries.nextElement();</div><div class="line"></div><div class="line">            jarOutputStream.putNextEntry(<span class="keyword">new</span> JarEntry(jarEntry.getName()));</div><div class="line">            InputStream is = jarFile.getInputStream(jarEntry);</div><div class="line"></div><div class="line">            String className = jarEntry.getName();</div><div class="line">            <span class="keyword">if</span> (className.endsWith(<span class="string">".class"</span>) &amp;&amp; !className.startsWith(applicationName)</div><div class="line">                    &amp;&amp; !Utils.isAndroidClass(className) &amp;&amp; !className.startsWith(<span class="string">"com/enjoy"</span> +</div><div class="line">                    <span class="string">"/patch"</span>)) &#123;</div><div class="line">                <span class="keyword">byte</span>[] byteCode = ClassUtils.referHackWhenInit(is);</div><div class="line">                String hex = Utils.hex(byteCode);</div><div class="line">                is.close();</div><div class="line">                hexs.put(className, hex);</div><div class="line">                <span class="comment">//对比缓存的md5，不一致则放入补丁</span></div><div class="line">                patchGenerator.checkClass(className, hex, byteCode);</div><div class="line">                jarOutputStream.write(byteCode);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//输出到临时文件</span></div><div class="line">                jarOutputStream.write(IOUtils.toByteArray(is));</div><div class="line">            &#125;</div><div class="line">            jarOutputStream.closeEntry();</div><div class="line">        &#125;</div><div class="line">        jarOutputStream.close();</div><div class="line">        jarFile.close();</div><div class="line">        file.delete();</div><div class="line">        bakJar.renameTo(file);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="ART-虚拟机在-Android-7-0-时因优化安装速度导致的无法插桩"><a href="#ART-虚拟机在-Android-7-0-时因优化安装速度导致的无法插桩" class="headerlink" title="ART 虚拟机在 Android 7.0 时因优化安装速度导致的无法插桩"></a><strong>ART 虚拟机在 Android 7.0 时因优化安装速度导致的无法插桩</strong></h2><p>应用在安装时不做编译，而是运行时解释字节码，同时在 JIT 编译了一些热点代码后将这些代码信息记录至 Profile 文件，等到设备空闲的时候使用 AOT（All-Of-the-Time compilation：全时段编译）编译生成称为 app_image 的 base.art（类对象映像）文件，这个 art 文件会在 app 启动时自动加载（相当于缓存）。根据类加载原理，类被加载后无法被替换，即无法修复。</p><p>解决办法：<br>1、因为 app_image 中的 class 会插入到 PathClassloader，所以不使用 PathClassloader，而是自定义 Classloader，并通过反射修改引用 PathClassloader 的地方为自定义的 Classloader；</p><p>2、参考 app_image 生成方式，生成修复后的 app_image。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zh
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>插件化</title>
    <link href="http://www.weichao.io/2020/04/09/%E6%8F%92%E4%BB%B6%E5%8C%96/"/>
    <id>http://www.weichao.io/2020/04/09/插件化/</id>
    <published>2020-04-09T10:00:52.000Z</published>
    <updated>2020-04-09T10:17:59.346Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ClassLoader-加载-dex-文件"><a href="#ClassLoader-加载-dex-文件" class="headerlink" title="ClassLoader 加载 dex 文件"></a><strong>ClassLoader 加载 dex 文件</strong></h1><h2 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a><strong>继承关系</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004091.png" alt=""></p><blockquote><p>BootClassLoader：<br>加载 Android Framework 层的 class 文件。</p><p>PathClassLoader：<br>加载 dex 文件，包括 jar、zip、apk 中的 dex 文件。</p><p>DexClassLoader：<br>加载 dex 文件，包括 jar、zip、apk 中的 dex 文件。</p></blockquote><h2 id="ClassLoader-加载-Class-的流程"><a href="#ClassLoader-加载-Class-的流程" class="headerlink" title="ClassLoader 加载 Class 的流程"></a><strong>ClassLoader 加载 Class 的流程</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004092.png" alt=""></p><blockquote><p>双亲委托机制：<br>首先检测这个类是否已经被加载了，如果已经加载了，直接获取并返回。如果没有被加载，当 parent 不为 null 时，调用 parent 的 loadClass() 进行加载；当 parent 为 null 时，调用 findClass() 方法，依次递归，如果找到了或者加载了就返回，如果既没找到也加载不了，才自己去加载。</p></blockquote><p>BootClassLoader#findClass() 是直接调用了 Class.classForName() 方法；<br>DexClassLoader#findClass() 是加载传入的 APK 文件中的所有 dexFile 到 dexElements 数组，然后再调用 Element#findClass() 查找 dexFile 中是否包含指定的 class。</p><hr><h1 id="执行插件中的方法"><a href="#执行插件中的方法" class="headerlink" title="执行插件中的方法"></a><strong>执行插件中的方法</strong></h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004093.png" alt=""></p><p>1、创建插件的 DexClassLoader 类加载器，然后通过反射获取插件的 dexElements 值；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">DexClassLoader</div><div class="line">----dexElements[]</div></pre></td></tr></table></figure></p><p>2、获取宿主的 PathClassLoader 类加载器，然后通过反射获取宿主的 dexElements 值；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BaseDexClassLoader</div><div class="line">----pathList</div><div class="line">--------dexElements[]</div></pre></td></tr></table></figure></p><p>3、合并宿主的 dexElements 与插件的 dexElements，生成新的 Element[]；<br>4、最后通过反射将新的 Element[] 赋值给宿主的 dexElements。</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a><strong>核心代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">loadPluginDex</span><span class="params">(String apkPath)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">// 1.获取 pathList 的字段</span></div><div class="line">        Class baseDexClassLoader = Class.forName(<span class="string">"dalvik.system.BaseDexClassLoader"</span>);</div><div class="line">        Field pathListField = baseDexClassLoader.getDeclaredField(<span class="string">"pathList"</span>);</div><div class="line">        pathListField.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 2.获取 DexClassLoader 类中的属性 pathList 的值</span></div><div class="line">        DexClassLoader dexClassLoader = <span class="keyword">new</span> DexClassLoader(apkPath, getCacheDir().getAbsolutePath(), <span class="keyword">null</span>, getClassLoader());</div><div class="line">        Object pluginPathList = pathListField.get(dexClassLoader);</div><div class="line"></div><div class="line">        <span class="comment">// 3.获取 pathList 中的属性 dexElements[] 的值--- 插件的 dexElements[]</span></div><div class="line">        Class pluginPathListClass = pluginPathList.getClass();</div><div class="line">        Field pluginDexElementsField = pluginPathListClass.getDeclaredField(<span class="string">"dexElements"</span>);</div><div class="line">        pluginDexElementsField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object[] pluginDexElements = (Object[]) pluginDexElementsField.get(pluginPathList);</div><div class="line"></div><div class="line">        <span class="comment">// 4.获取 PathClassLoader 类中的属性 pathList 的值</span></div><div class="line">        PathClassLoader pathClassLoader = (PathClassLoader) getClassLoader();</div><div class="line">        Object hostPathList = pathListField.get(pathClassLoader);</div><div class="line"></div><div class="line">        <span class="comment">// 5.获取 pathList 中的属性 dexElements[] 的值--- 宿主的 dexElements[]</span></div><div class="line">        Class hostPathListClass = hostPathList.getClass();</div><div class="line">        Field hostDexElementsField = hostPathListClass.getDeclaredField(<span class="string">"dexElements"</span>);</div><div class="line">        hostDexElementsField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        Object[] hostDexElements = (Object[]) hostDexElementsField.get(hostPathList);</div><div class="line"></div><div class="line">        <span class="comment">// 6.创建一个新的空数组，第一个参数是数组的类型，第二个参数是数组的长度</span></div><div class="line">        Object[] dexElements = (Object[]) Array.newInstance(hostDexElements.getClass().getComponentType(), pluginDexElements.length + hostDexElements.length);</div><div class="line"></div><div class="line">        <span class="comment">// 7.将插件和宿主的 dexElements[] 的值放入新的数组中</span></div><div class="line">        System.arraycopy(pluginDexElements, <span class="number">0</span>, dexElements, <span class="number">0</span>, pluginDexElements.length);</div><div class="line">        System.arraycopy(hostDexElements, <span class="number">0</span>, dexElements, pluginDexElements.length, hostDexElements.length);</div><div class="line"></div><div class="line">        hostDexElementsField.set(hostPathList, dexElements);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">loadPluginMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Class&lt;?&gt; threadClazz = Class.forName(<span class="string">"io.weichao.plugin.util.PluginUtil"</span>);</div><div class="line">        Method method = threadClazz.getMethod(<span class="string">"getMessage"</span>);</div><div class="line">        <span class="keyword">return</span> (String) method.invoke(<span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="启动插件中的-Activity"><a href="#启动插件中的-Activity" class="headerlink" title="启动插件中的 Activity"></a><strong>启动插件中的 Activity</strong></h1><h2 id="关键难点——无法通过-AMS-检测"><a href="#关键难点——无法通过-AMS-检测" class="headerlink" title="关键难点——无法通过 AMS 检测"></a><strong>关键难点——无法通过 AMS 检测</strong></h2><p>插件的 Activity 没有在宿主的清单文件中注册。</p><h3 id="启动-Activity-流程"><a href="#启动-Activity-流程" class="headerlink" title="启动 Activity 流程"></a><strong>启动 Activity 流程</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004094.png" alt=""></p><h2 id="绕过-AMS-检测——hook"><a href="#绕过-AMS-检测——hook" class="headerlink" title="绕过 AMS 检测——hook"></a><strong>绕过 AMS 检测——hook</strong></h2><blockquote><p>hook：<br>劫持，改变代码的正常执行流程。</p></blockquote><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004095.png" alt=""></p><p>1、在宿主中创建一个 ProxyActivity 继承自 Activity，并且在 manifest 中注册；<br>2、当启动插件的 Activity 时，在 AMS 检测前，找到一个 hook 点，然后通过 hook 将启动插件 Activity 的 Intent 替换成启动 ProxyActivity 的 Intent；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// API 26、28</span></div><div class="line">Activity#startActivity()</div><div class="line">----startActivityForResult()</div><div class="line">Instrumentation#execStartActivity()</div><div class="line">----ActivityManager.getService().startActivity(..., intent, ...) <span class="comment">// ActivityManager.getService() 是 AMS 检测前的最后的 hook 机会，ActivityManager.getService() 的返回值是 IActivityManager，所以需要对 IActivityManager 进行动态代理，hook IActivityManager#startActivity()</span></div><div class="line"></div><div class="line"><span class="comment">// 1. IActivityManager 可使用 IActivityManagerSingleton 获取</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IActivityManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> IActivityManagerSingleton.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. IActivityManagerSingleton 在 ActivityManager 中是 static，反射时容易获取</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</div><div class="line">        <span class="keyword">final</span> IActivityManager am = IActivityManager.Stub.asInterface(b);</div><div class="line">        <span class="keyword">return</span> am;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 3. IActivityManager 在 Singleton 中以变量 mInstance 存在</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> T mInstance;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">create</span><span class="params">()</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                mInstance = create();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> mInstance;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 总结：反射获取 ActivityManager 中的 IActivityManagerSingleton，再获取 IActivityManagerSingleton 中的 mInstance，这个 mInstance 本质是 IActivityManager，对其进行动态代理</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// API 23、24、25</span></div><div class="line">Activity#startActivity()</div><div class="line">----startActivityForResult()</div><div class="line">Instrumentation#execStartActivity()</div><div class="line">----ActivityManagerNative.getDefault().startActivity(..., intent, ...) <span class="comment">// API 23 不同点，ActivityManagerNative.getDefault() 返回值是 IActivityManager，所以还是动态代理 IActivityManager，但是获取 IActivityManager 的方法不一样</span></div><div class="line"></div><div class="line"><span class="comment">// 1. IActivityManager 可使用 gDefault 获取：</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">public</span> IActivityManager <span class="title">getDefault</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> gDefault.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. gDefault 在 ActivityManagerNative 中是 static，反射时容易获取</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityManager&gt; gDefault = <span class="keyword">new</span> Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> IActivityManager <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">        IBinder b = ServiceManager.getService(<span class="string">"activity"</span>);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service binder = "</span> + b);</div><div class="line">        &#125;</div><div class="line">        IActivityManager am = asInterface(b);</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Log.v(<span class="string">"ActivityManager"</span>, <span class="string">"default service = "</span> + am);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> am;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 3. IActivityManager 在 Singleton 中以变量 mInstance 存在，和前面一样</span></div><div class="line"></div><div class="line"><span class="comment">// 总结：反射获取 ActivityManagerNative 中的 gDefault，再获取 gDefault 中的 mInstance，这个 mInstance 本质是 IActivityManager，对其进行动态代理</span></div></pre></td></tr></table></figure></p><p>3、在 AMS 检测完后，找到一个 hook 点，然后通过 hook 将启动 ProxyActivity 的 Intent 替换成启动插件 Activity 的 Intent；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// API 26 及以前</span></div><div class="line">ActivityStackSupervisor#realStartActivityLocked()</div><div class="line">ActivityThread#scheduleLaunchActivity(intent, ...)</div><div class="line">----sendMessage(H.LAUNCH_ACTIVITY, r) <span class="comment">// r 含 Intent</span></div><div class="line">Handler#dispatchMessage(msg) // msg.obj = r</div><div class="line">----callback(msg)</div><div class="line">Callback</div><div class="line">----mCallback <span class="comment">// 劫持 mCallback，修改 Intent</span></div><div class="line"></div><div class="line"><span class="comment">// 1. Handler 在 ActivityThread 中以 mH 存在，所以需要先拿到 ActivityThread</span></div><div class="line"><span class="keyword">final</span> H mH = <span class="keyword">new</span> H();</div><div class="line"></div><div class="line"><span class="comment">// 2. ActivityThread 中存在 sCurrentActivityThread，且是 static，反射时容易获取</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> ActivityThread sCurrentActivityThread;</div><div class="line"></div><div class="line"><span class="comment">// 3. 拿到 mH 以后，给 mH 设置新的 Callback，重写其 handleMessage()，将 msg.obj 中的 Intent 改为插件的 Intent</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// API 28</span></div><div class="line">ActivityStackSupervisor#realStartActivityLocked()</div><div class="line">clientTransaction.addCallback(LaunchActivityItem.obtain(<span class="keyword">new</span> Intent(r.intent), ...) <span class="comment">// API 28 不同点</span></div><div class="line">ClientTransaction</div><div class="line">----List&lt;ClientTransactionItem&gt; <span class="comment">// 包含 Intent</span></div><div class="line">mService.getLifecycleManager().scheduleTransaction(clientTransaction)</div><div class="line">ActivityThread#scheduleLaunchActivity(clientTransaction)</div><div class="line">----sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, clientTransaction) <span class="comment">// API 28 不同点</span></div><div class="line">Handler#dispatchMessage(msg) // msg.obj = clientTransaction</div><div class="line">----callback(msg)</div><div class="line">Callback</div><div class="line">----mCallback <span class="comment">// 劫持 mCallback，修改 Intent</span></div><div class="line"></div><div class="line"><span class="comment">// 1. 和上面一样，Handler 在 ActivityThread 中以 mH 存在，所以需要先拿到 ActivityThread</span></div><div class="line"></div><div class="line"><span class="comment">// 2. 和上面一样，ActivityThread 中存在 sCurrentActivityThread，且是 static，反射时容易获取</span></div><div class="line"></div><div class="line"><span class="comment">// 3. 拿到 mH 以后，给 mH 设置新的 Callback，重写其 handleMessage()，这里 msg.what 变了，同时 msg.obj 变了，不是 r 了，而是 clientTransaction，通过反射获取 clientTransaction 中的 mActivityCallbacks，修改 Intent</span></div></pre></td></tr></table></figure></p><p>4、启动插件的 Activity。</p><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a><strong>核心代码</strong></h2><h3 id="将启动插件-Activity-的-Intent-替换成启动-ProxyActivity-的-Intent"><a href="#将启动插件-Activity-的-Intent-替换成启动-ProxyActivity-的-Intent" class="headerlink" title="将启动插件 Activity 的 Intent 替换成启动 ProxyActivity 的 Intent"></a><strong>将启动插件 Activity 的 Intent 替换成启动 ProxyActivity 的 Intent</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 获取 Singleton&lt;T&gt; 类的对象</span></div><div class="line">    Object singleton = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</div><div class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"android.app.ActivityManager"</span>);</div><div class="line">        Field singletonField = clazz.getDeclaredField(<span class="string">"IActivityManagerSingleton"</span>);</div><div class="line">        singletonField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        singleton = singletonField.get(<span class="keyword">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">"android.app.ActivityManagerNative"</span>);</div><div class="line">        Field singletonField = clazz.getDeclaredField(<span class="string">"gDefault"</span>);</div><div class="line">        singletonField.setAccessible(<span class="keyword">true</span>);</div><div class="line">        singleton = singletonField.get(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 获取 mInstance 对象</span></div><div class="line">    Class&lt;?&gt; singletonClass = Class.forName(<span class="string">"android.util.Singleton"</span>);</div><div class="line">    Field mInstanceField = singletonClass.getDeclaredField(<span class="string">"mInstance"</span>);</div><div class="line">    mInstanceField.setAccessible(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">final</span> Object mInstance = mInstanceField.get(singleton);</div><div class="line"></div><div class="line">    <span class="comment">// 创建 IActivityManager 的代理对象</span></div><div class="line">    Class&lt;?&gt; iActivityManagerClass = Class.forName(<span class="string">"android.app.IActivityManager"</span>);</div><div class="line">    Object proxyInstance = Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</div><div class="line">            <span class="keyword">new</span> Class[]&#123;iActivityManagerClass&#125;, <span class="keyword">new</span> InvocationHandler() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">                    <span class="comment">/**</span></div><div class="line"><span class="comment">                     * int result = ActivityManager.getService()</span></div><div class="line"><span class="comment">                     *                 .startActivity(whoThread, who.getBasePackageName(), intent,</span></div><div class="line"><span class="comment">                     *                         intent.resolveTypeIfNeeded(who.getContentResolver()),</span></div><div class="line"><span class="comment">                     *                         token, target != null ? target.mEmbeddedID : null,</span></div><div class="line"><span class="comment">                     *                         requestCode, 0, null, options);</span></div><div class="line"><span class="comment">                     */</span></div><div class="line">                    <span class="comment">// 当执行的方法是 startActivity 时作处理</span></div><div class="line">                    <span class="keyword">if</span> (<span class="string">"startActivity"</span>.equals(method.getName())) &#123;</div><div class="line">                        <span class="keyword">int</span> index = <span class="number">0</span>;</div><div class="line"></div><div class="line">                        <span class="comment">// 获取插件的 intent</span></div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</div><div class="line">                            <span class="keyword">if</span> (args[i] <span class="keyword">instanceof</span> Intent) &#123;</div><div class="line">                                index = i;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        Intent intent = (Intent) args[index];</div><div class="line"></div><div class="line">                        <span class="comment">// 创建代理的 intent</span></div><div class="line">                        Intent proxyIntent = <span class="keyword">new</span> Intent();</div><div class="line">                        proxyIntent.setClassName(<span class="string">"io.weichao.plugin_demo"</span>, ProxyActivity.class.getName());</div><div class="line">                        <span class="comment">// 保存插件的 intent 到代理的 intent 中</span></div><div class="line">                        proxyIntent.putExtra(TARGET_INTENT, intent);</div><div class="line"></div><div class="line">                        <span class="comment">// 将插件的 intent 替换为代理的 intent</span></div><div class="line">                        args[index] = proxyIntent;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// IActivityManager 对象 --- 通过反射</span></div><div class="line">                    <span class="keyword">return</span> method.invoke(mInstance, args);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 使用代理对象替换原有的 mInstance 对象</span></div><div class="line">    mInstanceField.set(singleton, proxyInstance);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    Log.e(<span class="string">"aaaaa"</span>, <span class="string">"aaaaa"</span> + e.getMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="将启动-ProxyActivity-的-Intent-替换成启动插件-Activity-的-Intent"><a href="#将启动-ProxyActivity-的-Intent-替换成启动插件-Activity-的-Intent" class="headerlink" title="将启动 ProxyActivity 的 Intent 替换成启动插件 Activity 的 Intent"></a><strong>将启动 ProxyActivity 的 Intent 替换成启动插件 Activity 的 Intent</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 获取 ActivityThread 对象</span></div><div class="line">    Class&lt;?&gt; clazz = Class.forName(<span class="string">"android.app.ActivityThread"</span>);</div><div class="line">    Field sCurrentActivityThreadField = clazz.getDeclaredField(<span class="string">"sCurrentActivityThread"</span>);</div><div class="line">    sCurrentActivityThreadField.setAccessible(<span class="keyword">true</span>);</div><div class="line">    Object activityThread = sCurrentActivityThreadField.get(<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 获取 Handler 对象</span></div><div class="line">    Field mHField = clazz.getDeclaredField(<span class="string">"mH"</span>);</div><div class="line">    mHField.setAccessible(<span class="keyword">true</span>);</div><div class="line">    Object mH = mHField.get(activityThread);</div><div class="line"></div><div class="line">    <span class="comment">// 创建一个 Callback 替换系统的 Callback 对象</span></div><div class="line">    Class&lt;?&gt; handlerClass = Class.forName(<span class="string">"android.os.Handler"</span>);</div><div class="line">    Field mCallbackField = handlerClass.getDeclaredField(<span class="string">"mCallback"</span>);</div><div class="line">    mCallbackField.setAccessible(<span class="keyword">true</span>);</div><div class="line">    mCallbackField.set(mH, <span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(@NonNull Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">100</span>:</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">// 获取保存在代理的 intent 中的插件的 intent</span></div><div class="line">                        Field intentField = msg.obj.getClass().getDeclaredField(<span class="string">"intent"</span>);</div><div class="line">                        intentField.setAccessible(<span class="keyword">true</span>);</div><div class="line">                        Intent proxyIntent = (Intent) intentField.get(msg.obj);</div><div class="line">                        Intent intent = proxyIntent.getParcelableExtra(TARGET_INTENT);</div><div class="line">                        <span class="comment">// 判断调用的是否是插件的，如果不是插件的，intent 就会为空</span></div><div class="line">                        <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">                            intentField.set(msg.obj, intent);</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                        Log.e(<span class="string">"aaaaa"</span>, <span class="string">"aaaaa"</span> + e.getMessage());</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">159</span>:</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Class&lt;?&gt; clazz = Class.forName(<span class="string">"android.app.servertransaction.ClientTransaction"</span>);</div><div class="line">                        Field mActivityCallbacksField = clazz.getDeclaredField(<span class="string">"mActivityCallbacks"</span>);</div><div class="line">                        mActivityCallbacksField.setAccessible(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">                        List activityCallbacks = (List) mActivityCallbacksField.get(msg.obj);</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; activityCallbacks.size(); i++) &#123;</div><div class="line">                            <span class="keyword">if</span> (activityCallbacks.get(i).getClass().getName() .equals(<span class="string">"android.app.servertransaction.LaunchActivityItem"</span>)) &#123;</div><div class="line">                                Object launchActivityItem = activityCallbacks.get(i);</div><div class="line">                                Field mIntentField = launchActivityItem.getClass().getDeclaredField(<span class="string">"mIntent"</span>);</div><div class="line">                                mIntentField.setAccessible(<span class="keyword">true</span>);</div><div class="line">                                Intent proxyIntent = (Intent) mIntentField.get(launchActivityItem);</div><div class="line">                                <span class="comment">// 判断调用的是否是插件的，如果不是插件的，intent 就会为空</span></div><div class="line">                                Intent intent = proxyIntent.getParcelableExtra(TARGET_INTENT);</div><div class="line">                                <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">                                    mIntentField.set(launchActivityItem, intent);</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                        Log.e(<span class="string">"aaaaa"</span>, <span class="string">"aaaaa"</span> + e.getMessage());</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    Log.e(<span class="string">"aaaaa"</span>, <span class="string">"aaaaa"</span> + e.getMessage());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="启动插件的-Activity"><a href="#启动插件的-Activity" class="headerlink" title="启动插件的 Activity"></a><strong>启动插件的 Activity</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setComponent(<span class="keyword">new</span> ComponentName(<span class="string">"io.weichao.plugin"</span>, <span class="string">"io.weichao.plugin.activity.MainActivity"</span>));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure><hr><h1 id="让插件中的-Activity-加载插件中的资源"><a href="#让插件中的-Activity-加载插件中的资源" class="headerlink" title="让插件中的 Activity 加载插件中的资源"></a><strong>让插件中的 Activity 加载插件中的资源</strong></h1><h2 id="前期铺垫"><a href="#前期铺垫" class="headerlink" title="前期铺垫"></a><strong>前期铺垫</strong></h2><p>1、加载 res 中的资源是通过 Resources，但是最后也是调用 AssetManager，只是会先通过 id 查找。AssetManager 可以加载未编译过的资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">getResources().getString(R.string.app_name);</div><div class="line"></div><div class="line"><span class="comment">// Resources</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getString</span><span class="params">(@StringRes <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</div><div class="line">    <span class="keyword">return</span> getText(id).toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@NonNull</span> <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getText</span><span class="params">(@StringRes <span class="keyword">int</span> id)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</div><div class="line">    CharSequence res = mResourcesImpl.getAssets().getResourceText(id);</div><div class="line">    <span class="keyword">if</span> (res != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"String resource ID #0x"</span></div><div class="line">            + Integer.toHexString(id));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2、启动 Activity 时会调用 ActivityThread#performLaunchActivity()，此时建立了 Resources、AssetManager 和 Context 的绑定关系，并且指定了资源目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ActivityThread</span></div><div class="line"><span class="function"><span class="keyword">private</span> Activity <span class="title">performLaunchActivity</span><span class="params">(ActivityClientRecord r, Intent customIntent)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ContextImpl appContext = createBaseContextForActivity(r);</div><div class="line">    ...</div><div class="line">    activity.attach(appContext, ...);</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> activity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> ContextImpl <span class="title">createBaseContextForActivity</span><span class="params">(ActivityClientRecord r)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ContextImpl appContext = ContextImpl.createActivityContext(</div><div class="line">            <span class="keyword">this</span>, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> appContext;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ContextImpl</span></div><div class="line"><span class="function"><span class="keyword">static</span> ContextImpl <span class="title">createActivityContext</span><span class="params">(ActivityThread mainThread,</span></span></div><div class="line"><span class="function"><span class="params">        LoadedApk packageInfo, ActivityInfo activityInfo, IBinder activityToken, <span class="keyword">int</span> displayId,</span></span></div><div class="line"><span class="function"><span class="params">        Configuration overrideConfiguration)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ContextImpl context = <span class="keyword">new</span> ContextImpl(<span class="keyword">null</span>, mainThread, packageInfo, activityInfo.splitName, activityToken, <span class="keyword">null</span>, <span class="number">0</span>, classLoader);</div><div class="line">    ...</div><div class="line">    <span class="comment">// Context 绑定 Resources</span></div><div class="line">    <span class="keyword">final</span> ResourcesManager resourcesManager = ResourcesManager.getInstance();</div><div class="line">    context.setResources(resourcesManager.createBaseActivityResources(activityToken,</div><div class="line">            packageInfo.getResDir(),</div><div class="line">            splitDirs,</div><div class="line">            packageInfo.getOverlayDirs(),</div><div class="line">            packageInfo.getApplicationInfo().sharedLibraryFiles,</div><div class="line">            displayId,</div><div class="line">            overrideConfiguration,</div><div class="line">            compatInfo,</div><div class="line">            classLoader));</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> context;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ResourcesManager</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Resources <span class="title">createBaseActivityResources</span><span class="params">(@NonNull IBinder activityToken,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable String resDir,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable String[] splitResDirs,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable String[] overlayDirs,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable String[] libDirs,</span></span></div><div class="line"><span class="function"><span class="params">        <span class="keyword">int</span> displayId,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable Configuration overrideConfig,</span></span></div><div class="line"><span class="function"><span class="params">        @NonNull CompatibilityInfo compatInfo,</span></span></div><div class="line"><span class="function"><span class="params">        @Nullable ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> getOrCreateResources(activityToken, key, classLoader);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="function">Resources <span class="title">getOrCreateResources</span><span class="params">(@Nullable IBinder activityToken,</span></span></div><div class="line"><span class="function"><span class="params">        @NonNull ResourcesKey key, @NonNull ClassLoader classLoader)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ResourcesImpl resourcesImpl = createResourcesImpl(key);</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="meta">@Nullable</span> <span class="function">ResourcesImpl <span class="title">createResourcesImpl</span><span class="params">(@NonNull ResourcesKey key)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">final</span> AssetManager assets = createAssetManager(key);</div><div class="line">    ...</div><div class="line">    <span class="comment">// Resources 绑定 AssetManager</span></div><div class="line">    <span class="keyword">final</span> ResourcesImpl impl = <span class="keyword">new</span> ResourcesImpl(assets, dm, config, daj);</div><div class="line">    ...</div><div class="line">    <span class="keyword">return</span> impl;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">protected</span> <span class="meta">@Nullable</span> <span class="function">AssetManager <span class="title">createAssetManager</span><span class="params">(@NonNull <span class="keyword">final</span> ResourcesKey key)</span> </span>&#123;</div><div class="line">    AssetManager assets = <span class="keyword">new</span> AssetManager();</div><div class="line">    <span class="keyword">if</span> (key.mResDir != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// 调用 AssetManager#addAssetPath() 添加资源目录</span></div><div class="line">        <span class="keyword">if</span> (assets.addAssetPath(key.mResDir) == <span class="number">0</span>) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"failed to add asset path "</span> + key.mResDir);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a><strong>原理</strong></h2><ol><li>创建 AssetManager，反射 addAssetPath 方法设置插件的资源目录；</li><li>创建 Resources，绑定该 AssetManager；</li><li>在 Application 中重写 getResources()，使用该 Resources；</li><li>在插件的 Activity 中重写 getResources()，使用 Application 中的 Resources。</li></ol><h2 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a><strong>核心代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// LoadUtil.java</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Resources <span class="title">loadResource</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        AssetManager assetManager = AssetManager.class.newInstance();</div><div class="line">        Method addAssetPathMethod = assetManager.getClass().getDeclaredMethod(<span class="string">"addAssetPath"</span>, String.class);</div><div class="line">        addAssetPathMethod.setAccessible(<span class="keyword">true</span>);</div><div class="line">        <span class="comment">// 参数就是插件的资源路径</span></div><div class="line">        addAssetPathMethod.invoke(assetManager, apkPath);</div><div class="line">        Resources resources = context.getResources();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Resources(assetManager, resources.getDisplayMetrics(), resources.getConfiguration());</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Resources resources;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        resources = LoadUtil.loadResource(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> resources == <span class="keyword">null</span> ? <span class="keyword">super</span>.getResources() : resources;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Resources <span class="title">getResources</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getApplication() != <span class="keyword">null</span> &amp;&amp; getApplication().getResources() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> getApplication().getResources();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getResources();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="当宿主的-Activity-和插件的-Activity-都继承于-AppCompatActivity-时会报错"><a href="#当宿主的-Activity-和插件的-Activity-都继承于-AppCompatActivity-时会报错" class="headerlink" title="当宿主的 Activity 和插件的 Activity 都继承于 AppCompatActivity 时会报错"></a><strong>当宿主的 Activity 和插件的 Activity 都继承于 AppCompatActivity 时会报错</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">java.lang.RuntimeException: Unable to start activity ComponentInfo&#123;io.weichao.plugin/io.weichao.plugin.activity.MainActivity&#125;: java.lang.NullPointerException: Attempt to invoke interface method &apos;void androidx.appcompat.widget.DecorContentParent.setWindowCallback(android.view.Window$Callback)&apos; on a null object reference</div><div class="line">        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2913)</div><div class="line">        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3048)</div><div class="line">        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)</div><div class="line">        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)</div><div class="line">        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)</div><div class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1808)</div><div class="line">        at android.os.Handler.dispatchMessage(Handler.java:106)</div><div class="line">        at android.os.Looper.loop(Looper.java:193)</div><div class="line">        at android.app.ActivityThread.main(ActivityThread.java:6669)</div><div class="line">        at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)</div><div class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</div><div class="line">     Caused by: java.lang.NullPointerException: Attempt to invoke interface method &apos;void androidx.appcompat.widget.DecorContentParent.setWindowCallback(android.view.Window$Callback)&apos; on a null object reference</div><div class="line">        at androidx.appcompat.app.AppCompatDelegateImpl.createSubDecor(AppCompatDelegateImpl.java:753)</div><div class="line">        at androidx.appcompat.app.AppCompatDelegateImpl.ensureSubDecor(AppCompatDelegateImpl.java:659)</div><div class="line">        at androidx.appcompat.app.AppCompatDelegateImpl.setContentView(AppCompatDelegateImpl.java:552)</div><div class="line">        at androidx.appcompat.app.AppCompatActivity.setContentView(AppCompatActivity.java:161)</div><div class="line">        at io.weichao.plugin.activity.MainActivity.onCreate(MainActivity.java:15)</div><div class="line">        at android.app.Activity.performCreate(Activity.java:7136)</div><div class="line">        at android.app.Activity.performCreate(Activity.java:7127)</div><div class="line">        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1271)</div><div class="line">        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2893)</div><div class="line">        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3048) </div><div class="line">        at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78) </div><div class="line">        at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108) </div><div class="line">        at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68) </div><div class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1808) </div><div class="line">        at android.os.Handler.dispatchMessage(Handler.java:106) </div><div class="line">        at android.os.Looper.loop(Looper.java:193) </div><div class="line">        at android.app.ActivityThread.main(ActivityThread.java:6669) </div><div class="line">        at java.lang.reflect.Method.invoke(Native Method) </div><div class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493) </div><div class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</div></pre></td></tr></table></figure><h3 id="报错的原因"><a href="#报错的原因" class="headerlink" title="报错的原因"></a><strong>报错的原因</strong></h3><p>当宿主和插件都使用 AppCompatActivity 时，由于编译时会将资源建立映射关系，在宿主和插件中分别建立了 1 次映射关系，且这 2 次映射关系基本上不会相同。在宿主中 key1 -&gt; value1，在插件中 key2 -&gt; value2。<br>但是 AppCompatDelegateImpl 类只会在宿主中被加载一次，也就是宿主和插件都使用 key1 查找资源。</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004096.png" alt=""></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004097.png" alt=""></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%8F%92%E4%BB%B6%E5%8C%96202004098.png" alt=""></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a><strong>解决办法</strong></h3><p>让插件使用自己的 Resource。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        Resources resource = LoadUtil.getResource(getApplication());</div><div class="line">        mContext = <span class="keyword">new</span> ContextThemeWrapper(getBaseContext(), <span class="number">0</span>);</div><div class="line">        Class&lt;? extends Context&gt; clazz = mContext.getClass();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Field mResourcesField = clazz.getDeclaredField(<span class="string">"mResources"</span>);</div><div class="line">            mResourcesField.setAccessible(<span class="keyword">true</span>);</div><div class="line">            mResourcesField.set(mContext, resource);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.activity_main, <span class="keyword">null</span>);</div><div class="line">        setContentView(view);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ClassLoader-加载-dex-文件&quot;&gt;&lt;a href=&quot;#ClassLoader-加载-dex-文件&quot; class=&quot;headerlink&quot; title=&quot;ClassLoader 加载 dex 文件&quot;&gt;&lt;/a&gt;&lt;strong&gt;ClassLoader 加载 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《剑指 Offer》算法题（20/68）</title>
    <link href="http://www.weichao.io/2020/03/23/%E3%80%8A%E5%89%91%E6%8C%87-Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%8820-68%EF%BC%89/"/>
    <id>http://www.weichao.io/2020/03/23/《剑指-Offer》算法题（20-68）/</id>
    <published>2020-03-23T09:40:49.000Z</published>
    <updated>2020-03-23T09:48:56.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a><strong>旋转数组的最小数字</strong></h1><blockquote><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个递增排序的数组的一个旋转，输出旋转数组的最小元素。例如数组 {3, 4, 5, 1, 2} 为 {1, 2, 3, 4, 5} 的一个旋转，该数组的最小值为 1。</p></blockquote><p>思路：<br>输入数组可以看成是两个递增数组的连接，其中第 2 个数组中的每一个值都不大于第 1 个数组中的任意一个值，且最小值是第 2 个数组的第 1 个值。<br>对于递增数组查询最小值，可以使用二分法查找。二分法涉及 3 个值，分别记为 a、b、c，分情况讨论——<br>（0）a &gt; b &gt; c，不存在；<br>（1）a &lt; b &lt; c，此时 a、b、c 都在后面数组，最小值是 a；<br>（2）a &lt; b = c，此时 a、b、c 都在后面数组，最小值是 a；<br>（3）a = b &lt; c，此时 a、b、c 都在后面数组，最小值是 a；<br>（4）a &lt; b，b &gt; c，此时 a、b 在前面数组，c 在后面数组，最小值在 b、c 之间，如果 b 是 c 的前一个元素，则最小值是 c；<br>（5）a = b，b &gt; c，此时 a、b 在前面数组，c 在后面数组，最小值在 b、c 之间，如果 b 是 c 的前一个元素，则最小值是 c；<br>（6）a &gt; b，b &lt; c，此时 a 在前面数组，b、c 在后面数组，最小值在 a、b 之间，如果 a 是 b 的前一个元素，则最小值是 b；<br>（7）a &gt; b，b = c，此时 a 在前面数组，b、c 在后面数组，最小值在 a、b 之间，如果 a 是 b 的前一个元素，则最小值是 b；<br>（8）a = b = c，如果 a、b、c 是连续的 3 个数，则最小值是 a；否则无法确定最小值所在区间，只能既查找 a、b 区间，也查找 b、c 区间，一旦在其中某个区间发现更小的值，就能够缩小查找范围。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%882068%EF%BC%891.png" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (end &gt; start) &#123;</div><div class="line">        <span class="keyword">int</span> middle = ((end - start) &gt;&gt; <span class="number">1</span>) + start;</div><div class="line"></div><div class="line">        <span class="comment">// 合并（1）（2）（3）</span></div><div class="line">        <span class="keyword">if</span> ((arr[start] &lt; arr[middle] &amp;&amp; arr[middle] &lt;= arr[end])</div><div class="line">                || (arr[start] == arr[middle] &amp;&amp; arr[middle] &lt; arr[end])) &#123;</div><div class="line">            <span class="keyword">return</span> arr[start];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 合并（4）（5）</span></div><div class="line">        <span class="keyword">if</span> (arr[start] &lt;= arr[middle] &amp;&amp; arr[middle] &gt; arr[end]) &#123;</div><div class="line">            <span class="keyword">if</span> (end - middle == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> arr[end];</div><div class="line">            &#125;</div><div class="line">            start = middle + <span class="number">1</span>;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 合并（6）（7）</span></div><div class="line">        <span class="keyword">if</span> ((arr[start] &gt; arr[middle] &amp;&amp; arr[middle] &lt;= arr[end])) &#123;</div><div class="line">            <span class="keyword">if</span> (middle - start == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> arr[middle];</div><div class="line">            &#125;</div><div class="line">            end = middle;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// （8）</span></div><div class="line">        <span class="keyword">if</span> (arr[middle] == arr[end] || arr[middle] == arr[start]) &#123;</div><div class="line">            <span class="keyword">if</span> (middle - start == <span class="number">1</span> &amp;&amp; end - middle == <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> arr[start];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">int</span>[] range = findRange(arr, start, end);</div><div class="line">            <span class="keyword">if</span> (range[<span class="number">0</span>] == range[<span class="number">1</span>]) &#123;</div><div class="line">                <span class="keyword">return</span> arr[range[<span class="number">0</span>]];</div><div class="line">            &#125;</div><div class="line">            start = range[<span class="number">0</span>];</div><div class="line">            end = range[<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] findRange(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</div><div class="line">    <span class="keyword">int</span>[] popArr = &#123;start, end&#125;;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">        <span class="keyword">int</span>[] pushArr = <span class="keyword">new</span> <span class="keyword">int</span>[(popArr.length &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>];</div><div class="line">        pushArr[<span class="number">0</span>] = popArr[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, size = popArr.length; i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">            Result result = getResult(arr, popArr[i], popArr[i + <span class="number">1</span>]);</div><div class="line">            <span class="keyword">if</span> (result.isFound()) &#123;</div><div class="line">                <span class="keyword">return</span> result.getRange();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 已经逐个查找了，还是没找到，说明数组从 start 到 end 的值都一样</span></div><div class="line">                <span class="keyword">if</span> (popArr.length &gt; end - start) &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start, start&#125;;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">int</span> middle = result.getMiddle();</div><div class="line">                pushArr[++j] = middle;</div><div class="line">                pushArr[++j] = popArr[i + <span class="number">1</span>];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        popArr = pushArr;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Result <span class="title">getResult</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> middle = ((end - start) &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">    <span class="keyword">if</span> (arr[middle] &lt; arr[start]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;start, end&#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(middle);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> found;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] range;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> middle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">int</span>[] range)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.found = <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">this</span>.range = range;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">int</span> middle)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.found = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">this</span>.middle = middle;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFound</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> found;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getRange() &#123;</div><div class="line">        <span class="keyword">return</span> range;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> middle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">50</span>)];</div><div class="line"><span class="keyword">int</span> divideIndex = <span class="keyword">new</span> Random().nextInt(arr.length);</div><div class="line"><span class="keyword">int</span> dividerTemp = arr.length &gt;&gt; <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; divideIndex; i++) &#123; <span class="comment">// 初始化第 1 个数组</span></div><div class="line">    temp += <span class="keyword">new</span> Random().nextInt(<span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (temp &lt; dividerTemp) &#123;</div><div class="line">        temp = dividerTemp;</div><div class="line">    &#125;</div><div class="line">    arr[i] = temp;</div><div class="line">&#125;</div><div class="line">temp = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = divideIndex, size = arr.length; i &lt; size; i++) &#123; <span class="comment">// 初始化第 2 个数组</span></div><div class="line">    temp += <span class="keyword">new</span> Random().nextInt(<span class="number">2</span>);</div><div class="line">    <span class="keyword">if</span> (temp &gt; dividerTemp) &#123;</div><div class="line">        temp = dividerTemp;</div><div class="line">    &#125;</div><div class="line">    arr[i] = temp;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"arr:"</span> + Arrays.toString(arr));</div><div class="line"></div><div class="line"><span class="keyword">int</span> min = find(arr);</div><div class="line">System.out.println(<span class="string">"min:"</span> + min);</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：</p><hr><h1 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a><strong>矩阵中的路径</strong></h1><blockquote><p>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一格开始，每一步可以在矩阵中向左、右、上、下移动一格。如果一条路径经过了矩阵的某一格，那么该路径不能再次进入该格子。</p></blockquote><p>思路：<br>回溯法。<br>遍历矩阵，如果矩阵中的某个值和字符串中的第一个值相同，则进入下一级，判断该值在周围四个方向的值和字符串中的下一个值是否相等，如果相等，则继续进入下一级，直到字符串中的值全部找完；否则，回到上一级。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span>[] targetArr)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span>[] flagArr = <span class="keyword">new</span> <span class="keyword">boolean</span>[arr.length];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (find(arr, flagArr, rows, i, cols, j, targetArr, <span class="number">0</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">boolean</span>[] flagArr, <span class="keyword">int</span> rows, <span class="keyword">int</span> rowIndex, <span class="keyword">int</span> cols, <span class="keyword">int</span> colIndex, <span class="keyword">char</span>[] targetArr, <span class="keyword">int</span> targetIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span> || rowIndex &gt; rows - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (colIndex &lt; <span class="number">0</span> || colIndex &gt; cols - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> index = rowIndex * cols + colIndex;</div><div class="line">    <span class="keyword">if</span> (flagArr[index] || arr[index] != targetArr[targetIndex]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (targetIndex == targetArr.length - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flagArr[index] = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (find(arr, flagArr, rows, rowIndex, cols, colIndex + <span class="number">1</span>, targetArr, targetIndex + <span class="number">1</span>)</div><div class="line">            || find(arr, flagArr, rows, rowIndex, cols, colIndex - <span class="number">1</span>, targetArr, targetIndex + <span class="number">1</span>)</div><div class="line">            || find(arr, flagArr, rows, rowIndex + <span class="number">1</span>, cols, colIndex, targetArr, targetIndex + <span class="number">1</span>)</div><div class="line">            || find(arr, flagArr, rows, rowIndex - <span class="number">1</span>, cols, colIndex, targetArr, targetIndex + <span class="number">1</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flagArr[index] = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span>[] arr = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'t'</span>, <span class="string">'g'</span>, <span class="string">'c'</span>, <span class="string">'f'</span>, <span class="string">'c'</span>, <span class="string">'s'</span>, <span class="string">'j'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'h'</span>&#125;;</div><div class="line"><span class="keyword">boolean</span> b = contains(arr, <span class="number">3</span>, <span class="number">4</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'b'</span>, <span class="string">'f'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>&#125;);</div><div class="line">System.out.println(<span class="string">"contains:"</span> + b);</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。<br>空间复杂度：O(n)。</p><h2 id="扩展：打印两个字符间的一条最短路径"><a href="#扩展：打印两个字符间的一条最短路径" class="headerlink" title="扩展：打印两个字符间的一条最短路径"></a><strong>扩展：打印两个字符间的一条最短路径</strong></h2><p>思路：<br>记录水平和竖直方向相对于起点位置的位移。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">findPath</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">char</span> start, <span class="keyword">char</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span>[] flagArr = <span class="keyword">new</span> <span class="keyword">boolean</span>[arr.length];</div><div class="line">    Integer[] stepArr = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i * cols + j] != start) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (findPath(arr, flagArr, rows, i, <span class="number">0</span>, cols, j, <span class="number">0</span>, end, stepArr)) &#123;</div><div class="line">                StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="number">1</span> + Math.abs(stepArr[<span class="number">0</span>]) + Math.abs(stepArr[<span class="number">1</span>]));</div><div class="line">                builder.append(start);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (stepArr[<span class="number">0</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, size = stepArr[<span class="number">0</span>]; k &lt;= size; k++) &#123;</div><div class="line">                        builder.append(arr[(i + k) * cols + j]);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = -<span class="number">1</span>, size = stepArr[<span class="number">0</span>]; k &gt;= size; k--) &#123;</div><div class="line">                        builder.append(arr[(i + k) * cols + j]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (stepArr[<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, size = stepArr[<span class="number">1</span>]; k &lt;= size; k++) &#123;</div><div class="line">                        builder.append(arr[(i + stepArr[<span class="number">0</span>]) * cols + j + k]);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = -<span class="number">1</span>, size = stepArr[<span class="number">1</span>]; k &gt;= size; k--) &#123;</div><div class="line">                        builder.append(arr[(i + stepArr[<span class="number">0</span>]) * cols + j + k]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">return</span> builder.toString();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findPath</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">boolean</span>[] flagArr, <span class="keyword">int</span> rows, <span class="keyword">int</span> rowIndex, <span class="keyword">int</span> rowOffset, <span class="keyword">int</span> cols, <span class="keyword">int</span> colIndex, <span class="keyword">int</span> colOffset, <span class="keyword">char</span> end, Integer[] stepArr)</span> </span>&#123;</div><div class="line">    rowIndex += rowOffset;</div><div class="line">    colIndex += colOffset;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span> || rowIndex &gt; rows - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (colIndex &lt; <span class="number">0</span> || colIndex &gt; cols - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> index = rowIndex * cols + colIndex;</div><div class="line">    <span class="keyword">if</span> (flagArr[index]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (arr[index] == end) &#123;</div><div class="line">        stepArr[<span class="number">0</span>] += rowOffset;</div><div class="line">        stepArr[<span class="number">1</span>] += colOffset;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flagArr[index] = <span class="keyword">true</span>;</div><div class="line">    stepArr[<span class="number">0</span>] += rowOffset;</div><div class="line">    stepArr[<span class="number">1</span>] += colOffset;</div><div class="line">    <span class="keyword">if</span> (findPath(arr, flagArr, rows, rowIndex, <span class="number">0</span>, cols, colIndex, <span class="number">1</span>, end, stepArr)</div><div class="line">            || findPath(arr, flagArr, rows, rowIndex, <span class="number">1</span>, cols, colIndex, <span class="number">0</span>, end, stepArr)</div><div class="line">            || findPath(arr, flagArr, rows, rowIndex, <span class="number">0</span>, cols, colIndex, -<span class="number">1</span>, end, stepArr)</div><div class="line">            || findPath(arr, flagArr, rows, rowIndex, -<span class="number">1</span>, cols, colIndex, <span class="number">0</span>, end, stepArr)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flagArr[index] = <span class="keyword">false</span>;</div><div class="line">    stepArr[<span class="number">0</span>] -= rowOffset;</div><div class="line">    stepArr[<span class="number">1</span>] -= colOffset;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> size = <span class="number">25</span>;</div><div class="line">LinkedHashSet&lt;Character&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;((<span class="keyword">int</span>) (size * <span class="number">1.34</span>));</div><div class="line"><span class="keyword">while</span> (set.size() &lt; size) &#123;</div><div class="line">    set.add((<span class="keyword">char</span>) (<span class="string">'A'</span> + <span class="keyword">new</span> Random().nextInt(size)));</div><div class="line">&#125;</div><div class="line"></div><div class="line">Iterator&lt;Character&gt; iterator = set.iterator();</div><div class="line"><span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[size];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">    arr[i] = iterator.next();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</div><div class="line">        builder.append(arr[i * <span class="number">5</span> + j])</div><div class="line">                .append(<span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">    System.out.println(builder.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">char</span> start = arr[<span class="keyword">new</span> Random().nextInt(size)];</div><div class="line"><span class="keyword">char</span> end = arr[<span class="keyword">new</span> Random().nextInt(size)];</div><div class="line">String path = findPath(arr, <span class="number">5</span>, <span class="number">5</span>, start, end);</div><div class="line">System.out.println(start + <span class="string">"-&gt;"</span> + end + <span class="string">":"</span> + path);</div></pre></td></tr></table></figure><hr><h1 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a><strong>机器人的运动范围</strong></h1><blockquote><p>地上有一个 m 行 n 列的方格。一个机器人从坐标 (0, 0) 的格子开始移动，它每次可以向左、右、上、下移动一格，但不能进入行坐标和列坐标的数位之和大于 k 的格子。例如，当 k 为 18 时，机器人能够进入方格 (35, 37)，因为 3 + 5 + 3 + 7 = 18。但它不能进入方格 (35, 38)，因为 3 + 5 + 3 + 8 = 19。请问该机器人能够达到多少个格子？</p></blockquote><p>思路：<br>回溯法。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> rows, <span class="keyword">int</span> cols, <span class="keyword">int</span> threshold)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span>[][] flagArr = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows][cols];</div><div class="line">    <span class="keyword">return</span> count(flagArr, rows, <span class="number">0</span>, cols, <span class="number">0</span>, threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">boolean</span>[][] flagArr, <span class="keyword">int</span> rows, <span class="keyword">int</span> rowIndex, <span class="keyword">int</span> cols, <span class="keyword">int</span> colIndex, <span class="keyword">int</span> threshold)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (rowIndex &lt; <span class="number">0</span> || rowIndex &gt; rows - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (colIndex &lt; <span class="number">0</span> || colIndex &gt; cols - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (flagArr[rowIndex][colIndex]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!canEnter(rowIndex, colIndex, threshold)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    flagArr[rowIndex][colIndex] = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + count(flagArr, rows, rowIndex, cols, colIndex + <span class="number">1</span>, threshold)</div><div class="line">            + count(flagArr, rows, rowIndex + <span class="number">1</span>, cols, colIndex, threshold)</div><div class="line">            + count(flagArr, rows, rowIndex, cols, colIndex - <span class="number">1</span>, threshold)</div><div class="line">            + count(flagArr, rows, rowIndex - <span class="number">1</span>, cols, colIndex, threshold);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">canEnter</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> threshold)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (row &gt; <span class="number">0</span>) &#123;</div><div class="line">        sum += row % <span class="number">10</span>;</div><div class="line">        row /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span> (col &gt; <span class="number">0</span>) &#123;</div><div class="line">        sum += col % <span class="number">10</span>;</div><div class="line">        col /= <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> !(sum &gt; threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> m = <span class="number">10</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line"><span class="keyword">int</span> n = <span class="number">10</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line"><span class="keyword">int</span> k = <span class="keyword">new</span> Random().nextInt(m + n);</div><div class="line"><span class="keyword">int</span> count = count(m, n, k);</div><div class="line">System.out.println(<span class="string">"m="</span> + m + <span class="string">"; n="</span> + n + <span class="string">"; k="</span> + k + <span class="string">"; count="</span> + count);</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：</p><hr><h1 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a><strong>剪绳子</strong></h1><blockquote><p>给你一根长度为 n 的绳子，请把绳子剪成 m 段（m、n 都是整数，n &gt; 1 并且 m &gt; 1），每段绳子的长度记为 k[0]，k[1]，…，k[m]。请问 k[0] x k[1] x … x k[m] 可能的最大乘积是多少？例如，当绳子的长度是 8 时，我们把它剪成长度分别为 2、3、3 的三段，此时得到的最大乘积是 18。</p></blockquote><p>思路：<br>（1）动态规划法。<br>任何一根长度为 n 的绳子都可以分为两根长度之和为 n 的绳子，如果其中一根绳子长度为 x，则另一根绳子长度为 n - x。这样，问题就转变为了求两个绳子的问题了，这两根绳子可以再继续一分为二，直至绳子长度为 1，因为 1 分成两个小于 1 的数后，再相乘时值更小。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"arg must over 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 长度 2、3 的绳子不能单独存在，必须至少分出一个 1，然后再计算乘积</span></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">long</span>[] maxArr = <span class="keyword">new</span> <span class="keyword">long</span>[n + <span class="number">1</span>];</div><div class="line">    <span class="comment">// 长度 1、2、3 的绳子作为两段绳子中的一段存在</span></div><div class="line">    maxArr[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    maxArr[<span class="number">2</span>] = <span class="number">2</span>;</div><div class="line">    maxArr[<span class="number">3</span>] = <span class="number">3</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">long</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, length = i &gt;&gt; <span class="number">1</span>; j &lt;= length; j++) &#123;</div><div class="line">            <span class="keyword">long</span> temp = maxArr[j] * maxArr[i - j];</div><div class="line">            <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"too big!!!"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (temp &gt; max) &#123;</div><div class="line">                max = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        maxArr[i] = max;</div><div class="line">    &#125;</div><div class="line">    System.out.println(Arrays.toString(maxArr));</div><div class="line">    <span class="keyword">return</span> maxArr[n];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</div><div class="line">System.out.println(<span class="string">"n="</span> + n + <span class="string">"; max:"</span> + max(n));</div></pre></td></tr></table></figure><p>时间复杂度：O(n^2)。<br>空间复杂度：O(n)。</p><h2 id="扩展：打印剪绳子的具体方案"><a href="#扩展：打印剪绳子的具体方案" class="headerlink" title="扩展：打印剪绳子的具体方案"></a><strong>扩展：打印剪绳子的具体方案</strong></h2><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"arg must over 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 长度 2、3 的绳子不能单独存在，必须至少分出一个 1，然后再计算乘积</span></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node[] maxArr = <span class="keyword">new</span> Node[n + <span class="number">1</span>];</div><div class="line">    <span class="comment">// 长度 1、2、3 的绳子作为两段绳子中的一段存在</span></div><div class="line">    maxArr[<span class="number">1</span>] = <span class="keyword">new</span> Node(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"1"</span>);</div><div class="line">    maxArr[<span class="number">2</span>] = <span class="keyword">new</span> Node(<span class="number">2</span>, <span class="number">2</span>, <span class="string">"2"</span>);</div><div class="line">    maxArr[<span class="number">3</span>] = <span class="keyword">new</span> Node(<span class="number">3</span>, <span class="number">3</span>, <span class="string">"3"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &lt;= n; i++) &#123;</div><div class="line">        <span class="keyword">long</span> max = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, length = i &gt;&gt; <span class="number">1</span>; j &lt;= length; j++) &#123;</div><div class="line">            <span class="keyword">long</span> temp = maxArr[j].getValue() * maxArr[i - j].getValue();</div><div class="line">            <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"too big!!!"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (temp &gt; max) &#123;</div><div class="line">                max = temp;</div><div class="line">                maxArr[i] = <span class="keyword">new</span> Node(i, max, maxArr[j].getNote() + <span class="string">" * "</span> + maxArr[i - j].getNote());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    System.out.println(Arrays.toString(maxArr));</div><div class="line">    <span class="keyword">return</span> maxArr[n].getValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> value;</div><div class="line">    <span class="keyword">private</span> String note;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">long</span> value, String note)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.n = n;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.note = note;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> note;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"["</span> + n + <span class="string">"]="</span> + value + <span class="string">": "</span> + note + <span class="string">"\n"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</div><div class="line">System.out.println(<span class="string">"n="</span> + n + <span class="string">"; max:"</span> + max(n));</div></pre></td></tr></table></figure><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%882068%EF%BC%892.png" alt=""></p><p>（2）贪婪算法。<br>根据剪绳子的具体方案可以发现，长度为 n 的绳子，剪成的 m 段绳子，基本是由长度为 2、3 的绳子组成的，比较<code>3 * (n - 3)</code>和<code>2 * (n - 2)</code>，当<code>n &gt;= 5</code>时，<code>3 * (n - 3) &gt;= 2 * (n - 2)</code>，所以当长度大于或等于 5 时，应优先剪 3；否则，剪 2。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"arg must over 1"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 长度 2、3 的绳子不能单独存在，必须至少分出一个 1，然后再计算乘积</span></div><div class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> count = (n &gt;&gt; <span class="number">1</span>) - (n &gt;&gt; <span class="number">2</span>);</div><div class="line">    <span class="keyword">int</span> r = n % <span class="number">3</span>;</div><div class="line">    <span class="keyword">if</span> (r == <span class="number">2</span>) &#123; <span class="comment">// 处理 5</span></div><div class="line">        <span class="keyword">long</span> sum = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            sum += (sum &lt;&lt; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum &lt;&lt; <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (r == <span class="number">1</span>) &#123; <span class="comment">// 处理 4</span></div><div class="line">        <span class="keyword">long</span> sum = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count - <span class="number">1</span>; i++) &#123;</div><div class="line">            sum += (sum &lt;&lt; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum &lt;&lt; <span class="number">2</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 处理 0</span></div><div class="line">        <span class="keyword">long</span> sum = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">            sum += (sum &lt;&lt; <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>);</div><div class="line">System.out.println(<span class="string">"n="</span> + n + <span class="string">"; max:"</span> + max(n));</div></pre></td></tr></table></figure><p>时间复杂度：O(1)。<br>空间复杂度：O(1)。</p><hr><h1 id="二进制中-1-的个数"><a href="#二进制中-1-的个数" class="headerlink" title="二进制中 1 的个数"></a><strong>二进制中 1 的个数</strong></h1><blockquote><p>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p></blockquote><p>思路：<br>n &amp; (n - 1)。<br>（1）当 n 的最右位是 1，n - 1 只是将最右位的 1 变为 0；<br>（2）当 n 的最右位是 0，n - 1 会先前找 1，找到后将该位置的 1 变为 0，该位置后面全部变为 1，然后变为了（1）；<br>所以当 n != 0 时，n &amp; (n - 1) 的操作会将最右边的 1 变为 0。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</div><div class="line">        count++;</div><div class="line">        n = n &amp; (n - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Random().nextInt();</div><div class="line">System.out.println(n + <span class="string">"="</span> + Integer.toBinaryString(n) + <span class="string">"b:"</span> + count(n));</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。<br>空间复杂度：O(1)。</p><h2 id="相关题目：用一条语句判断一个整数是不是-2-的整数次方"><a href="#相关题目：用一条语句判断一个整数是不是-2-的整数次方" class="headerlink" title="相关题目：用一条语句判断一个整数是不是 2 的整数次方"></a><strong>相关题目：用一条语句判断一个整数是不是 2 的整数次方</strong></h2><p>思路：<br>一个整数如果是 2 的整数次方，那么它的二进制表示中有且只有一位是 1，而其他所有位都是 0。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPow2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (n &amp; (n - <span class="number">1</span>)) == <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="相关题目：计算两个数的二进制的不同位的个数"><a href="#相关题目：计算两个数的二进制的不同位的个数" class="headerlink" title="相关题目：计算两个数的二进制的不同位的个数"></a><strong>相关题目：计算两个数的二进制的不同位的个数</strong></h2><blockquote><p>输入两个整数 m 和 n，计算需要改变 m 的二进制表示中的多少位才能得到 n。比如 10 的二进制表示为 1010，13 的二进制表示为 1101，需要改变 1010 中的 3 位才能得到 1101。</p></blockquote><p>思路：<br>求两个数的异或，统计异或结果中 1 的位数。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = m ^ n;</div><div class="line">    System.out.println(m + <span class="string">"^"</span> + n + <span class="string">"="</span> + Integer.toBinaryString(i) + <span class="string">"b"</span>);</div><div class="line">    <span class="keyword">return</span> count(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (n != <span class="number">0</span>) &#123;</div><div class="line">        count++;</div><div class="line">        n = n &amp; (n - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> m = <span class="keyword">new</span> Random().nextInt();</div><div class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Random().nextInt();</div><div class="line">System.out.println(m + <span class="string">"="</span> + Integer.toBinaryString(m) + <span class="string">"b"</span>);</div><div class="line">System.out.println(n + <span class="string">"="</span> + Integer.toBinaryString(n) + <span class="string">"b"</span>);</div><div class="line">System.out.println(<span class="string">"count:"</span> + count(m, n));</div></pre></td></tr></table></figure><hr><h1 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a><strong>数值的整数次方</strong></h1><blockquote><p>实现函数 double Power(double base, int exponent)，求 base 的 exponent 次方。不得使用库函数，同时不需要考虑大数问题。已知公式：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%882068%EF%BC%893.png" alt=""></p></blockquote><p>思路：<br>（1）当 base == 0 时，函数返回 0；<br>（2）当 exponent == 0 时，函数返回 1；<br>（3）当 exponent &lt; 0 时，base = 1 / base，exponent = -exponent；<br>（4）利用提供的公式计算。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (base == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (exponent == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (exponent &lt; <span class="number">0</span>) &#123;</div><div class="line">        base = <span class="number">1</span> / base;</div><div class="line">        exponent = -exponent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cal(base, exponent);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">int</span> exponent)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (exponent == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">double</span> result;</div><div class="line">    <span class="keyword">if</span> ((exponent &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;<span class="comment">// n 为偶数</span></div><div class="line">        exponent = exponent &gt;&gt; <span class="number">1</span>;</div><div class="line">        result = cal(base, exponent);</div><div class="line">        result *= result;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// n 为奇数</span></div><div class="line">        exponent = (exponent - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</div><div class="line">        result = cal(base, exponent);</div><div class="line">        result *= result;</div><div class="line">        result *= base;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> base = <span class="keyword">new</span> Random().nextInt();</div><div class="line"><span class="keyword">if</span> (base &gt; <span class="number">8</span>) &#123;</div><div class="line">    base &amp;= <span class="number">7</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (base &lt; -<span class="number">8</span>) &#123;</div><div class="line">    base &amp;= <span class="number">7</span>;</div><div class="line">    base = -base;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> exponent = <span class="keyword">new</span> Random().nextInt();</div><div class="line"><span class="keyword">if</span> (exponent &gt; <span class="number">8</span>) &#123;</div><div class="line">    exponent &amp;= <span class="number">7</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (exponent &lt; -<span class="number">8</span>) &#123;</div><div class="line">    exponent &amp;= <span class="number">7</span>;</div><div class="line">    exponent = -exponent;</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"base="</span> + base);</div><div class="line">System.out.println(<span class="string">"exponent="</span> + exponent);</div><div class="line">System.out.println(<span class="string">"Power:"</span> + Power(base, exponent));</div></pre></td></tr></table></figure><p>时间复杂度：O(logn)。<br>空间复杂度：O(logn)。</p><hr><h1 id="打印从-1-到最大的-n-位数"><a href="#打印从-1-到最大的-n-位数" class="headerlink" title="打印从 1 到最大的 n 位数"></a><strong>打印从 1 到最大的 n 位数</strong></h1><blockquote><p>输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。</p></blockquote><p>思路：<br>考虑大数问题，不能直接打印。<br>（1）输入数字 &lt;= 0 时，不打印；<br>（2）输入数字 &gt; 0 时，递归调用位数少 1 位的方法，直到调用到位数为 1 的方法后开始打印。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    print(<span class="string">""</span>, count);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String pre, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (count != <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (pre.length() &gt; <span class="number">0</span>) &#123; <span class="comment">// 针对于 3 位数及以上</span></div><div class="line">            print(pre + <span class="string">"0"</span>, count - <span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 针对于 2 位数</span></div><div class="line">            print(pre, count - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">            print(pre + i, count - <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</div><div class="line">            System.out.println(pre + i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> n = <span class="keyword">new</span> Random().nextInt();</div><div class="line">System.out.println(<span class="string">"print("</span> + n + <span class="string">"):\n"</span>);</div><div class="line">print(n);</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：O(n)。</p><h2 id="扩展：实现任意两个整数的加（减）法"><a href="#扩展：实现任意两个整数的加（减）法" class="headerlink" title="扩展：实现任意两个整数的加（减）法"></a><strong>扩展：实现任意两个整数的加（减）法</strong></h2><p>思路：<br>（1）两个正整数相加时，结果的位数最多比这两个数中最大值的位数多 1 位。按照小学加法，以递归方式依次从最低位开始加，是否有进位也需要带到下一次计算中；<br>（2）两个正整数相减时，需要先确定两个数中哪个更大，确保让大数减小数。结果的位数最多为这两个数中最大值的位数，计算以递归方式依次从最低位开始减，低位向高位借 1 时直接在高位减 1；<br>（2）当两个值中有负整数时，通过截取字符串变为正整数，同时转变为等价的运算。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sub</span><span class="params">(String value1, String value2)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> value1IsNeg = <span class="string">'-'</span> == value1.charAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">boolean</span> value2IsNeg = <span class="string">'-'</span> == value2.charAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (value1IsNeg &amp;&amp; value2IsNeg) &#123;</div><div class="line">        <span class="keyword">return</span> sub(value2.substring(<span class="number">1</span>), value1.substring(<span class="number">1</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!value1IsNeg &amp;&amp; value2IsNeg) &#123;</div><div class="line">        <span class="keyword">return</span> add(value1, value2.substring(<span class="number">1</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1IsNeg) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"-"</span> + add(value1.substring(<span class="number">1</span>), value2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> value1IsLarger = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">if</span> (value2.length() &gt; value1.length()) &#123;</div><div class="line">        value1IsLarger = <span class="keyword">false</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value2.length() == value1.length()) &#123;</div><div class="line">        <span class="keyword">if</span> (Integer.parseInt(String.valueOf(value2.charAt(<span class="number">0</span>))) &gt; Integer.parseInt(String.valueOf(value1.charAt(<span class="number">0</span>)))) &#123;</div><div class="line">            value1IsLarger = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Integer[] arr1 = convertArray2(value1);</div><div class="line">    Integer[] arr2 = convertArray2(value2);</div><div class="line">    Integer[] arr = <span class="keyword">new</span> Integer[Math.max(arr1.length, arr2.length)];</div><div class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(arr.length);</div><div class="line">    <span class="keyword">if</span> (value1IsLarger) &#123;</div><div class="line">        sub(arr1, arr2, arr, <span class="number">0</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        sub(arr2, arr1, arr, <span class="number">0</span>);</div><div class="line">        builder.append(<span class="string">"-"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        Integer integer = arr[i];</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; integer == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        builder.append(integer);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> builder.toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sub</span><span class="params">(Integer[] arr1, Integer[] arr2, Integer[] arr, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (lastIndex == arr.length) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr1Index = arr1.length - <span class="number">1</span> - lastIndex;</div><div class="line">    <span class="keyword">int</span> arr2Index = arr2.length - <span class="number">1</span> - lastIndex;</div><div class="line">    <span class="comment">// arr1 和 arr2 位数相同，且都算到了最高位的前一位</span></div><div class="line">    <span class="keyword">if</span> (arr1Index &lt; <span class="number">0</span> &amp;&amp; arr2Index &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// arr2 算到了最高位的前一位，后续计算只和 arr1 有关，执行快速计算</span></div><div class="line">    <span class="keyword">if</span> (arr2Index &lt; <span class="number">0</span>) &#123;</div><div class="line">        fastSub(arr1, arr, arr1Index);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// arr1 和 arr2 都没有算到最高位的前一位</span></div><div class="line">    <span class="comment">// （1）先计算当前位</span></div><div class="line">    <span class="keyword">int</span> value = arr1[arr1Index] - arr2[arr2Index];</div><div class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</div><div class="line">        borrow(arr1, arr1Index - <span class="number">1</span>);</div><div class="line">        arr[arr.length - <span class="number">1</span> - lastIndex] = value + <span class="number">10</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        arr[arr.length - <span class="number">1</span> - lastIndex] = value;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// （2）计算前一位</span></div><div class="line">    sub(arr1, arr2, arr, ++lastIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fastSub</span><span class="params">(Integer[] arr1, Integer[] arr, <span class="keyword">int</span> arr1Index)</span> </span>&#123;</div><div class="line">    System.arraycopy(arr1, <span class="number">0</span>, arr, <span class="number">0</span>, arr1Index + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">borrow</span><span class="params">(Integer[] arr, <span class="keyword">int</span> lastIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = lastIndex; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="keyword">if</span> (arr[i] &gt; <span class="number">0</span>) &#123;</div><div class="line">            arr[i]--;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">add</span><span class="params">(String value1, String value2)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> value1IsNeg = <span class="string">'-'</span> == value1.charAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">boolean</span> value2IsNeg = <span class="string">'-'</span> == value2.charAt(<span class="number">0</span>);</div><div class="line">    <span class="keyword">if</span> (value1IsNeg &amp;&amp; value2IsNeg) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"-"</span> + add(value2.substring(<span class="number">1</span>), value1.substring(<span class="number">1</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!value1IsNeg &amp;&amp; value2IsNeg) &#123;</div><div class="line">        <span class="keyword">return</span> sub(value1, value2.substring(<span class="number">1</span>));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1IsNeg) &#123;</div><div class="line">        <span class="keyword">return</span> sub(value2, value1.substring(<span class="number">1</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span>[] arr1 = convertArray(value1);</div><div class="line">    <span class="keyword">int</span>[] arr2 = convertArray(value2);</div><div class="line">    Integer[] arr = <span class="keyword">new</span> Integer[Math.max(arr1.length, arr2.length) + <span class="number">1</span>];</div><div class="line">    add(arr1, arr2, arr, <span class="number">0</span>, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder(arr.length);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] != <span class="number">0</span>) &#123;</div><div class="line">                builder.append(arr[i]);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            builder.append(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> builder.toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>[] arr1, <span class="keyword">int</span>[] arr2, Integer[] arr, <span class="keyword">int</span> lastIndex, <span class="keyword">boolean</span> carry)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (lastIndex == arr.length) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arr1Index = arr1.length - <span class="number">1</span> - lastIndex;</div><div class="line">    <span class="keyword">int</span> arr2Index = arr2.length - <span class="number">1</span> - lastIndex;</div><div class="line">    <span class="comment">// arr1 和 arr2 位数相同，且都算到了最高位的前一位</span></div><div class="line">    <span class="keyword">if</span> (arr1Index &lt; <span class="number">0</span> &amp;&amp; arr2Index &lt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (carry) &#123;</div><div class="line">            arr[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            arr[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// arr1 算到了最高位的前一位，后续计算只和 arr2 有关，执行快速计算</span></div><div class="line">    <span class="keyword">if</span> (arr1Index &lt; <span class="number">0</span>) &#123;</div><div class="line">        fastAdd(arr2, arr, arr2Index, carry);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// arr2 算到了最高位的前一位，后续计算只和 arr1 有关，执行快速计算</span></div><div class="line">    <span class="keyword">if</span> (arr2Index &lt; <span class="number">0</span>) &#123;</div><div class="line">        fastAdd(arr1, arr, arr1Index, carry);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// arr1 和 arr2 都没有算到最高位的前一位</span></div><div class="line">    <span class="comment">// （1）先计算当前位</span></div><div class="line">    <span class="keyword">int</span> value = arr1[arr1Index] + arr2[arr2Index];</div><div class="line">    <span class="keyword">if</span> (carry) &#123;</div><div class="line">        value++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (value &gt; <span class="number">9</span>) &#123;</div><div class="line">        arr[arr.length - <span class="number">1</span> - lastIndex] = value - <span class="number">10</span>;</div><div class="line">        carry = <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        arr[arr.length - <span class="number">1</span> - lastIndex] = value;</div><div class="line">        carry = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// （2）计算前一位</span></div><div class="line">    add(arr1, arr2, arr, ++lastIndex, carry);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fastAdd</span><span class="params">(<span class="keyword">int</span>[] arr1, Integer[] arr, <span class="keyword">int</span> arr1Index, <span class="keyword">boolean</span> carry)</span> </span>&#123;</div><div class="line">    <span class="comment">// arr 位数比 arr1 位数多 1 位，多的是最高位</span></div><div class="line">    <span class="comment">// （1）先计算当前位和前一位（或前 n 位）</span></div><div class="line">    <span class="keyword">int</span> value = arr1[arr1Index];</div><div class="line">    <span class="keyword">if</span> (carry) &#123;</div><div class="line">        value++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (value &gt; <span class="number">9</span>) &#123;</div><div class="line">        arr[arr1Index + <span class="number">1</span>] = value - <span class="number">10</span>;</div><div class="line">        <span class="comment">// 如果当前位已经是 arr1 的最高位，则直接可以确定 arr[0] 并返回</span></div><div class="line">        <span class="keyword">if</span> (arr1Index == <span class="number">0</span>) &#123;</div><div class="line">            arr[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 否则，计算前一位（如果前一位加 1 后正好进位，则继续计算前一位）</span></div><div class="line">            <span class="keyword">while</span> (arr1[arr1Index - <span class="number">1</span>] == <span class="number">9</span>) &#123;</div><div class="line">                arr[arr1Index] = <span class="number">0</span>;</div><div class="line">                arr1Index--;</div><div class="line">                <span class="keyword">if</span> (arr1Index == <span class="number">0</span>) &#123;</div><div class="line">                    arr[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 再计算前一位 ，此时加 1 必小于 10</span></div><div class="line">            arr[arr1Index] = arr1[arr1Index - <span class="number">1</span>] + <span class="number">1</span>;</div><div class="line">            <span class="comment">// 如果当前位是 arr1 的次高位，则直接可以确定 arr[0] 并返回</span></div><div class="line">            <span class="keyword">if</span> (arr1Index == <span class="number">1</span>) &#123;</div><div class="line">                arr[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        arr[arr1Index + <span class="number">1</span>] = value;</div><div class="line">        <span class="comment">// 如果当前位已经是 arr1 的最高位，则直接可以确定 arr[0] 并返回</span></div><div class="line">        <span class="keyword">if</span> (arr1Index == <span class="number">0</span>) &#123;</div><div class="line">            arr[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 否则，计算前一位</span></div><div class="line">            arr[arr1Index] = arr1[arr1Index - <span class="number">1</span>];</div><div class="line">            <span class="comment">// 如果当前位是 arr1 的次高位，则直接可以确定 arr[0] 并返回</span></div><div class="line">            <span class="keyword">if</span> (arr1Index == <span class="number">1</span>) &#123;</div><div class="line">                arr[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// （2）将 arr1[0]~arr1[arr1Index - 2] 复制给 arr[1]~arr1[arr1Index - 1]</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = arr1Index - <span class="number">1</span>; i &lt; size; i++) &#123;</div><div class="line">        arr[i + <span class="number">1</span>] = arr1[i];</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// （3）arr[0]</span></div><div class="line">    arr[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] convertArray(String str) &#123;</div><div class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[str.length()];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = str.length(); i &lt; size; i++) &#123;</div><div class="line">        arr[i] = Integer.parseInt(String.valueOf(str.charAt(i)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Integer[] convertArray2(String str) &#123;</div><div class="line">    Integer[] arr = <span class="keyword">new</span> Integer[str.length()];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = str.length(); i &lt; size; i++) &#123;</div><div class="line">        arr[i] = Integer.parseInt(String.valueOf(str.charAt(i)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> mLen = <span class="keyword">new</span> Random().nextInt(<span class="number">6</span>);</div><div class="line">String m;</div><div class="line">StringBuilder builder = <span class="keyword">new</span> StringBuilder(mLen + <span class="number">1</span>);</div><div class="line">builder.append(<span class="number">1</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">9</span>));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mLen; i++) &#123;</div><div class="line">    builder.append(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">new</span> Random().nextInt(<span class="number">2</span>) == <span class="number">0</span>) &#123;</div><div class="line">    builder.insert(<span class="number">0</span>, <span class="string">"-"</span>);</div><div class="line">&#125;</div><div class="line">m = builder.toString();</div><div class="line"></div><div class="line"><span class="keyword">int</span> nLen = <span class="keyword">new</span> Random().nextInt(<span class="number">6</span>);</div><div class="line">String n;</div><div class="line">builder = <span class="keyword">new</span> StringBuilder(nLen + <span class="number">1</span>);</div><div class="line">builder.append(<span class="number">1</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">9</span>));</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nLen; i++) &#123;</div><div class="line">    builder.append(<span class="keyword">new</span> Random().nextInt(<span class="number">10</span>));</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">new</span> Random().nextInt(<span class="number">2</span>) == <span class="number">0</span>) &#123;</div><div class="line">    builder.insert(<span class="number">0</span>, <span class="string">"-"</span>);</div><div class="line">&#125;</div><div class="line">n = builder.toString();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"m="</span> + m + <span class="string">"; n="</span> + n);</div><div class="line">System.out.println(<span class="string">"add:"</span> + add(m, n));</div><div class="line">System.out.println(<span class="string">"sub:"</span> + sub(m, n));</div></pre></td></tr></table></figure><hr><h1 id="删除链表的节点"><a href="#删除链表的节点" class="headerlink" title="删除链表的节点"></a><strong>删除链表的节点</strong></h1><h2 id="题目一：在-O-1-时间内删除链表节点"><a href="#题目一：在-O-1-时间内删除链表节点" class="headerlink" title="题目一：在 O(1) 时间内删除链表节点"></a><strong>题目一：在 O(1) 时间内删除链表节点</strong></h2><blockquote><p>给定单向链表的头指针和一个节点指针，定义一个函数在 O(1) 时间内删除该节点。</p></blockquote><p>思路：<br>（1）对于头节点，直接将头节点指向下一个节点；<br>（2）对于尾节点，从头遍历找到前一个节点，将该节点的下一个节点置为 null；<br>（3）对于中间的节点，将要删除的节点的信息修改成下一个节点的信息，本质是删除了下一个节点。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title">remove</span><span class="params">(Node firstNode, Node deleteNode)</span> </span>&#123;</div><div class="line">    <span class="comment">// 删除头节点</span></div><div class="line">    <span class="keyword">if</span> (firstNode.equals(deleteNode)) &#123;</div><div class="line">        <span class="keyword">return</span> deleteNode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node tempNode = firstNode;</div><div class="line">    <span class="keyword">while</span> (tempNode.hasNext()) &#123;</div><div class="line">        tempNode = tempNode.getNext();</div><div class="line">        <span class="keyword">if</span> (tempNode.equals(deleteNode)) &#123;</div><div class="line">            Node nextNode = deleteNode.getNext();</div><div class="line">            <span class="comment">// 删除的节点不是尾节点，复制后一个节点的信息给要删除的节点</span></div><div class="line">            <span class="keyword">if</span> (nextNode != <span class="keyword">null</span>) &#123;</div><div class="line">                tempNode.setValue(nextNode.getValue());</div><div class="line">                tempNode.setNext(nextNode.getNext());</div><div class="line">                <span class="keyword">return</span> deleteNode;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// 删除的节点是尾节点，需要找到前一个节点</span></div><div class="line">            Node beforeNode;</div><div class="line">            tempNode = firstNode;</div><div class="line">            <span class="keyword">while</span> (tempNode.hasNext()) &#123;</div><div class="line">                beforeNode = tempNode;</div><div class="line">                tempNode = tempNode.getNext();</div><div class="line">                <span class="keyword">if</span> (tempNode.equals(deleteNode)) &#123;</div><div class="line">                    beforeNode.setNext(<span class="keyword">null</span>);</div><div class="line">                    <span class="keyword">return</span> deleteNode;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &lt; count) &#123;</div><div class="line">        Node node = createNode(index + <span class="number">1</span>, count);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(index, node);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node(index, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">private</span> Node next;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value, Node next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> count = <span class="number">1</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line">Node firstNode = createNode(<span class="number">0</span>, count - <span class="number">1</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> delete = <span class="keyword">new</span> Random().nextInt(count);</div><div class="line">Node deleteNode = firstNode;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; delete; i++) &#123;</div><div class="line">    deleteNode = deleteNode.getNext();</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"deleteNode:"</span> + deleteNode.getValue());</div><div class="line">Node node = firstNode;</div><div class="line">System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line"><span class="keyword">while</span> (node.hasNext()) &#123;</div><div class="line">    node = node.getNext();</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"---"</span>);</div><div class="line"></div><div class="line">Node removeNode = remove(firstNode, deleteNode);</div><div class="line"><span class="keyword">if</span> (firstNode.equals(removeNode)) &#123;</div><div class="line">    firstNode = firstNode.getNext();</div><div class="line">&#125;</div><div class="line"></div><div class="line">node = firstNode;</div><div class="line"><span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">    <span class="keyword">while</span> (node.hasNext()) &#123;</div><div class="line">        node = node.getNext();</div><div class="line">        System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度：O(1)。对于 n 个节点的链表，只有尾节点是 O(n)，其余节点都是 O(1)。<br>空间复杂度：O(1)。</p><h2 id="题目二：删除链表中重复的节点"><a href="#题目二：删除链表中重复的节点" class="headerlink" title="题目二：删除链表中重复的节点"></a><strong>题目二：删除链表中重复的节点</strong></h2><blockquote><p>在一个排序的链表中，如何删除重复的节点？</p></blockquote><p>思路：<br>定义 3 个指针，分别指向已确定的节点（beforeNode），当前需要判断的节点（currentNode）及其下一个节点（afterNode）。为了防止头节点就是需要删除的重复节点，在头节点前构造一个不重复的节点，最后再将头节点指向该节点的下一个节点。<br>遍历节点，当 currentNode 和 afterNode 值不相等时，将 currentNode 放到 beforeNode 后，否则，记录这个值，再往后遍历，直到找到不等于这个值的节点，如果这个节点是尾节点，则直接将这个节点放到 beforeNode 后；否则将这个节点作为 currentNode，继续判断 currentNode 和 afterNode 值是否相等。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Node firstNode)</span> </span>&#123;</div><div class="line">    Node beforeNode = firstNode;</div><div class="line">    Node currentNode = firstNode.getNext();</div><div class="line">    Node afterNode;</div><div class="line">    <span class="keyword">while</span> (currentNode != <span class="keyword">null</span> &amp;&amp; currentNode.hasNext()) &#123;</div><div class="line">        afterNode = currentNode.getNext();</div><div class="line">        <span class="keyword">if</span> (afterNode == <span class="keyword">null</span></div><div class="line">                || currentNode.getValue() != afterNode.getValue()) &#123;</div><div class="line">            beforeNode.setNext(currentNode);</div><div class="line">            beforeNode = currentNode;</div><div class="line">            currentNode = afterNode;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            beforeNode.setNext(<span class="keyword">null</span>);</div><div class="line">            <span class="keyword">int</span> value = currentNode.getValue();</div><div class="line">            <span class="keyword">while</span> (currentNode.hasNext()) &#123;</div><div class="line">                currentNode = currentNode.getNext();</div><div class="line">                <span class="keyword">if</span> (currentNode.getValue() != value) &#123;</div><div class="line">                    <span class="keyword">if</span> (!currentNode.hasNext()) &#123;</div><div class="line">                        beforeNode.setNext(currentNode);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">createNode</span><span class="params">(<span class="keyword">int</span> index, <span class="keyword">int</span> max)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (index &lt; max) &#123;</div><div class="line">        <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">2</span>);</div><div class="line">        Node node = createNode(index + random, max);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Node(index, node);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Node(index, <span class="keyword">null</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">private</span> Node next;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value, Node next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Node next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> max = <span class="number">1</span> + <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line">Node firstNode = createNode(<span class="number">0</span>, max);</div><div class="line"></div><div class="line">Node node = firstNode;</div><div class="line">System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line"><span class="keyword">while</span> (node.hasNext()) &#123;</div><div class="line">    node = node.getNext();</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"---"</span>);</div><div class="line"></div><div class="line">Node toolNode = <span class="keyword">new</span> Node(firstNode.getValue() - <span class="number">1</span>, firstNode);</div><div class="line">remove(toolNode);</div><div class="line"></div><div class="line">node = toolNode.getNext();</div><div class="line"><span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">    <span class="keyword">while</span> (node.hasNext()) &#123;</div><div class="line">        node = node.getNext();</div><div class="line">        System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：</p><hr><h1 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a><strong>正则表达式匹配</strong></h1><blockquote><p>请实现一个函数用来匹配包含’.’和’*‘的正则表达式。模式中的字符’.’表示任意一个字符，而’*‘表示它前面的字符可以出现任意次（含 0 次）。在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”ab<em>ac</em>a”匹配，但与”aa.a”和“ab*a”均不匹配。</p></blockquote><p>思路：<br>取模式串的前两个字符和字符串的一个字符——<br>（1）处理’*‘。如果模式串的第 2 个字符是’*‘，则从字符串的字符向后遍历，直到字符串的字符和模式串的第 1 个字符不相等，从这个位置开始后面的匹配；<br>（2）处理’.’。因为’.’表示任意一个字符，所以直接从下一个字符开始匹配；<br>（3）判断模式串和字符串的一个字符是否相等。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(String regex, String str)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span>[] regexArr = regex.toCharArray();</div><div class="line">    <span class="keyword">char</span>[] arr = str.toCharArray();</div><div class="line">    <span class="keyword">return</span> match(regexArr, <span class="number">0</span>, arr, <span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(<span class="keyword">char</span>[] regexArr, <span class="keyword">int</span> regexArrIndex, <span class="keyword">char</span>[] arr, <span class="keyword">int</span> arrIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (regexArrIndex == regexArr.length &amp;&amp; arrIndex == arr.length) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (regexArrIndex == regexArr.length || arrIndex == arr.length) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> cRegex = regexArr[regexArrIndex];</div><div class="line">    <span class="keyword">char</span> aRegex = <span class="string">' '</span>;</div><div class="line">    <span class="keyword">if</span> (regexArrIndex &lt; regexArr.length - <span class="number">1</span>) &#123;</div><div class="line">        aRegex = regexArr[regexArrIndex + <span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (aRegex == <span class="string">'*'</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (arr[arrIndex] == cRegex) &#123;</div><div class="line">            arrIndex++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> match(regexArr, regexArrIndex + <span class="number">2</span>, arr, arrIndex);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (cRegex == <span class="string">'.'</span> || arr[arrIndex] == cRegex) &#123;</div><div class="line">            <span class="keyword">return</span> match(regexArr, regexArrIndex + <span class="number">1</span>, arr, arrIndex + <span class="number">1</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"match:"</span> + match(<span class="string">"a.a"</span>, <span class="string">"aaa"</span>));</div><div class="line">System.out.println(<span class="string">"match:"</span> + match(<span class="string">"ab*ac*a"</span>, <span class="string">"aaa"</span>));</div><div class="line">System.out.println(<span class="string">"match:"</span> + match(<span class="string">"aa.a"</span>, <span class="string">"aaa"</span>));</div><div class="line">System.out.println(<span class="string">"match:"</span> + match(<span class="string">"ab*a"</span>, <span class="string">"aaa"</span>));</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。<br>空间复杂度：O(n)。</p><hr><h1 id="表示数值的字符串"><a href="#表示数值的字符串" class="headerlink" title="表示数值的字符串"></a><strong>表示数值的字符串</strong></h1><blockquote><p>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”、”5e2”、”-123”、”3.1416”及”-1E-16”都表示数值，但”12e”、”1a3.14”、”1.2.3”、”+-5”及”12e+5.4”都不是。</p></blockquote><p>思路：<br>‘e’、’E’后面必须有数字，数字之间不能有’.’；<br>字符可以是[0-9]、’e’、’E’；<br>‘e’或’E’之前的’.’最多只能有一个；<br>‘+’、’-‘开头时，只能有一个；<br>（例子中未完全体现限制，还需要根据常识补充）。</p><p>实现：<br>略。</p><p>时间复杂度：<br>空间复杂度：</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;旋转数组的最小数字&quot;&gt;&lt;a href=&quot;#旋转数组的最小数字&quot; class=&quot;headerlink&quot; title=&quot;旋转数组的最小数字&quot;&gt;&lt;/a&gt;&lt;strong&gt;旋转数组的最小数字&lt;/strong&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;把一个数组最开始的若干个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《剑指 Offer》算法题（10/68）</title>
    <link href="http://www.weichao.io/2020/03/16/%E3%80%8A%E5%89%91%E6%8C%87-Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%8810-68%EF%BC%89/"/>
    <id>http://www.weichao.io/2020/03/16/《剑指-Offer》算法题（10-68）/</id>
    <published>2020-03-16T15:14:01.000Z</published>
    <updated>2020-03-16T15:26:23.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://blog.csdn.net/Yeoman92/article/details/77868367" title="https://blog.csdn.net/Yeoman92/article/details/77868367" target="_blank" rel="external">输入某二叉树的前序遍历和中序遍历的结果，重建此二叉树。</a></li><li><a href="https://www.jianshu.com/p/940aa4243829" title="https://www.jianshu.com/p/940aa4243829" target="_blank" rel="external">剑指offer最优解Java版-二叉树的下一个结点</a></li></ul><hr><h1 id="赋值运算符函数"><a href="#赋值运算符函数" class="headerlink" title="赋值运算符函数"></a><strong>赋值运算符函数</strong></h1><p>Java 不支持用户自定义操作符重载。</p><hr><h1 id="实现-Singleton-模式"><a href="#实现-Singleton-模式" class="headerlink" title="实现 Singleton 模式"></a><strong>实现 Singleton 模式</strong></h1><blockquote><p>设计一个类，我们只能生成该类的一个实例。</p></blockquote><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a><strong>饿汉式</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a><strong>懒汉式(线程不安全)</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a><strong>懒汉式(线程安全)</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="懒汉式-双重校验锁，线程不一定安全"><a href="#懒汉式-双重校验锁，线程不一定安全" class="headerlink" title="懒汉式(双重校验锁，线程不一定安全)"></a><strong>懒汉式(双重校验锁，线程不一定安全)</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span>(SingleTon.class) &#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="懒汉式-双重校验锁，线程安全"><a href="#懒汉式-双重校验锁，线程安全" class="headerlink" title="懒汉式(双重校验锁，线程安全)"></a><strong>懒汉式(双重校验锁，线程安全)</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span>(SingleTon.class) &#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> SingleTon &#123;</div><div class="line">SINGLE</div><div class="line">&#125;</div><div class="line"></div><div class="line">SingleTon.SINGLE</div></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a><strong>静态内部类</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> InnerClass.mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="数组中重复的数字"><a href="#数组中重复的数字" class="headerlink" title="数组中重复的数字"></a><strong>数组中重复的数字</strong></h1><h2 id="找出数组中重复的数字"><a href="#找出数组中重复的数字" class="headerlink" title="找出数组中重复的数字"></a><strong>找出数组中重复的数字</strong></h2><blockquote><p>在一个长度为 n 的数组里的所有数字都在 0 到 n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了。也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。例如，如果输入长度为 7 的数组 {2, 3, 1, 0, 2, 5, 3}，那么对应的输出是重复的数字 2 或者 3。</p></blockquote><p>思路：<br>观察值的范围，当数组中没有重复数字时，排序之后的结果应该是值和索引一一对应。以此为突破口，尝试给数组排序。<br>遍历数组，当值和索引相等时，继续处理下个索引的值；否则，比较当前值（arr[i] == m）和值作为索引的值（arr[m]），如果相等则说明找到了重复的数字，否则，交换两个值，再执行该过程。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%891.png" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = arr.length; i &lt; size; i++) &#123;</div><div class="line">        <span class="keyword">while</span> (arr[i] != i) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i] == arr[arr[i]]) &#123;</div><div class="line">                <span class="keyword">return</span> arr[i];</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">int</span> temp = arr[i];</div><div class="line">            arr[i] = arr[temp];</div><div class="line">            arr[temp] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">int</span> value = find(arr);</div><div class="line">System.out.println(<span class="string">"value:"</span> + value);</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。代码中尽管有一个两重循环，但每个数字最多只要交换两次就能找到位置。<br>空间复杂度：O(1)。所有操作都是在输入数组上进行，不需要额外分配内存。</p><h2 id="不修改数组找出重复的数字"><a href="#不修改数组找出重复的数字" class="headerlink" title="不修改数组找出重复的数字"></a><strong>不修改数组找出重复的数字</strong></h2><blockquote><p>在一个长度为 n + 1 的数组里的所有数字都在 1 到 n 的范围内，所以数组中至少有一个数字是重复的。请找出数组中任意一个重复的数字，但不能修改输入的数组。例如，如果输入长度为 8 的数组 {2, 3, 5, 4, 3, 2, 6, 7}，那么对应的输出是重复的数字 2 或者 3。</p></blockquote><p>思路：<br>将值按照大于 m 值的和不大于 m 值的分为大、小两个区间，数组如果不重复（n 个元素对应 1~n），则大区间中必有 m 个元素，且小区间中必有 n - m 个元素，但是由于多 1 个元素，所以至少有大区间元素个数大于 m，或小区间元素个数大于 m - n。以此为突破口，统计数组在各区间元素的个数。<br>遍历数组，找到元素个数大于区间的，将该区间重新划分大、小两个区间；重复此步骤，直至区间不可再划分。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (end &gt;= start) &#123;</div><div class="line">        <span class="keyword">int</span> middle = ((end - start) &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">        <span class="keyword">int</span> count = count(arr, start, middle);</div><div class="line">        <span class="keyword">if</span> (start == middle) &#123;</div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> start;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (count &gt; middle - start + <span class="number">1</span>) &#123;</div><div class="line">            end = middle;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            start = middle + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> middle)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</div><div class="line">        <span class="keyword">if</span> (i &gt;= start &amp;&amp; i &lt;= middle) &#123;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</div><div class="line"><span class="keyword">int</span> value = find(arr);</div><div class="line">System.out.println(<span class="string">"value:"</span> + value);</div></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)。数组长度为 n，是 O(n)，二分查找是 O(logn)，所以总时间是 O(nlogn)。<br>空间复杂度：O(1)。</p><hr><h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a><strong>二维数组中的查找</strong></h1><blockquote><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p></blockquote><p>思路：<br>二维数组行、列都是有序的，所以如果列的第一个元素大于目标值时，则目标值不可能在此列；同理，行也一样。以此为突破口，先用二分法缩小目标可能存在的范围，再遍历。<br>使用二分法找到中间列，判断列的第一个元素和目标值的大小关系，如果等于，说明找到了，直接返回；如果大于，记录位置为 C1；如果小于，记录位置为 C2。重复此过程，直到 C2 &gt;= C1，则找到了列在遍历时的最大值 C2 - 1。同理，再找到行在遍历时的最大值。然后从列的最大值开始遍历，查找目标值。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%892.png" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">contain</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> maxCol = findMaxCol(arr, target);</div><div class="line">    <span class="keyword">if</span> (arr[<span class="number">0</span>][maxCol] == target) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> maxRow = findMaxRow(arr, target);</div><div class="line">    <span class="keyword">if</span> (arr[maxRow][<span class="number">0</span>] == target) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = maxCol; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = maxCol - j; i &lt;= maxRow; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[i][j] == target) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][j] &gt; target) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMaxCol</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = arr[<span class="number">0</span>].length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (end &gt;= start) &#123;</div><div class="line">        <span class="keyword">int</span> middle = ((end - start) &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">        <span class="keyword">if</span> (arr[<span class="number">0</span>][middle] == target) &#123;</div><div class="line">            <span class="keyword">return</span> middle;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[<span class="number">0</span>][middle] &gt; target) &#123;</div><div class="line">            end = middle - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            start = middle + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> start - <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMaxRow</span><span class="params">(<span class="keyword">int</span>[][] arr, <span class="keyword">int</span> target)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> start = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> end = arr.length - <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (end &gt;= start) &#123;</div><div class="line">        <span class="keyword">int</span> middle = ((end - start) &gt;&gt; <span class="number">1</span>) + start;</div><div class="line">        <span class="keyword">if</span> (arr[middle][<span class="number">0</span>] == target) &#123;</div><div class="line">            <span class="keyword">return</span> middle;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[middle][<span class="number">0</span>] &gt; target) &#123;</div><div class="line">            end = middle - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            start = middle + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> start - <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[][] arr = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>&#125;, &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">12</span>&#125;, &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">13</span>&#125;, &#123;<span class="number">6</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">15</span>&#125;&#125;;</div><div class="line"><span class="keyword">boolean</span> b = contain(arr, <span class="number">7</span>);</div><div class="line">System.out.println(<span class="string">"contain:"</span> + b);</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：O(1)。</p><hr><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a><strong>替换空格</strong></h1><blockquote><p>请实现一个函数，把字符串中的每个空格替换成”%20”。例如，输入”We are happy.”，则输出”We%20are%20happy.”。</p></blockquote><p>思路：<br>操作同一个数组时，如果从前往后替换会导致后面的数据被覆盖。因为每替换 1 个空格，数组所需的长度需要 + 2，所以可以以此为突破口，从后往前替换。<br>统计字符串中空格的个数，先计算出替换后的长度，由于 Java 数组长度不可变，所以以计算出的长度重新申请一块内存，然后再从后往前遍历，遇到空格时替换为%20，否则直接复制。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%893.png" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(StringBuffer stringBuffer)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = stringBuffer.length(); i &lt; size; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (stringBuffer.charAt(i) == <span class="string">' '</span>) &#123;</div><div class="line">            count++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> oldLen = stringBuffer.length();</div><div class="line">    <span class="keyword">int</span> newLen = oldLen + (count &lt;&lt; <span class="number">1</span>);</div><div class="line">    stringBuffer.setLength(newLen);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = oldLen - <span class="number">1</span>, j = newLen - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--, j--) &#123;</div><div class="line">        <span class="keyword">char</span> c = stringBuffer.charAt(i);</div><div class="line">        <span class="keyword">if</span> (c == <span class="string">' '</span>) &#123;</div><div class="line">            stringBuffer.setCharAt(j, <span class="string">'0'</span>);</div><div class="line">            stringBuffer.setCharAt(--j, <span class="string">'2'</span>);</div><div class="line">            stringBuffer.setCharAt(--j, <span class="string">'%'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            stringBuffer.setCharAt(j, c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">"We are happy."</span>);</div><div class="line">System.out.println(<span class="string">"stringBuffer:"</span> + stringBuffer.toString());</div><div class="line">convert(stringBuffer);</div><div class="line">System.out.println(<span class="string">"stringBuffer:"</span> + stringBuffer.toString());</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。<br>空间复杂度：O(n)。</p><h2 id="相关题目：把数组-A2-中的所有数字插入数组-A1-中"><a href="#相关题目：把数组-A2-中的所有数字插入数组-A1-中" class="headerlink" title="相关题目：把数组 A2 中的所有数字插入数组 A1 中"></a><strong>相关题目：把数组 A2 中的所有数字插入数组 A1 中</strong></h2><blockquote><p>有两个排序的数组 A1 和 A2，内存在 A1 的末尾有足够多的空余空间容纳 A2。请实现一个函数，把 A2 中的所有数字插入 A1 中，并且所有的数字是排序的。</p></blockquote><p>思路：<br>合并两个数组，可以知道两个数组占用的总的空间大小。以此为突破口，合并数组 A2 到 A1。<br>计算总大小，比较数组 A1 和 A2 各自最后位置的元素的大小，将更大的元素放到末尾。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 随机初始化数组中的元素</span></div><div class="line"><span class="keyword">int</span>[] arr1src = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> beforeValue = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = arr1src.length; i &lt; size; i++) &#123;</div><div class="line">    <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line">    beforeValue += random;</div><div class="line">    arr1src[i] = beforeValue;</div><div class="line">&#125;</div><div class="line">beforeValue = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = arr2.length; i &lt; size; i++) &#123;</div><div class="line">    <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">10</span>);</div><div class="line">    beforeValue += random;</div><div class="line">    arr2[i] = beforeValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</div><div class="line">System.arraycopy(arr1src, <span class="number">0</span>, arr1, <span class="number">0</span>, arr1src.length); <span class="comment">// 由于 Java 中数组长度不可变，此处假装数组 A1 末尾有足够多的空余空间</span></div><div class="line">System.out.println(<span class="string">"arr1:"</span> + Arrays.toString(arr1));</div><div class="line">System.out.println(<span class="string">"arr2:"</span> + Arrays.toString(arr2));</div><div class="line"></div><div class="line"><span class="keyword">int</span> i = arr1src.length - <span class="number">1</span>, j = arr2.length - <span class="number">1</span>, index = arr1src.length + arr2.length - <span class="number">1</span>;</div><div class="line"><span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">int</span> v1 = arr1[i];</div><div class="line">    <span class="keyword">int</span> v2 = arr2[j];</div><div class="line">    <span class="keyword">if</span> (v1 == v2) &#123;</div><div class="line">        arr1[index--] = v1;</div><div class="line">        arr1[index--] = v2;</div><div class="line">        i--;</div><div class="line">        j--;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v1 &gt; v2) &#123;</div><div class="line">        arr1[index--] = v1;</div><div class="line">        i--;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        arr1[index--] = v2;</div><div class="line">        j--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (j &gt;= <span class="number">0</span>) &#123; <span class="comment">// 最小值在 A2 数组时，直接把剩余元素复制到 A1 数组开头</span></div><div class="line">    System.arraycopy(arr2, <span class="number">0</span>, arr1, <span class="number">0</span>, j + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">System.out.println(<span class="string">"arr1:"</span> + Arrays.toString(arr1));</div></pre></td></tr></table></figure></p><p>时间复杂度：O(n)。<br>空间复杂度：O(1)。</p><hr><h1 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a><strong>从尾到头打印链表</strong></h1><blockquote><p>输入一个链表的头节点，从尾到头反过来打印出每个节点的值。</p></blockquote><p>思路：<br>判断单向链表中的节点，如果持有节点为空，则说明不是该节点是尾节点，可以打印了；否则可以继续判断持有的节点是否还持有节点。循环此过程。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">private</span> Node next;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value, Node next)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.next = next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.next;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node.getNext() != <span class="keyword">null</span>) &#123;</div><div class="line">        print(node.getNext());</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"value:"</span> + node.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Node node = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">    node = <span class="keyword">new</span> Node(i, node);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Node firstNode = node;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">    System.out.println(<span class="string">"value:"</span> + node.getValue());</div><div class="line">    node = node.getNext();</div><div class="line">&#125;</div><div class="line"></div><div class="line">print(firstNode);</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。<br>空间复杂度：O(1)。</p><hr><h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a><strong>重建二叉树</strong></h1><blockquote><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1, 2, 4, 7, 3, 5, 6, 8}和中序遍历序列{4, 7, 2, 1, 5, 3, 8, 6}，则重建二叉树并输出它的头节点。</p></blockquote><p>思路：<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%894.png" alt=""><br>（1）前序遍历看根节点；<br>（2）中序遍历看左子树、右子树；<br>（3）把子树值带回前序遍历，排在前面的是根节点；<br>（4）重复（2）（3）过程，直到左子树、右子树为空。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;</div><div class="line">    <span class="keyword">private</span> Node left;</div><div class="line">    <span class="keyword">private</span> Node right;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(Node left)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(Node right)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">create</span><span class="params">(<span class="keyword">int</span>[] preorderArr, <span class="keyword">int</span>[] inorderArr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (preorderArr == <span class="keyword">null</span> || preorderArr.length == <span class="number">0</span> ||</div><div class="line">            inorderArr == <span class="keyword">null</span> || inorderArr.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node node = <span class="keyword">new</span> Node(preorderArr[<span class="number">0</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = inorderArr.length; i &lt; size; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (preorderArr[<span class="number">0</span>] == inorderArr[i]) &#123; <span class="comment">// 根节点</span></div><div class="line">            node.setLeft(create(Arrays.copyOfRange(preorderArr, <span class="number">1</span>, i + <span class="number">1</span>), Arrays.copyOfRange(inorderArr, <span class="number">0</span>, i)));</div><div class="line">            node.setRight(create(Arrays.copyOfRange(preorderArr, i + <span class="number">1</span>, preorderArr.length), Arrays.copyOfRange(inorderArr, i + <span class="number">1</span>, inorderArr.length)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] preorderArr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>&#125;;</div><div class="line"><span class="keyword">int</span>[] inorderArr = &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</div><div class="line"></div><div class="line">Node node = create(preorderArr, inorderArr);</div><div class="line">System.out.println(<span class="string">"node:"</span> + node.getValue());</div></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)。<br>空间复杂度：O(n)。</p><h2 id="扩展：输入某二叉树的中序遍历和后序遍历的结果，重建出该二叉树"><a href="#扩展：输入某二叉树的中序遍历和后序遍历的结果，重建出该二叉树" class="headerlink" title="扩展：输入某二叉树的中序遍历和后序遍历的结果，重建出该二叉树"></a><strong>扩展：输入某二叉树的中序遍历和后序遍历的结果，重建出该二叉树</strong></h2><p>思路：<br>（1）后序遍历看根节点；<br>（2）中序遍历看左子树、右子树；<br>（3）把子树值带回后序遍历，排在前面的是根节点；<br>（4）重复（2）（3）过程，直到左子树、右子树为空。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">create</span><span class="params">(<span class="keyword">int</span>[] inorderArr, <span class="keyword">int</span>[] postorderArr)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (inorderArr == <span class="keyword">null</span> || inorderArr.length == <span class="number">0</span> ||</div><div class="line">            postorderArr == <span class="keyword">null</span> || postorderArr.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Node node = <span class="keyword">new</span> Node(postorderArr[postorderArr.length - <span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = inorderArr.length; i &lt; size; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (postorderArr[postorderArr.length - <span class="number">1</span>] == inorderArr[i]) &#123; <span class="comment">// 根节点</span></div><div class="line">            node.setLeft(create(Arrays.copyOfRange(inorderArr, <span class="number">0</span>, i), Arrays.copyOfRange(postorderArr, <span class="number">0</span>, i)));</div><div class="line">            node.setRight(create(Arrays.copyOfRange(inorderArr, i + <span class="number">1</span>, inorderArr.length), Arrays.copyOfRange(postorderArr, i, postorderArr.length - <span class="number">1</span>)));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] inorderArr = &#123;<span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;;</div><div class="line"><span class="keyword">int</span>[] postorderArr = &#123;<span class="number">7</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</div><div class="line"></div><div class="line">Node node = create(inorderArr, postorderArr);</div><div class="line">System.out.println(<span class="string">"node:"</span> + node.getValue());</div></pre></td></tr></table></figure><hr><h1 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a><strong>二叉树的下一个节点</strong></h1><blockquote><p>给定一棵二叉树和其中的一个节点，如何找出中序遍历序列的下一个节点？树中的结点除了有两个分别指向左、右子节点的指针，还有一个指向父节点的指针。</p></blockquote><p>思路：<br>分情况讨论——<br>（1）给出的节点有右子树，则沿着右子树向下遍历左子节点，最左子节点是下一个节点；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%895.PNG" alt=""><br>（2）给出的节点没有右子树，如果它是父节点的右子节点，则沿着父节点向上遍历，直到节点是父节点的左子节点，则该节点的父节点是下一个节点；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%896.PNG" alt=""><br>（3）给出的节点没有右子树，如果它是父节点的左子节点，则父节点是下一个节点。（3）是（2）的特例。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%897.PNG" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">char</span> value;</div><div class="line">    <span class="keyword">private</span> Node left;</div><div class="line">    <span class="keyword">private</span> Node right;</div><div class="line">    <span class="keyword">private</span> Node parent;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">char</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getLeft</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLeft</span><span class="params">(Node left)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        left.setParent(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getRight</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRight</span><span class="params">(Node right)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.right = right;</div><div class="line">        right.setParent(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">getParent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> parent;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(Node parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parent = parent;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">inorderNext</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</div><div class="line">        node = node.getRight();</div><div class="line">        <span class="keyword">while</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</div><div class="line">            node = node.getLeft();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> node;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span> (node.getParent() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (node.equals(node.getParent().getLeft())) &#123;</div><div class="line">                <span class="keyword">return</span> node.getParent();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                node = node.getParent();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化二叉树</span></div><div class="line">ArrayList&lt;Node&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">14</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">14</span>; i++) &#123;</div><div class="line">    list.add(<span class="keyword">new</span> Node((<span class="keyword">char</span>) (<span class="string">'A'</span> + i)));</div><div class="line">&#125;</div><div class="line">list.get(<span class="number">0</span>).setLeft(list.get(<span class="number">1</span>));</div><div class="line">list.get(<span class="number">0</span>).setRight(list.get(<span class="number">2</span>));</div><div class="line">list.get(<span class="number">1</span>).setLeft(list.get(<span class="number">3</span>));</div><div class="line">list.get(<span class="number">1</span>).setRight(list.get(<span class="number">4</span>));</div><div class="line">list.get(<span class="number">2</span>).setLeft(list.get(<span class="number">5</span>));</div><div class="line">list.get(<span class="number">2</span>).setRight(list.get(<span class="number">6</span>));</div><div class="line">list.get(<span class="number">3</span>).setRight(list.get(<span class="number">7</span>));</div><div class="line">list.get(<span class="number">4</span>).setLeft(list.get(<span class="number">8</span>));</div><div class="line">list.get(<span class="number">4</span>).setRight(list.get(<span class="number">9</span>));</div><div class="line">list.get(<span class="number">5</span>).setRight(list.get(<span class="number">10</span>));</div><div class="line">list.get(<span class="number">6</span>).setLeft(list.get(<span class="number">11</span>));</div><div class="line">list.get(<span class="number">6</span>).setRight(list.get(<span class="number">12</span>));</div><div class="line">list.get(<span class="number">7</span>).setLeft(list.get(<span class="number">13</span>));</div><div class="line"></div><div class="line"><span class="keyword">for</span> (Node node : list) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue() + <span class="string">"; next node:"</span> + ((node = inorderNext(node)) == <span class="keyword">null</span> ? <span class="string">"null"</span> : node.getValue()));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：O(1)。</p><h2 id="扩展：前序遍历"><a href="#扩展：前序遍历" class="headerlink" title="扩展：前序遍历"></a><strong>扩展：前序遍历</strong></h2><p>思路：前序遍历的顺序是节点-&gt;左子节点-&gt;右子节点。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preorder</span><span class="params">(ArrayList&lt;Node&gt; list, Node node)</span> </span>&#123;</div><div class="line">    list.add(node);</div><div class="line">    <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</div><div class="line">        preorder(list, node.getLeft());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</div><div class="line">        preorder(list, node.getRight());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Node&gt; preorderList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">14</span>);</div><div class="line">preorder(preorderList, list.get(<span class="number">0</span>));</div><div class="line"><span class="keyword">for</span> (Node node : preorderList) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="扩展：中序遍历"><a href="#扩展：中序遍历" class="headerlink" title="扩展：中序遍历"></a><strong>扩展：中序遍历</strong></h2><p>思路：中序遍历的顺序是左子节点-&gt;节点-&gt;右子节点。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(ArrayList&lt;Node&gt; list, Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</div><div class="line">        inorder(list, node.getLeft());</div><div class="line">    &#125;</div><div class="line">    list.add(node);</div><div class="line">    <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</div><div class="line">        inorder(list, node.getRight());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Node&gt; inorderList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">14</span>);</div><div class="line">inorder(inorderList, list.get(<span class="number">0</span>));</div><div class="line"><span class="keyword">for</span> (Node node : inorderList) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="扩展：后序遍历"><a href="#扩展：后序遍历" class="headerlink" title="扩展：后序遍历"></a><strong>扩展：后序遍历</strong></h2><p>思路：后序遍历的顺序是左子节点-&gt;右子节点-&gt;节点。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postorder</span><span class="params">(ArrayList&lt;Node&gt; list, Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</div><div class="line">        postorder(list, node.getLeft());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</div><div class="line">        postorder(list, node.getRight());</div><div class="line">    &#125;</div><div class="line">    list.add(node);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;Node&gt; postorderList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">14</span>);</div><div class="line">postorder(postorderList, list.get(<span class="number">0</span>));</div><div class="line"><span class="keyword">for</span> (Node node : postorderList) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue());</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="扩展：给定一棵二叉树和其中的一个节点，找出前序遍历序列的下一个节点"><a href="#扩展：给定一棵二叉树和其中的一个节点，找出前序遍历序列的下一个节点" class="headerlink" title="扩展：给定一棵二叉树和其中的一个节点，找出前序遍历序列的下一个节点"></a><strong>扩展：给定一棵二叉树和其中的一个节点，找出前序遍历序列的下一个节点</strong></h2><p>思路：<br>分情况讨论——<br>（1）给出的节点有左子节点，则下一个节点是该左子节点；<br>（2）给出的节点没有左子节点，但是有右子节点，则下一个节点是该右子节点；<br>（3）给出的节点没有子节点，如果它是父节点的右子节点，且有兄弟节点，则下一个节点是兄弟节点；如果它是父节点的右子节点，则沿着父节点向上遍历，直到节点是父节点的左子节点，并且有兄弟节点，则下一个节点是兄弟节点。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">preorderNext</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> node.getLeft();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.getRight() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> node.getRight();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">while</span> (node.getParent() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (node.equals(node.getParent().getLeft()) &amp;&amp; node.getParent().getRight() != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> node.getParent().getRight();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                node = node.getParent();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Node node = list.get(<span class="number">0</span>);</div><div class="line"><span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue() + <span class="string">"; next node:"</span> + ((node = preorderNext(node)) == <span class="keyword">null</span> ? <span class="string">"null"</span> : node.getValue()));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="扩展：给定一棵二叉树和其中的一个节点，找出后序遍历序列的下一个节点"><a href="#扩展：给定一棵二叉树和其中的一个节点，找出后序遍历序列的下一个节点" class="headerlink" title="扩展：给定一棵二叉树和其中的一个节点，找出后序遍历序列的下一个节点"></a><strong>扩展：给定一棵二叉树和其中的一个节点，找出后序遍历序列的下一个节点</strong></h2><p>思路：<br>分情况讨论——<br>（1）给出的节点没有父节点，则下一个节点是 null；<br>（2）给出的节点有父节点，且是左节点，如果没有兄弟节点，则下一个节点是父节点；否则，找到兄弟节点的最左子节点，如果该节点没有左子节点，但是有右子节点，则继续向下遍历，最后获取的节点就是下一个节点；<br>（3）给出的节点有父节点，且是右节点，则下一个节点是父节点。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">postorderNext</span><span class="params">(Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (node.getParent() == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (node.equals(node.getParent().getLeft())) &#123;</div><div class="line">            <span class="keyword">if</span> (node.getParent().getRight() == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> node.getParent();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                node = node.getParent().getRight();</div><div class="line">                <span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">while</span> (node.getLeft() != <span class="keyword">null</span>) &#123;</div><div class="line">                        node = node.getLeft();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (node.getRight() == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">return</span> node;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        node = node.getRight();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> node.getParent();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (Node node : list) &#123;</div><div class="line">    System.out.println(<span class="string">"node:"</span> + node.getValue() + <span class="string">"; next node:"</span> + ((node = postorderNext(node)) == <span class="keyword">null</span> ? <span class="string">"null"</span> : node.getValue()));</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a><strong>用两个栈实现队列</strong></h1><blockquote><p>用两个栈实现一个队列，分别完成在队列尾部插入节点和在队列头部删除节点的功能。</p></blockquote><p>思路：<br>队列的特点是先进先出。栈的特点是后进先出，进栈和出栈的顺序相反，如果数据从栈 A 出栈后依次入栈 B，再从栈 B 出栈，则出栈 B 时的顺序和入栈 A 时的顺序是一致的。以此为突破口，即可实现队列。<br>初始化栈 A、B，栈 A 用于存数据，栈 B 用于取数据。当栈 B 没数据时，会先将栈 A 的数据导入到栈 B，然后再从栈 B 取数据；当栈 B 有数据时，就直接从栈 B 取数据，后续存入栈 A 的数据，等到栈 B 没数据时，在取数据前才从栈 A 导入到栈 B。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%898.PNG" alt=""><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%899.PNG" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Stack&lt;T&gt; stack1;</div><div class="line">    <span class="keyword">private</span> Stack&lt;T&gt; stack2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Queue</span><span class="params">()</span> </span>&#123;</div><div class="line">        stack1 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">        stack2 = <span class="keyword">new</span> Stack&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        stack1.push(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (stack2.isEmpty()) &#123;</div><div class="line">            <span class="keyword">while</span> (!stack1.isEmpty()) &#123;</div><div class="line">                stack2.push(stack1.pop());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stack2.pop();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"stack1:"</span> + stack1.toString() + <span class="string">"\nstack2:"</span> + stack2.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Queue&lt;Integer&gt; queue = <span class="keyword">new</span> Queue&lt;&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">    <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">128</span>);</div><div class="line">    <span class="keyword">if</span> ((random &amp; <span class="number">4</span>) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Integer pop = queue.pop();</div><div class="line">            System.out.println(<span class="string">"pop:"</span> + pop + <span class="string">"\n"</span> + queue.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (EmptyStackException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        queue.push(random);</div><div class="line">        System.out.println(<span class="string">"push:"</span> + random + <span class="string">"\n"</span> + queue.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度：<br>空间复杂度：</p><h2 id="相关题目：用两个队列实现一个栈"><a href="#相关题目：用两个队列实现一个栈" class="headerlink" title="相关题目：用两个队列实现一个栈"></a><strong>相关题目：用两个队列实现一个栈</strong></h2><p>思路：<br>初始化队列 A、B，两个队列都是用于存/取数据，但是同一时刻，只能有一个队列存数据，另一个队列中的数据为空。当取数据时，将前 n - 1 个数据导入到空队列中，返回倒数第 1 个数据，此时，原来的空队列已经有数据了，以后用于存数据，原来存数据的队列已经被清空了。两个队列交替，总是返回倒数第 1 个数据。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E3%80%8A%E5%89%91%E6%8C%87%20Offer%E3%80%8B%E7%AE%97%E6%B3%95%E9%A2%98%EF%BC%881068%EF%BC%8910.PNG" alt=""></p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArrayDeque&lt;T&gt; queue1;</div><div class="line">    <span class="keyword">private</span> ArrayDeque&lt;T&gt; queue2;</div><div class="line">    <span class="keyword">private</span> ArrayDeque&lt;T&gt; pushQueue;</div><div class="line">    <span class="keyword">private</span> ArrayDeque&lt;T&gt; popQueue;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        queue1 = <span class="keyword">new</span> ArrayDeque&lt;&gt;(capacity);</div><div class="line">        queue2 = <span class="keyword">new</span> ArrayDeque&lt;&gt;(capacity);</div><div class="line">        pushQueue = queue1;</div><div class="line">        popQueue = queue2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        pushQueue.addLast(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = pushQueue.size(); i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">            popQueue.add(pushQueue.removeFirst());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (pushQueue == queue1) &#123;</div><div class="line">            pushQueue = queue2;</div><div class="line">            popQueue = queue1;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            pushQueue = queue1;</div><div class="line">            popQueue = queue2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> popQueue.removeFirst();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"queue1:"</span> + queue1.toString() + <span class="string">"\nqueue2:"</span> + queue2.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;(<span class="number">20</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line">    <span class="keyword">int</span> random = <span class="keyword">new</span> Random().nextInt(<span class="number">128</span>);</div><div class="line">    <span class="keyword">if</span> ((random &amp; <span class="number">6</span>) == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Integer pop = stack.pop();</div><div class="line">            System.out.println(<span class="string">"pop:"</span> + pop + <span class="string">"\n"</span> + stack.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        stack.push(random);</div><div class="line">        System.out.println(<span class="string">"push:"</span> + random + <span class="string">"\n"</span> + stack.toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><strong>斐波那契数列</strong></h1><blockquote><p>求斐波那契数列的第 n 项。</p></blockquote><p>思路：<br>递归由于多次重复计算，所以效率低。可以使用循环，由下向上计算。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> preTwo = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> preOne = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">            value = preTwo + preOne;</div><div class="line">            preTwo = preOne;</div><div class="line">            preOne = value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">10</span>; n++) &#123;</div><div class="line">    System.out.println(<span class="string">"fibonacci["</span> + n + <span class="string">"]:"</span> + fibonacci(n));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度：O(n)。<br>空间复杂度：O(1)。</p><h2 id="题目二：青蛙跳台阶问题"><a href="#题目二：青蛙跳台阶问题" class="headerlink" title="题目二：青蛙跳台阶问题"></a><strong>题目二：青蛙跳台阶问题</strong></h2><blockquote><p>一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p></blockquote><p>思路：<br>把 n 级台阶时的跳法看成 n 的函数，计为 f(n)，当 n &gt; 2 时，如果第一次跳 1 级，则跳法数目等于剩余 n - 1 级台阶的跳法数目，即 f(n - 1)；如果第一次跳 2 级，则跳法数目等于剩余 n - 2 级台阶的跳法数目，即 f(n - 2)；因为第一次只能跳 1 级或 2 级，所以 f(n) = f(n - 1) + f(n - 2)，就是上面的斐波那契数列了。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> preTwo = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> preOne = <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</div><div class="line">            value = preTwo + preOne;</div><div class="line">            preTwo = preOne;</div><div class="line">            preOne = value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt; <span class="number">10</span>; n++) &#123;</div><div class="line">    System.out.println(<span class="string">"jump["</span> + n + <span class="string">"]:"</span> + jump(n));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="本题扩展：青蛙跳-n-级台阶时，一次最多可以跳-n-级"><a href="#本题扩展：青蛙跳-n-级台阶时，一次最多可以跳-n-级" class="headerlink" title="本题扩展：青蛙跳 n 级台阶时，一次最多可以跳 n 级"></a><strong>本题扩展：青蛙跳 n 级台阶时，一次最多可以跳 n 级</strong></h3><blockquote><p>在青蛙跳台阶的问题中，如果把条件改成：一只青蛙一次可以跳上 1 级台阶，也可以跳上 2 级台阶……它也可以跳上 n 级，此时该青蛙跳上一个 n 级的台阶总共有多少种跳法？我们用数学归纳法可以证明 f(n) = 2^(n - 1)。</p></blockquote><p>思路：<br>因为 f(n) = 2^(n - 1)，所以 f(n - 1) = 2^[(n - 1) - 1] = 2^(n - 1) * 2^(-1)，也就是说 f(n) 是 f(n - 1) 的 2 倍。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> value = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">            value *= <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt; <span class="number">10</span>; n++) &#123;</div><div class="line">    System.out.println(<span class="string">"jump["</span> + n + <span class="string">"]:"</span> + jump(n));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="相关题目：用-2-x-1-的小矩形横着或者竖着去覆盖-2-x-n-的大矩形"><a href="#相关题目：用-2-x-1-的小矩形横着或者竖着去覆盖-2-x-n-的大矩形" class="headerlink" title="相关题目：用 2 x 1 的小矩形横着或者竖着去覆盖 2 x n 的大矩形"></a><strong>相关题目：用 2 x 1 的小矩形横着或者竖着去覆盖 2 x n 的大矩形</strong></h2><blockquote><p>我们可以用 2 x 1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2 x 1 的小矩形无重叠地覆盖一个 2 x n 的大矩形，总共有多少种方法？</p></blockquote><p>思路：<br>当小矩形竖着放时，剩余面积是 2 x (n - 1)；当小矩形横着放时，小矩形下方也是惟一确定可以放一个小矩形，剩余面积是 2 x （n - 2）；所以 f(n) = f(n - 1) + f(n - 2)。</p><p>实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> preTwo = <span class="number">1</span>;</div><div class="line">        <span class="keyword">int</span> preOne = <span class="number">2</span>;</div><div class="line">        <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</div><div class="line">            value = preTwo + preOne;</div><div class="line">            preTwo = preOne;</div><div class="line">            preOne = value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">1</span>; n &lt; <span class="number">10</span>; n++) &#123;</div><div class="line">    System.out.println(<span class="string">"jump["</span> + n + <span class="string">"]:"</span> + jump(n));</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://bl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://www.weichao.io/2020/03/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://www.weichao.io/2020/03/12/数据结构/</id>
    <published>2020-03-12T07:57:42.000Z</published>
    <updated>2020-03-12T08:05:22.959Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://juejin.im/post/5b3c30bde51d451964620710#heading-4" title="https://juejin.im/post/5b3c30bde51d451964620710#heading-4" target="_blank" rel="external">数据结构与算法（java）</a></li><li><a href="https://tech.meituan.com/2016/06/24/java-hashmap.html" title="https://tech.meituan.com/2016/06/24/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></li><li><a href="https://tech.meituan.com/2016/12/02/redblack-tree.html" title="https://tech.meituan.com/2016/12/02/redblack-tree.html" target="_blank" rel="external">红黑树深入剖析及Java实现</a></li><li><a href="https://blog.csdn.net/javazejian/article/details/72828483#synchronized%E5%BA%95%E5%B1%82%E8%AF%AD%E4%B9%89%E5%8E%9F%E7%90%86" title="https://blog.csdn.net/javazejian/article/details/72828483#synchronized%E5%BA%95%E5%B1%82%E8%AF%AD%E4%B9%89%E5%8E%9F%E7%90%86" target="_blank" rel="external">深入理解Java并发之synchronized实现原理</a></li><li><a href="https://www.cnblogs.com/yangfeiORfeiyang/p/9694383.html" title="https://www.cnblogs.com/yangfeiORfeiyang/p/9694383.html" target="_blank" rel="external">ConcurrentHashMap 1.8为什么要使用CAS+Synchronized取代Segment+ReentrantLock</a></li><li><a href="https://mp.weixin.qq.com/s/AF2tMHfofG8b51yIyaIReg" title="https://mp.weixin.qq.com/s/AF2tMHfofG8b51yIyaIReg" target="_blank" rel="external">拜托，面试别再问我堆（排序）了！</a></li></ul><hr><h1 id="数据结构比较"><a href="#数据结构比较" class="headerlink" title="数据结构比较"></a><strong>数据结构比较</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003121.png" alt=""></p><hr><h1 id="数据结构选择"><a href="#数据结构选择" class="headerlink" title="数据结构选择"></a><strong>数据结构选择</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003122.png" alt=""></p><hr><h1 id="Java-中数据结构的体现"><a href="#Java-中数据结构的体现" class="headerlink" title="Java 中数据结构的体现"></a><strong>Java 中数据结构的体现</strong></h1><h2 id="数组（Array）"><a href="#数组（Array）" class="headerlink" title="数组（Array）"></a><strong>数组（Array）</strong></h2><blockquote><p>数组是一种效率最高的存储和随机访问对象引用序列的方式。数组就是一个简单的线性序列，这使得元素访问非常快速。但是这种速度所付出的代价是数组对象的大小被固定，并且在其生命周期中不可改变。</p></blockquote><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><strong>ArrayList</strong></h3><p>与数组相比：可变长度。<br>可变长度的实现原理：每当添加元素时，都会检查内部数组的大小是否够用，不够用时会扩容。<br>优化：尽量避免触发扩容。ArrayList 默认大小是 10，创建时估计好容量，使用带参数的构造方法创建。</p><p>允许元素为 null。</p><p><strong><em>扩容？</em></strong><br>扩容时会以当前容量的 1.5 倍大小重新创建数组，并将原数据复制到新数组中。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a><strong>Vector</strong></h3><p>与 ArrayList 相比：线程安全、扩容时是 2 倍。<br>线程安全的实现原理：方法上使用 synchronized 关键字。</p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a><strong>Stack</strong></h3><p>基于 Vector 实现，线程安全。</p><h3 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a><strong>ArrayDeque</strong></h3><p>双向循环队列。当作为栈使用时，性能比 Stack 好；当作为队列使用时，性能比 LinkedList 好。<br>与 Stack 相比：线程不安全。</p><p>双向循环队列实现原理：引入两个游标，head 和 tail，如果向队列里插入一个元素，就把 tail 向后移动（如果 tail 已经指向了数组的最后一位，需要将 tail 重新指向数组的头）；如果从队列中删除一个元素，就把 head 向后移动。</p><p>初始容量是 2 的幂次方，扩容时是 2 倍。</p><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a><strong>PriorityQueue</strong></h3><p>优先队列。<br>优先队列实现原理：逻辑结构是堆。默认是小顶堆，可以通过比较器改为大顶堆。</p><ul><li>默认容量是 11，容量小于 64 时，扩容 2 倍 + 1；否则 扩容 1.5 倍。</li><li>数组从 0 开始存数据，计算父节点索引使用<code>(k - 1) &gt;&gt;&gt; 1</code>。</li><li>不允许元素为 null。</li></ul><p><strong><em>堆的性质？</em></strong></p><ol><li>完全二叉树，与二叉树相比：叶子节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层的最左边；</li><li>堆中某个节点的值总是不大于（或不小于）其父节点的值，同一层节点的值不存在大小关系。</li></ol><h4 id="堆的插入"><a href="#堆的插入" class="headerlink" title="堆的插入"></a><strong>堆的插入</strong></h4><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003123.png" alt=""></p><p>1、把新元素插入到最后一个节点往后一位的位置；<br>2、将新元素和父节点比较，如果新元素不大于父节点，就把新元素放在这个位置，否则，就交换它们的位置；循环执行此步骤。</p><p><strong><em>为什么索引 0 不存元素？</em></strong><br>方便通过<code>索引/2</code>的操作获取父节点的索引。</p><h4 id="堆的删除"><a href="#堆的删除" class="headerlink" title="堆的删除"></a><strong>堆的删除</strong></h4><p>堆的删除特指删除堆顶元素。</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003124.png" alt=""></p><p>把最后一个节点放到堆顶，然后与左、右子节点中小的节点交换位置；循环执行此步骤。</p><p><strong><em>为什么 ArrayList 没有像 LinkedList 一样直接实现栈或双端队列？</em></strong><br>因为 ArrayList 从队列头删除元素时，要把后面的元素向前拷贝，性能低。</p><h2 id="链表（Linked-List）"><a href="#链表（Linked-List）" class="headerlink" title="链表（Linked List）"></a><strong>链表（Linked List）</strong></h2><blockquote><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。</p></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a><strong>LinkedList</strong></h3><p>与链表相比：LinkedList 是双向链表。</p><p>允许元素为 null。</p><p>LinkedList 实现了栈和双端队列。</p><h2 id="数组-链表-哈希表（Hash-Table）"><a href="#数组-链表-哈希表（Hash-Table）" class="headerlink" title="数组 + 链表 = 哈希表（Hash Table）"></a><strong>数组 + 链表 = 哈希表（Hash Table）</strong></h2><blockquote><p>数据经过哈希算法之后得到的集合。这样关键字和数据在集合中的位置存在一定的关系，可以根据这种关系快速查询。</p></blockquote><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><strong>HashMap</strong></h3><p>与哈希表相比：</p><p>在 JDK 1.7 及以前，HashMap 的数据结构是数组 + 单向链表。<br>在 JDK 1.8 之后，HashMap 的数据结构在初始化的时候是数组 + 单向链表，链表会改为红黑树优化。</p><ul><li>最大容量是 2^30。</li><li>容器没有在构造函数中初始化，而是在第一次插入时进行初始化，且会计算为 2 的幂次方，初始化时会进行第一次扩容。</li><li>默认容量大小是 16，负载因子是 0.75，所以当插入第 13 个元素时会进行第二次扩容，扩容倍数是 2 倍。</li><li>如果容量大于或等于 64 且链表大小大于或等于 8 时，链表改为红黑树，当链表大小小于或等于 6 时，红黑树改为链表。</li></ul><p>优化：尽量避免触发扩容。HashMap 默认不触发扩容大小是 16 * 0.75 = 12，创建时估计好容量，使用带参数的构造方法创建。</p><p>允许 null 键和 null 值。</p><p><strong><em>为什么不将链表全部换成红黑树？</em></strong></p><ol><li>由于数据量的不同，数组 + 链表 + 红黑树的结构不一定比数组 + 链表的结构性能高；</li><li>HashMap 扩容时会重新计算节点的索引位置，也就是会将红黑树进行拆分和重组。</li></ol><p><strong><em>改变负载因子的后果？</em></strong><br>负载因子过高会导致链表过长，查找键值对时间增加，负载因子过低会导致扩容频率增加。</p><h4 id="HashMap-工作原理"><a href="#HashMap-工作原理" class="headerlink" title="HashMap 工作原理"></a><strong>HashMap 工作原理</strong></h4><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a><strong>插入</strong></h5><p>将 K/V 键值传给 put() 方法：<br>1、调用 hash(K) 方法计算 K 的 hash 值，然后结合数组长度，计算得数组下标；<br>2、如果 K 的 hash 值在 HashMap 中不存在，则执行插入；否则，发生 hash 冲突；<br>（3、发生 hash 冲突时，如果 equals 返回 true，则更新键值对；否则，插入链表（JDK 1.7 之前使用头插法、JDK 1.8 开始使用尾插法）或者红黑树中（树的添加方式）；）<br>（4、调整数组大小。当容器中的元素个数大于阈值时，容器会进行扩容。）</p><p><strong><em>如何计算数组索引位置？</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> h;</div><div class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent, <span class="keyword">boolean</span> evict)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</div><div class="line">        n = (tab = resize()).length;</div><div class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li><code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>：将 key 的 hashCode 值及其无符号右移16位后的值进行异或操作；</li><li><code>i = (n - 1) &amp; hash</code>：将 hash 值与数组大小 - 1 的值取与。</li></ol><p><strong><em>为什么不直接使用 hashCode？</em></strong><br>如果使用<code>(n - 1) &amp; hashCode</code>，因为 n 的值一般情况下很小，基本上只有 hashCode 的低 16 位能参与计算，这会导致数据在数组中分布不均匀；<code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code>是让 hashCode 的高 16 位也能间接参与计算，使数据在数组中均匀分布。</p><p><strong><em>为什么使用 (n - 1) &amp; hash 而不使用 hash % n ？</em></strong><br>结果是等价的。但是 &amp; 是二进制直接计算，效率高。<br>当数组大小是 2 的幂次方，也就是一个合数时，可能会导致 hash 冲突概率更高，因为质数比合数更保险。但是 2 的幂次方有利于<code>(n - 1) &amp; hash</code>运算，如果是合数会导致有几个位置不可用，肯定会增加 hash 冲突的概率，而且质数扩容后也得是质数。所以 2 的幂次方和<code>(n - 1) &amp; hash</code>的效率至少不低于质数 + <code>hash % n</code>。</p><p><strong><em>扩容？</em></strong><br>扩容时会以当前容量的 2 倍大小重新创建数组，并重新计算数据在数组中的位置。新位置可能是原位置，也可能是原位置 + 原数组大小。</p><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a><strong>读取</strong></h5><p>将 K 传给 get() 方法：<br>1、调用 hash(K) 方法计算 K 的 hash 值，然后结合数组长度，计算得数组下标；<br>2、遍历链表，使用 equals() 方法查找相同 K 值对应的 V 值。</p><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a><strong>HashTable</strong></h3><p>已被 ConcurrentHashMap 取代。</p><p>与 HashMap 相比：</p><p>1、线程安全。<br>线程安全的实现原理：方法用 synchronized 修饰。</p><p>2、HashTable 的数据结构是数组 + 单向链表。</p><ul><li>最大容量是 Integer.MAX_VALUE - 8。</li><li>容器在构造函数中初始化。</li><li>默认容量大小是 11，负载因子是 0.75，所以当插入第 9 个元素时会进行第一次扩容，扩容倍数是 2 倍 + 1。</li></ul><p>优化：尽量避免触发扩容。HashTable 默认不触发扩容大小是 11 * 0.75 = 8.25，创建时估计好容量，使用带参数的构造方法创建。</p><p>不允许 null 键或 null 值。</p><p><strong><em>HashTable 为什么不允许 null 键或 null 值？</em></strong></p><ol><li>作者希望每个 key 都会实现 hashCode 和 equals 方法；</li><li>HashTable 开发时间早于 HashMap，是一个过时的类。</li></ol><h4 id="HashTable-工作原理"><a href="#HashTable-工作原理" class="headerlink" title="HashTable 工作原理"></a><strong>HashTable 工作原理</strong></h4><h5 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a><strong>插入</strong></h5><p>将 K/V 键值传给 put() 方法：<br>1、计算数组下标；<br>2、如果 K 的 hash 值在 HashTable 中不存在，则执行插入；否则，发生 hash 冲突；<br>（3、发生 hash 冲突时，如果 equals 返回 true，则更新键值对；否则，插入链表；）<br>（4、调整数组大小。当容器中的元素个数大于或等于阈值时，容器会进行扩容。）</p><p><strong><em>如何计算数组索引位置？</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> hash = key.hashCode();</div><div class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</div></pre></td></tr></table></figure></p><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a><strong>ConcurrentHashMap</strong></h3><p>与 HashMap 相比：</p><p>1、线程安全。<br>线程安全的实现原理：JDK 1.7 使用分段锁、JDK 1.8 使用 CAS（无锁算法） + synchronized（ConcurrentHashMap 是 JDK 1.5 推出的，在 JDK 1.6 时 JVM 引入偏向锁、轻量锁，等到 JDK 1.8 才优化）。</p><p>不允许 null 键或 null 值。</p><ul><li>默认并发数量是 16（即 segment 数组的大小），最大是 2^16，会计算为 2 的幂次方。</li></ul><p>ConcurrentHashMap 有 fail-safe 机制。</p><p><strong><em>fail-fast 和 fail-safe 机制？</em></strong></p><ol><li>fail-fast 机制确保了遍历或多线程操作时，如果改变结构，就会抛出 ConcurrentModificationException，实现原理是通过变量 modCount 记录修改次数，在遍历时会判断 expectedModCount 是否和 modCount 相等。<br>大部分非同步的类都支持 fail-fast，而且 Vector 和 HashTable 也支持，用于迭代器遍历。</li><li>fail-safe 机制确保了改变结构时不会抛出 ConcurrentModificationException，实现原理是在原集合的 copy 上遍历，这会导致额外的空间和时间的开销，并且不能保证遍历的是最新的内容。</li></ol><p><strong><em>ConcurrentHashMap 分段锁的原理？</em></strong><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003125.png" alt=""></p><p>ConcurrentHashMap 持有一组锁（segment 数组），当写操作发生在不同的锁中时，就可以并行操作，实现了并发写；同时用 volatile 修饰 HashEntry 的 value，确保了并发读的一致性。</p><p><strong><em>Segment 为什么能当锁？</em></strong><br>Segment 类继承于 ReentrantLock 类。</p><p><strong><em>volatile 作用？</em></strong></p><ol><li>实现有序性：比如确保实例化对象的顺序——1）分配内存空间、2）初始化对象、3）将内存空间的地址赋值给对应的引用；原理是 volatile 会转换为 CPU 的 lock 指令，建立内存屏障；</li><li>实现多线程可见性：每个线程拥有自己的一个高速缓存区内存，其他线程不可见，修改 volatile 修饰的变量时会强制将修改后的值刷新到主内存中，同时让其他线程中缓存的该变量的值失效，读取时使用主内存的值；</li><li>只能保证单次操作的原子性，所以无法完全代替 synchronized。</li></ol><p><strong><em>为什么使用 CAS + synchronized 取代分段锁？</em></strong><br>在 JVM 中，对象在内存中的布局分为三块区域：对象头、实例数据和对齐填充。synchronized 是靠对象头和此对象对应的 monitor 来保证上锁的，也就是对象头里的重量级锁标志指向了 monitor，而 monitor 内部则保存了一个当前线程，也就是抢到了锁的线程。<br>synchronized 和 ReentrantLock 开销差距是释放锁时唤醒线程的数量，synchronized 是唤醒锁池里所有的线程 + 刚好来访问的线程，而 ReentrantLock 是当前线程后进来的第一个线程 + 刚好来访问的线程。synchronized 由于 JVM 优化后会经历偏向锁、轻量锁、自旋锁，不是重量级锁不存在线程挂起和唤醒的过程，所以性能高于 ReentrantLock。</p><h2 id="链表-哈希表"><a href="#链表-哈希表" class="headerlink" title="链表 + 哈希表"></a><strong>链表 + 哈希表</strong></h2><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a><strong>LinkedHashMap</strong></h3><p>HashMap 的子类，与 HashMap 相比：保存了记录的插入顺序。<br>保存插入顺序的原理：使用双向链表，重写 newNode 方法，插入的同时会调用 linkNodeLast 方法将新元素插入链表。</p><h2 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a><strong>树（Tree）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003126.png" alt=""></p><h3 id="二叉查找树（Binary-Search-Tree）"><a href="#二叉查找树（Binary-Search-Tree）" class="headerlink" title="二叉查找树（Binary Search Tree）"></a><strong>二叉查找树（Binary Search Tree）</strong></h3><p>与树相比：最多有两棵子树，左子树上所有结点的值均小于它的根结点的值，右子树上所有结点的值均大于它的根结点的值。</p><h3 id="红黑树（Red-Black-Tree）"><a href="#红黑树（Red-Black-Tree）" class="headerlink" title="红黑树（Red-Black Tree）"></a><strong>红黑树（Red-Black Tree）</strong></h3><p>与二叉查找树相比：一个枝叶分布非常平均的二叉树，所以不管访问哪个元素，时间复杂度都不会特别离谱。</p><ul><li>每个节点是红色或黑色；</li><li>叶子节点（NIL）是黑色；</li><li>根节点是黑色；</li><li>不能有两个连续的红色节点；</li><li>从任一节点到其每个叶子节点的所有路径都包含相同数目的黑色节点。</li></ul><p>这些性质强制了红黑树的关键性质：从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003127.jpeg" alt=""></p><p>在插入和删除元素时，可能需要旋转才能保持红黑树。</p><p><strong>左旋</strong><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003128.gif" alt=""></p><p><strong>右旋</strong><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84202003129.gif" alt=""></p><h4 id="插入-2"><a href="#插入-2" class="headerlink" title="插入"></a><strong>插入</strong></h4><p>1、为了避免违背性质 5，将插入的新节点着色为”红色”；<br>2、将红黑树当作一颗二叉查找树，将新节点插入；<br>3、插入后修复：<br>（1）父节点为黑色时——插入完成。<br>（2）父节点为红色且有叔叔节点（叔叔节点此时必为红色）时——让父辈节点都变黑色，爷爷节点变红色。此时爷爷节点相当于新插入的节点；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031210.png" alt=""><br>（3）只有红色父节点，且新节点、父节点、爷爷节点处于一侧时——让父节点旋转，同时父节点和爷爷节点变色。此时爷爷节点相当于新插入的节点；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031211.png" alt=""><br>（4）只有红色父节点，且新节点、父节点、爷爷节点不处于一侧时——先让新节点和父节点通过旋转变为同侧，再执行（3）；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031212.png" alt=""></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a><strong>删除</strong></h4><p>1、将红黑树当作一颗二叉查找树，将节点删除（被删除节点有两个子树时，将被删除节点替换为右子树最小值或左子树最大值的节点，这样就将有两个子树的节点转为最多只有一个子树的节点）；<br>2、删除后修复：<br>（1）被删除节点是红色节点时——删除完成。<br>（2）被删除节点是黑色节点，且兄弟节点是红色时——让兄弟节点旋转，同时父节点和兄弟节点变色，此时新的兄弟节点是黑色的，变为（3）（4）（5）之一；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031213.png" alt=""><br>（3）被删除节点是黑色节点，且兄弟节点是黑色，且兄弟节点的子节点都是黑色时——让父节点和兄弟节点变色。此时父节点相当于新插入的节点；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031214.png" alt=""><br>（4）被删除节点是黑色节点，且兄弟节点是黑色，且兄弟节点的近端子节点是黑色时——让兄弟节点旋转，同时兄弟节点的右节点变色。<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031215.png" alt=""><br>（5）被删除节点是黑色节点，且兄弟节点是黑色，且兄弟节点的远端子节点是黑色时——让兄弟节点旋转，同时兄弟节点和近端子节点变色，在执行（4）；<br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842020031216.png" alt=""></p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a><strong>TreeMap</strong></h4><p>与红黑树区别：允许 null 键和 null 值。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ju
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://www.weichao.io/2020/03/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.weichao.io/2020/03/03/设计模式/</id>
    <published>2020-03-03T11:39:09.000Z</published>
    <updated>2020-03-03T11:55:09.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://www.cnblogs.com/zhuxiansheng/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" title="https://www.cnblogs.com/zhuxiansheng/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">大话设计模式</a></li></ul><hr><h1 id="设计模式串联"><a href="#设计模式串联" class="headerlink" title="设计模式串联"></a><strong>设计模式串联</strong></h1><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1.png" alt=""></p><hr><h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a><strong>创建型</strong></h1><h2 id="单例模式（Singleton）"><a href="#单例模式（Singleton）" class="headerlink" title="单例模式（Singleton）"></a><strong>单例模式（Singleton）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2.png" alt=""></p><blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>有个人自己开了一家餐厅，这家餐厅只有一个老板。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// InputMethodManager 用于控制显示或隐藏输入法面板</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">InputMethodManager</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> InputMethodManager sInstance;</div><div class="line">    </div><div class="line">    InputMethodManager(IInputMethodManager service, Looper looper) &#123;</div><div class="line">        mService = service;</div><div class="line">        mMainLooper = looper;</div><div class="line">        mH = <span class="keyword">new</span> H(looper);</div><div class="line">        mIInputContext = <span class="keyword">new</span> ControlledInputConnectionWrapper(looper, mDummyInputConnection, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> InputMethodManager <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (InputMethodManager.class) &#123;</div><div class="line">            <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    sInstance = <span class="keyword">new</span> InputMethodManager(Looper.getMainLooper());</div><div class="line">                &#125; <span class="keyword">catch</span> (ServiceNotFoundException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> sInstance;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a><strong>饿汉式</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a><strong>懒汉式(线程不安全)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="懒汉式-线程安全"><a href="#懒汉式-线程安全" class="headerlink" title="懒汉式(线程安全)"></a><strong>懒汉式(线程安全)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="懒汉式-双重校验锁，线程不一定安全"><a href="#懒汉式-双重校验锁，线程不一定安全" class="headerlink" title="懒汉式(双重校验锁，线程不一定安全)"></a><strong>懒汉式(双重校验锁，线程不一定安全)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span>(SingleTon.class) &#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="懒汉式-双重校验锁，线程安全"><a href="#懒汉式-双重校验锁，线程安全" class="headerlink" title="懒汉式(双重校验锁，线程安全)"></a><strong>懒汉式(双重校验锁，线程安全)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span></span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingleTon mSingleTon = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>)&#123;</div><div class="line"><span class="keyword">synchronized</span>(SingleTon.class) &#123;</div><div class="line"><span class="keyword">if</span>(mSingleTon == <span class="keyword">null</span>) &#123;</div><div class="line">mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a><strong>枚举</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> SingleTon &#123;</div><div class="line">SINGLE</div><div class="line">&#125;</div><div class="line"></div><div class="line">SingleTon.SINGLE</div></pre></td></tr></table></figure><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a><strong>静态内部类</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line"><span class="keyword">static</span> SingleTon mSingleTon = <span class="keyword">new</span> SingleTon();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> InnerClass.mSingleTon;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="建造者模式（Builder）"><a href="#建造者模式（Builder）" class="headerlink" title="建造者模式（Builder）"></a><strong>建造者模式（Builder）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png" alt=""></p><blockquote><p>将一个复杂的对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。<br>老板打算在招聘网站上招人，一般就是填写完招人要求后，网站返回符合要求的人。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 招人 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> 年龄;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> 性别;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> 技能;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> 招人(招人要求 要求) &#123;</div><div class="line">        <span class="keyword">this</span>.年龄 = 要求.年龄;</div><div class="line">        <span class="keyword">this</span>.性别 = 要求.性别;</div><div class="line">        <span class="keyword">this</span>.技能 = 要求.技能;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> get年龄() &#123;</div><div class="line">        <span class="keyword">return</span> 年龄;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> get性别() &#123;</div><div class="line">        <span class="keyword">return</span> 性别;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> get技能() &#123;</div><div class="line">        <span class="keyword">return</span> 技能;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 招人要求 </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> 年龄;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> 性别;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> 技能;</div><div class="line">        </div><div class="line">        <span class="keyword">public</span> 招人要求(<span class="keyword">int</span> 技能) &#123;</div><div class="line">            <span class="keyword">this</span>.技能 = 技能;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">public</span> 招人要求 set年龄(<span class="keyword">int</span> 年龄) &#123;</div><div class="line">            <span class="keyword">this</span>.年龄 = 年龄;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">public</span> 招人要求 set性别(<span class="keyword">int</span> 性别) &#123;</div><div class="line">            <span class="keyword">this</span>.性别 = 性别;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">public</span> 招人 开始查找() &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> 招人(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        招人 服务员 = <span class="keyword">new</span> 招人.招人要求(辅助点餐)</div><div class="line">            .set年龄(<span class="number">60</span>以下)</div><div class="line">            .set性别(男女均可)</div><div class="line">            .开始查找();</div><div class="line">        招人 厨师 = <span class="keyword">new</span> 招人.招人要求(做菜)</div><div class="line">            .set年龄(<span class="number">60</span>以下)</div><div class="line">            .set性别(男女均可)</div><div class="line">            .开始查找();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="工厂方法模式（FactoryMethod）"><a href="#工厂方法模式（FactoryMethod）" class="headerlink" title="工厂方法模式（FactoryMethod）"></a><strong>工厂方法模式（FactoryMethod）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" alt=""></p><blockquote><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。<br>老板可能从某联上招人，也可能从某勾上招人，某联使用的就是某联的数据库，某勾使用的是某勾的数据库。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 服务员 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 辅助点餐();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某联人才库中的服务员 <span class="keyword">implements</span> 服务员 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 辅助点餐() &#123;</div><div class="line">        System.out.println(<span class="string">"某联人才库中的服务员辅助点餐!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某勾人才库中的服务员 <span class="keyword">implements</span> 服务员 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 辅助点餐() &#123;</div><div class="line">        System.out.println(<span class="string">"某勾人才库中的服务员辅助点餐!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 厨师 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 做菜();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某联人才库中的厨师 <span class="keyword">implements</span> 厨师 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 做菜() &#123;</div><div class="line">        System.out.println(<span class="string">"某联人才库中的厨师做菜!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某勾人才库中的厨师 <span class="keyword">implements</span> 厨师 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 做菜() &#123;</div><div class="line">        System.out.println(<span class="string">"某勾人才库中的厨师做菜!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 招聘网站 </span>&#123;</div><div class="line">    List&lt;员工&gt; 招聘();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某联招聘网站 <span class="keyword">implements</span> 招聘网站 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;员工&gt; 招聘() &#123;</div><div class="line">        List&lt;员工&gt; 员工们 = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</div><div class="line">        员工们.add(<span class="keyword">new</span> 某联人才库中的服务员());</div><div class="line">        员工们.add(<span class="keyword">new</span> 某联人才库中的厨师());</div><div class="line">        <span class="keyword">return</span> 员工们;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某勾招聘网站 <span class="keyword">implements</span> 招聘网站 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;员工&gt; 招聘() &#123;</div><div class="line">        List&lt;员工&gt; 员工们 = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</div><div class="line">        员工们.add(<span class="keyword">new</span> 某勾人才库中的服务员());</div><div class="line">        员工们.add(<span class="keyword">new</span> 某勾人才库中的厨师());</div><div class="line">        <span class="keyword">return</span> 员工们;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 某勾招聘网站().招聘();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="抽象工厂模式（AbstractFactory）"><a href="#抽象工厂模式（AbstractFactory）" class="headerlink" title="抽象工厂模式（AbstractFactory）"></a><strong>抽象工厂模式（AbstractFactory）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5.png" alt=""></p><blockquote><p>为创建一组相关或者是相互依赖的对象提供一个接口，而不需要指定他们的具体实现类。<br>招聘网站千千万找不过来，老板决定让猎头找。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 猎头招聘网站 <span class="keyword">implements</span> 招聘网站 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;员工&gt; 招聘() &#123;</div><div class="line">        List&lt;员工&gt; 员工们 = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</div><div class="line">        员工们.add(<span class="keyword">new</span> 某联人才库中的服务员());</div><div class="line">        员工们.add(<span class="keyword">new</span> 某勾人才库中的厨师());</div><div class="line">        <span class="keyword">return</span> 员工们;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 猎头招聘网站().招聘();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="原型模式（Prototype）"><a href="#原型模式（Prototype）" class="headerlink" title="原型模式（Prototype）"></a><strong>原型模式（Prototype）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6.png" alt=""></p><blockquote><p>创建对象的种类，并通过拷贝这些原型创建新的对象。<br>餐厅经营得不错，一段时间后，老板开了一家分店，又招了一批服务员和厨师，但是老板还是一个。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 餐厅 <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> 老板 唯一的老板;</div><div class="line">    <span class="keyword">private</span> List&lt;服务员&gt; 服务员们;</div><div class="line">    <span class="keyword">private</span> List&lt;厨师&gt; 厨师们;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> set老板(老板 唯一的老板) &#123;</div><div class="line">        <span class="keyword">this</span>.唯一的老板 = 唯一的老板;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 老板 get老板() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.唯一的老板;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 餐厅 clone() <span class="keyword">throws</span> CloneNotSupportedException &#123;</div><div class="line">        餐厅 分店 = (餐厅)<span class="keyword">super</span>.clone();</div><div class="line">        分店.set老板(唯一的老板);</div><div class="line">        <span class="keyword">return</span> 分店;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> String 花名册() &#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        builder.append(<span class="string">"老板:"</span> + 唯一的老板)</div><div class="line">            .append(<span class="string">"服务员们:"</span> + 服务员们)</div><div class="line">            .append(<span class="string">"厨师们:"</span> + 厨师们);</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        总店.clone().员工花名册();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><h1 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a><strong>结构型</strong></h1><h2 id="适配器模式（Adapter）"><a href="#适配器模式（Adapter）" class="headerlink" title="适配器模式（Adapter）"></a><strong>适配器模式（Adapter）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7.png" alt=""></p><blockquote><p>将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作。<br>老板在某聘上招人，因为某聘和某联合作，所以某聘直接使用某联的人才库。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 某聘招聘网站 <span class="keyword">implements</span> 招聘网站 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> List&lt;员工&gt; 招聘() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> 某联招聘网站().招聘();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 某聘招聘网站().招聘();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="装饰模式（Decorator）"><a href="#装饰模式（Decorator）" class="headerlink" title="装饰模式（Decorator）"></a><strong>装饰模式（Decorator）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8.png" alt=""></p><blockquote><p>在不必改变原类文件和使用继承的情况下，动态地扩展一个对象的功能。<br>当服务员请假时，厨师可以兼任服务员的工作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 厨师 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 做菜();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 可以兼任工作的厨师 <span class="keyword">implements</span> 厨师 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 厨师 某个厨师;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 可以兼任工作的厨师(厨师 某个厨师) &#123;</div><div class="line">        <span class="keyword">this</span>.某个厨师 = 某个厨师;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 做菜() &#123;</div><div class="line">        某个厨师.做菜();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 额外工作();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 可以兼任服务员的厨师 <span class="keyword">extends</span> 可以兼任工作的厨师 </span>&#123;</div><div class="line">    <span class="keyword">public</span> 可以兼任服务员的厨师(厨师 某个厨师) &#123;</div><div class="line">        <span class="keyword">super</span>(某个厨师);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 额外工作() &#123;</div><div class="line">        System.out.println(<span class="string">"兼任服务员辅助点餐!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        可以兼任工作的厨师 厨师 = <span class="keyword">new</span> 可以兼任服务员的厨师(<span class="keyword">new</span> 某联人才库中的厨师());</div><div class="line">        厨师.做菜();</div><div class="line">        厨师.额外工作();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="代理模式（Proxy）"><a href="#代理模式（Proxy）" class="headerlink" title="代理模式（Proxy）"></a><strong>代理模式（Proxy）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9.png" alt=""></p><blockquote><p>调用原有的方法，且对产生的结果进行控制。<br>由于洗菜工还未入职，所以厨师做菜前，需要先洗菜。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 厨师 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 做菜();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 需要承担额外工作的厨师 <span class="keyword">implements</span> 厨师 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 厨师 某个厨师;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 需要承担额外工作的厨师(厨师 某个厨师) &#123;</div><div class="line">        <span class="keyword">this</span>.某个厨师 = 某个厨师;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 做菜() &#123;</div><div class="line">        额外工作();</div><div class="line">        某个厨师.做菜();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 额外工作();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 需要洗菜的厨师 <span class="keyword">extends</span> 需要承担额外工作的厨师 </span>&#123;</div><div class="line">    <span class="keyword">public</span> 需要洗菜的厨师(厨师 某个厨师) &#123;</div><div class="line">        <span class="keyword">super</span>(某个厨师);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 额外工作() &#123;</div><div class="line">        System.out.println(<span class="string">"厨师洗菜!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 需要洗菜的厨师(<span class="keyword">new</span> 某联人才库中的厨师()).做菜();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="组合模式（Composite）"><a href="#组合模式（Composite）" class="headerlink" title="组合模式（Composite）"></a><strong>组合模式（Composite）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10.png" alt=""></p><blockquote><p>将对象组合成树形结构以表示“部分-整体”的层次结构。<br>建立管理层，且新店开业后归总店管理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 客服部 <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Component&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        list.add(component);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        list.remove(component);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 技术部 <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Component&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        list.add(component);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        list.remove(component);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 餐厅 <span class="keyword">implements</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Component&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        list.add(component);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        list.remove(component);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        餐厅 总店 = 总店.getInstance();</div><div class="line">        总店.add(<span class="keyword">new</span> 客服部());</div><div class="line">        总店.add(<span class="keyword">new</span> 技术部());</div><div class="line">        </div><div class="line">        餐厅 分店 = <span class="keyword">new</span> 餐厅();</div><div class="line">        分店.add(<span class="keyword">new</span> 客服部());</div><div class="line">        分店.add(<span class="keyword">new</span> 技术部());</div><div class="line">        </div><div class="line">        总店.add(分店);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="桥接模式（Bridge）"><a href="#桥接模式（Bridge）" class="headerlink" title="桥接模式（Bridge）"></a><strong>桥接模式（Bridge）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F11.png" alt=""></p><blockquote><p>把事物和其具体实现分开，使他们可以各自独立的变化。<br>老板想开发点餐软件，分为服务端和客户端，分别交给总店和分店的技术部实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 点餐软件 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 开发软件();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 服务端软件 <span class="keyword">implements</span> 点餐软件 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开发软件() &#123;</div><div class="line">        System.out.println(<span class="string">"开发服务端软件！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 客户端软件 <span class="keyword">implements</span> 点餐软件 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开发软件() &#123;</div><div class="line">        System.out.println(<span class="string">"开发客户端软件！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 点餐软件专项组 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 点餐软件 软件;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> set软件(点餐软件 软件) &#123;</div><div class="line">        <span class="keyword">this</span>.软件 = 软件;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> get软件() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.一个软件;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 开始开发();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 总店的技术部 <span class="keyword">extends</span> 点餐软件专项组 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开始开发() &#123;</div><div class="line">        System.out.println(<span class="string">"总店开始安排人手！"</span>);</div><div class="line">        get软件().开发软件();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 分店的技术部 <span class="keyword">extends</span> 点餐软件专项组 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开始开发() &#123;</div><div class="line">        System.out.println(<span class="string">"分店开始安排人手！"</span>);</div><div class="line">        get软件().开发软件();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        点餐软件专项组 总店的专项组 = <span class="keyword">new</span> 总店的技术部();</div><div class="line">        总店的专项组.set软件(<span class="keyword">new</span> 服务端软件());</div><div class="line">        总店的专项组.开始开发();</div><div class="line">        </div><div class="line">        点餐软件专项组 分店的专项组 = <span class="keyword">new</span> 分店的技术部();</div><div class="line">        分店的专项组.set软件(<span class="keyword">new</span> 客户端软件());</div><div class="line">        分店的专项组.开始开发();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="外观模式（Facade）"><a href="#外观模式（Facade）" class="headerlink" title="外观模式（Facade）"></a><strong>外观模式（Facade）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12.png" alt=""></p><blockquote><p>避免几个类之间相互持有实例，将这几个类的实例放到同一个类中。<br>餐厅来了一个大客户，老板让一个大客户经理招待客户。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 司机 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开车() &#123;</div><div class="line">        System.out.println(<span class="string">"司机开车！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 厨师 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 做饭() &#123;</div><div class="line">        System.out.println(<span class="string">"厨师做饭！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 技师 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 搓澡() &#123;</div><div class="line">        System.out.println(<span class="string">"技师搓澡！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 大客户经理 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 招待客户() &#123;</div><div class="line">        <span class="keyword">new</span> 司机().开车();</div><div class="line">        <span class="keyword">new</span> 厨师().做饭();</div><div class="line">        <span class="keyword">new</span> 技师().搓澡();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 大客户经理().招待客户();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="享元模式（Flyweight）"><a href="#享元模式（Flyweight）" class="headerlink" title="享元模式（Flyweight）"></a><strong>享元模式（Flyweight）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13.png" alt=""></p><blockquote><p>将大量的小的重复使用的对象统一管理起来，避免用户多次创建重复对象造成的资源浪费。<br>大客户又来了，老板会优先安排上次的大客户经理，但是如果上次的大客户经理正忙，就会重新安排大客户经理招待客户。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 客服部 </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, 大客户经理&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 大客户经理 get大客户经理(String 大客户ID) &#123;</div><div class="line">        大客户经理 指定大客户经理 = map.get(大客户ID);</div><div class="line">        <span class="keyword">if</span>(指定大客户经理不存在 || 指定大客户经理正忙) &#123;</div><div class="line">            指定大客户经理 = 重新安排大客户经理();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> 指定大客户经理;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 客服部().get大客户经理(大客户ID).招待客户();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr><h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a><strong>行为型</strong></h1><h2 id="观察者模式（Observer）"><a href="#观察者模式（Observer）" class="headerlink" title="观察者模式（Observer）"></a><strong>观察者模式（Observer）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F14.png" alt=""></p><blockquote><p>当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化。<br>老板进行面试，面试结束后通知参与面试的人面试结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 面试者 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 参加面试();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 校招人员 <span class="keyword">implements</span> 面试者 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 参加面试() &#123;</div><div class="line">        System.out.println(<span class="string">"校招人员参加面试"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 社招人员 <span class="keyword">implements</span> 面试者 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 参加面试() &#123;</div><div class="line">        System.out.println(<span class="string">"社招人员参加面试"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 面试官 </span>&#123;</div><div class="line">    <span class="keyword">void</span> add面试者(面试者 一个面试者);</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> notify面试者(面试者 一个面试者);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 技术部面试官 <span class="title">Implememnts</span> 面试官 </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;面试者&gt; 所有面试者 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> add面试者(面试者 一个面试者) &#123;</div><div class="line">        所有面试官.add(一个面试官);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> notify面试者(面试者 确定录用者) &#123;</div><div class="line">        <span class="keyword">for</span>(面试者 一个面试者 : 所有面试者) &#123;</div><div class="line">            <span class="keyword">if</span>(一个面试者.equals(确定录用者)) &#123;</div><div class="line">                System.out.println(<span class="string">"发Offer"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                System.out.println(<span class="string">"发未通过面试通知"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        面试官 一个面试官 = <span class="keyword">new</span> 技术部面试官();</div><div class="line">        </div><div class="line">        面试者 一个面试者 = <span class="keyword">new</span> 校招人员();</div><div class="line">        一个面试官.add(一个面试者);</div><div class="line">        一个面试官.add(<span class="keyword">new</span> 校招人员());</div><div class="line">        一个面试官.add(<span class="keyword">new</span> 校招人员());</div><div class="line">        一个面试官.add(<span class="keyword">new</span> 社招人员());</div><div class="line">        </div><div class="line">        一个面试官.notify面试者(一个面试者);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="访问者模式（Visitor）"><a href="#访问者模式（Visitor）" class="headerlink" title="访问者模式（Visitor）"></a><strong>访问者模式（Visitor）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F15.png" alt=""></p><blockquote><p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。<br>客人排队就餐，叫到号后可以进店就餐。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 吃饭的地 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 有空位需带人(排队的人 客户);</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> 服务员安排就餐位置(排队的人 客户);</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> 制作食物(排队的人 客户);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 餐厅 <span class="title">implememnts</span> 吃饭的地 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 有空位需带人(排队的人 客户) &#123;</div><div class="line">        客户.展示排队的号(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 服务员安排就餐位置(排队的人 客户) &#123;</div><div class="line">        客户.点餐(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 制作食物(排队的人 客户) &#123;</div><div class="line">        System.out.println(<span class="string">"餐厅开始制作食物了"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 排队的人 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 展示排队的号(吃饭的地 餐厅);</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> 点餐(吃饭的地 餐厅);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 客户 <span class="title">implememnts</span> 排队的人 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> 号码;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> 展示排队的号(吃饭的地 餐厅) &#123;</div><div class="line">        餐厅.服务员安排就餐位置(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> 点餐(吃饭的地 餐厅) &#123;</div><div class="line">        餐厅.制作食物(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 服务员 </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;排队的人&gt; 列表 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> 吃饭的地 餐厅;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 服务员(吃饭的地 餐厅) &#123;</div><div class="line">        <span class="keyword">this</span>.餐厅 = 餐厅;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> add客户(排队的人 客户) &#123;</div><div class="line">        列表.add客户(客户);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开始叫号() &#123;</div><div class="line">        <span class="keyword">for</span>(排队的人 客户 : 列表) &#123;</div><div class="line">            餐厅.有空位需带人(客户);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        服务员 一个服务员 = <span class="keyword">new</span> 服务员(<span class="keyword">new</span> 餐厅());</div><div class="line">        一个服务员.添加排队的人(<span class="keyword">new</span> 客户());</div><div class="line">        一个服务员.添加排队的人(<span class="keyword">new</span> 客户());</div><div class="line">        一个服务员.添加排队的人(<span class="keyword">new</span> 客户());</div><div class="line">        </div><div class="line">        一个服务员.开始叫号();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="迭代器模式（Iterator）"><a href="#迭代器模式（Iterator）" class="headerlink" title="迭代器模式（Iterator）"></a><strong>迭代器模式（Iterator）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F16.png" alt=""></p><blockquote><p>老板助理按照员工花名册依次叫员工去老板办公室领工资。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 辅助老板发工资的人 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 看还有没有人没领工资();</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> 叫员工去领工资();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 老板助理 <span class="keyword">implements</span> 辅助老板发工资的人 </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; 员工花名册 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> 当前叫过的人的数量 = <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 老板助理(花名册 员工花名册) &#123;</div><div class="line">        <span class="keyword">this</span>.员工花名册 = 员工花名册;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 看还有没有人没领工资() &#123;</div><div class="line">        <span class="keyword">return</span> 当前叫过的人的数量 &lt; 员工花名册上的人数;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 叫员工去领工资() &#123;</div><div class="line">        System.out.println(<span class="string">"叫员工去领工资!"</span>);</div><div class="line">        当前叫过的人的数量++;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        辅助老板发工资的人 老板助理 = <span class="keyword">new</span> 老板助理(员工花名册);</div><div class="line">        <span class="keyword">while</span>(老板助理.看还有没有人没领工资()) &#123;</div><div class="line">            老板助理.叫员工去领工资();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="模板方法模式（TemplateMethod）"><a href="#模板方法模式（TemplateMethod）" class="headerlink" title="模板方法模式（TemplateMethod）"></a><strong>模板方法模式（TemplateMethod）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F17.png" alt=""></p><blockquote><p>开发软件前先确定架构。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 项目 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 开始开发() &#123;</div><div class="line">        确定架构();</div><div class="line">        System.out.println(<span class="string">"开始开发"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 确定架构();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 点餐软件 <span class="keyword">extends</span> 项目 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 确定架构() &#123;</div><div class="line">        System.out.println(<span class="string">"确定架构"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 点餐软件().开始开发();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="中介者模式（Mediator）"><a href="#中介者模式（Mediator）" class="headerlink" title="中介者模式（Mediator）"></a><strong>中介者模式（Mediator）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F18.png" alt=""></p><blockquote><p>餐厅上线了外卖业务，订餐人向餐厅要一杯咖啡，餐厅委托骑手送咖啡。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 平台 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 转发消息();</div><div class="line">    </div><div class="line">    <span class="keyword">void</span> set送餐者();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 外卖业务 <span class="keyword">implements</span> 平台 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> 客户端 订餐者;</div><div class="line">    <span class="keyword">private</span> 客户端 送餐者;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 订单(客户端 订餐者) &#123;</div><div class="line">        <span class="keyword">this</span>.订餐者 = 订餐者;</div><div class="line">        订餐者.set订单(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> set送餐者(客户端 送餐者) &#123;</div><div class="line">        <span class="keyword">this</span>.送餐者 = 送餐者;</div><div class="line">        送餐者.set订单(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 转发消息(String 消息, 客户端 用户) &#123;</div><div class="line">        <span class="keyword">if</span>(订餐者.equals(用户)) &#123;</div><div class="line">            送餐者.接收消息(消息);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            订餐者.接收消息(消息);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 客户端 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 平台 外卖平台;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> set平台(平台 外卖平台) &#123;</div><div class="line">        <span class="keyword">this</span>.外卖平台 = 外卖平台;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 发送消息(String 消息) &#123;</div><div class="line">        外卖平台.转发消息(消息, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接收消息(String 消息) &#123;</div><div class="line">        System.out.println(<span class="string">"接收消息:"</span> + 消息);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        客户端 订餐者 = <span class="keyword">new</span> 客户端();</div><div class="line">        客户端 送餐者 = <span class="keyword">new</span> 客户端();</div><div class="line"></div><div class="line">        平台 外卖平台 = <span class="keyword">new</span> 外卖业务(订餐者);</div><div class="line">        外卖平台.set送餐者(送餐者);</div><div class="line">        </div><div class="line">        订餐者.发送消息(<span class="string">"我要一杯咖啡"</span>);</div><div class="line">        送餐者.发送消息(<span class="string">"已取，马上为您送到"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="备忘录模式（Memento）"><a href="#备忘录模式（Memento）" class="headerlink" title="备忘录模式（Memento）"></a><strong>备忘录模式（Memento）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F19.png" alt=""></p><blockquote><p>主要目的是保存一个对象的某个状态，以便在适当的时候恢复对象。<br>老板规定分店每月保留10万用于平时开销，盈利部分划归总店，亏损部分总店补齐。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 餐厅 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 账上资金 资金;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> 分店每月分配额度 额度;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 餐厅(<span class="keyword">long</span> 初始金额) &#123;</div><div class="line">        账上资金 = <span class="keyword">new</span> 账上资金(初始金额);</div><div class="line">        额度 = <span class="keyword">new</span> 分店每月分配额度(账上资金);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> 买菜(<span class="keyword">long</span> 金额) &#123;</div><div class="line">        资金 -= 金额;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> 卖菜(<span class="keyword">long</span> 金额) &#123;</div><div class="line">        资金 += 金额;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> 月末结算() &#123;</div><div class="line">        System.out.println(<span class="string">"当月收支："</span> + (资金.get资金() - 额度.get额度()));</div><div class="line">        账上资金 = 额度.get额度();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> get资金() &#123;</div><div class="line">        <span class="keyword">return</span> 资金.get资金();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 账上资金 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> 资金;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 账上资金(<span class="keyword">long</span> 资金) &#123;</div><div class="line">        <span class="keyword">this</span>.资金 = 资金;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 花钱(<span class="keyword">long</span> 金额) &#123;</div><div class="line">        <span class="keyword">this</span>.资金 -= 金额;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 赚钱(<span class="keyword">long</span> 金额) &#123;</div><div class="line">        <span class="keyword">this</span>.资金 += 金额;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> get资金() &#123;</div><div class="line">        <span class="keyword">return</span> 资金;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 分店每月分配额度 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> 额度;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 分店每月分配额度(账上资金 资金) &#123;</div><div class="line">        <span class="keyword">this</span>.额度 = 资金.get资金();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">long</span> get额度() &#123;</div><div class="line">        <span class="keyword">return</span> 额度;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        餐厅 分店 = <span class="keyword">new</span> 餐厅(<span class="number">100000</span>);</div><div class="line">        </div><div class="line">        分店.买菜(<span class="number">1000</span>);</div><div class="line">        分店.卖菜(<span class="number">1500</span>);</div><div class="line">        分店.get资金();</div><div class="line">        </div><div class="line">        分店.月末结算();</div><div class="line">        分店.get资金();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="状态模式（State）"><a href="#状态模式（State）" class="headerlink" title="状态模式（State）"></a><strong>状态模式（State）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F20.png" alt=""></p><blockquote><p>可以通过改变状态来获得不同的行为。<br>建立员工审批制度，员工先向直属上级发起审批请求，待审批通过后，再向店长发起审批请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 审批 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 决定是否通过审批(审批表 一个审批表);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 审批表 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 审批 审批流程 = <span class="keyword">new</span> 部门经理审批();</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 走审批流程() &#123;</div><div class="line">        审批流程.决定是否通过审批(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 转到上级审批(审批 上级审批) &#123;</div><div class="line">        审批流程 = 上级审批;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> 审批 get审批() &#123;</div><div class="line">        <span class="keyword">return</span> 审批流程;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 部门经理审批 <span class="keyword">implements</span> 审批 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 决定是否通过审批(审批表 一个审批表) &#123;</div><div class="line">        System.out.println(<span class="string">"部门经理通过审批"</span>);</div><div class="line">        一个审批表.转到上级审批(<span class="keyword">new</span> 店长审批());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 店长审批 <span class="keyword">implements</span> 审批 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 决定是否通过审批(审批表 一个审批表) &#123;</div><div class="line">        System.out.println(<span class="string">"店长通过审批"</span>);</div><div class="line">        一个审批表.转到上级审批(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        审批表 一个审批表 = <span class="keyword">new</span> 审批表();</div><div class="line">        <span class="keyword">while</span>(一个审批表.get审批() != <span class="keyword">null</span>) &#123;</div><div class="line">            一个审批表.走审批流程();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="策略模式（Strategy）"><a href="#策略模式（Strategy）" class="headerlink" title="策略模式（Strategy）"></a><strong>策略模式（Strategy）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F21.png" alt=""></p><blockquote><p>定义一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。<br>新店开业大酬宾，店长推出各种优惠活动：满200减50、老客户全单打9折、新客户全单打8折，优惠不能同时享。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 优惠活动 </span>&#123;</div><div class="line">    <span class="keyword">float</span> get帐单金额();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 账单 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> 原价;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> 优惠活动 一个优惠活动;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> 账单(<span class="keyword">float</span> 原价) &#123;</div><div class="line">        <span class="keyword">this</span>.原价 = 原价;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> set优惠活动(优惠活动 一个优惠活动) &#123;</div><div class="line">        <span class="keyword">this</span>.一个优惠活动 = 一个优惠活动;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> get帐单金额() &#123;</div><div class="line">        <span class="keyword">if</span>(一个优惠活动 == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> 原价;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> 一个优惠活动.get帐单金额();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> 满200减50 <span class="keyword">implements</span> 优惠活动 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> 原价;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 满<span class="number">200</span>减<span class="number">50</span>(<span class="keyword">float</span> 原价) &#123;</div><div class="line">        <span class="keyword">this</span>.原价 = 原价;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> get帐单金额() &#123;</div><div class="line">        <span class="keyword">return</span> 原价 &gt;= <span class="number">200</span> ? 原价 - <span class="number">50</span> : 原价;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> 老客户全单打9折 <span class="keyword">implements</span> 优惠活动 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> 原价;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 老客户全单打<span class="number">9</span>折(<span class="keyword">float</span> 原价) &#123;</div><div class="line">        <span class="keyword">this</span>.原价 = 原价;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> get帐单金额() &#123;</div><div class="line">        <span class="keyword">return</span> 原价 * <span class="number">0.9f</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> 新客户全单打8折 <span class="keyword">implements</span> 优惠活动 </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> 原价;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 新客户全单打<span class="number">8</span>折(<span class="keyword">float</span> 原价) &#123;</div><div class="line">        <span class="keyword">this</span>.原价 = 原价;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">float</span> get帐单金额() &#123;</div><div class="line">        <span class="keyword">return</span> 原价 * <span class="number">0.8f</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        账单 一个账单 = <span class="keyword">new</span> 账单(<span class="number">100</span>);</div><div class="line">        <span class="keyword">float</span> 不参加优惠活动的金额 = 一个账单.get帐单金额();</div><div class="line">        <span class="keyword">float</span> 参加满<span class="number">200</span>减<span class="number">50</span>的金额 = 一个账单.get帐单金额(一个账单.set优惠活动(<span class="keyword">new</span> 满<span class="number">200</span>减<span class="number">50</span>(<span class="number">100</span>)));</div><div class="line">        <span class="keyword">float</span> 参加老客户全单打<span class="number">9</span>折的金额 = 一个账单.get帐单金额(一个账单.set优惠活动(<span class="keyword">new</span> 老客户全单打<span class="number">9</span>折(<span class="number">100</span>)));</div><div class="line">        <span class="keyword">float</span> 参加新客户全单打<span class="number">8</span>折的金额 = 一个账单.get帐单金额(一个账单.set优惠活动(<span class="keyword">new</span> 新客户全单打<span class="number">8</span>折(<span class="number">100</span>)));</div><div class="line">        <span class="keyword">float</span> 最优惠金额 = sort(不参加优惠活动的金额, 参加老客户全单打<span class="number">9</span>折的金额, 参加老客户全单打<span class="number">9</span>折的金额, 参加新客户全单打<span class="number">8</span>折的金额);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="职责链模式（ChainOfResponsibility）"><a href="#职责链模式（ChainOfResponsibility）" class="headerlink" title="职责链模式（ChainOfResponsibility）"></a><strong>职责链模式（ChainOfResponsibility）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F22.png" alt=""></p><blockquote><p>将接受请求的对象连成一条线链并且沿着这条链传递请求，直到有一个对象能够处理它为止。<br>有记者来采访，找到了保安，保安知道自己不能接受采访，把记者带给保安队长，保安队长也知道自己不能接受采访，把记者带给店长。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 餐厅职员 </span>&#123;</div><div class="line"><span class="keyword">protected</span> 餐厅职员 上级管理者;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> set上级管理者(餐厅职员 一个餐厅职员) &#123;</div><div class="line"><span class="keyword">this</span>.上级管理者 = 一个管理者;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> get上级管理者() &#123;</div><div class="line">    <span class="keyword">return</span> 上级管理者;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> 接受采访();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 保安 <span class="keyword">extends</span> 餐厅职员 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接受采访() &#123;</div><div class="line">        <span class="keyword">if</span> (保安有接受采访权限) &#123;</div><div class="line">            System.out.println(<span class="string">"保安接受采访！"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (有上级管理者) &#123;</div><div class="line">            get上级管理者().接受采访();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 保安队长 <span class="keyword">extends</span> 餐厅职员 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接受采访() &#123;</div><div class="line">        <span class="keyword">if</span> (保安队长有接受采访权限) &#123;</div><div class="line">            System.out.println(<span class="string">"保安队长接受采访！"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (有上级管理者) &#123;</div><div class="line">            get上级管理者().接受采访();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 店长 <span class="keyword">extends</span> 餐厅职员 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接受采访() &#123;</div><div class="line">        System.out.println(<span class="string">"店长接受采访！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        餐厅职员 一个保安 = <span class="keyword">new</span> 保安();</div><div class="line">        餐厅职员 一个保安队长 = <span class="keyword">new</span> 保安队长();</div><div class="line">        餐厅职员 一个店长 = <span class="keyword">new</span> 店长();</div><div class="line">        </div><div class="line">        一个保安.set上级管理者(一个保安队长);</div><div class="line">        一个保安队长.set上级管理者(一个店长);</div><div class="line">        </div><div class="line">        一个保安.接受采访();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="命令模式（Command）"><a href="#命令模式（Command）" class="headerlink" title="命令模式（Command）"></a><strong>命令模式（Command）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F23.png" alt=""></p><blockquote><p>命令模式的目的就是达到命令的发出者和执行者之间解耦，实现请求和执行分开。<strong>与责任链模式不同的是执行者是确定的，中途命令不能被处理，只能被传递。</strong><br>又有记者来了，保安想起来上次是店长接受的采访，所以就知道了只要有记者来采访，就直接找店长。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 预案 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 有记者来访();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 公关预案 <span class="keyword">implements</span> 预案 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 店长 一个店长;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 公关部(店长 一个店长) &#123;</div><div class="line">        <span class="keyword">this</span>.一个店长 = 一个店长;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 有记者来访() &#123;</div><div class="line">        一个店长.接受采访();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 店长 </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 接受采访() &#123;</div><div class="line">        System.out.println(<span class="string">"店长接受采访!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 保安 </span>&#123;</div><div class="line">    <span class="keyword">private</span> 公关预案 一个公关预案;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> 保安(公关预案 一个公关预案) &#123;</div><div class="line">        <span class="keyword">this</span>.一个公关预案 = 一个公关预案;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 发现记者来了() &#123;</div><div class="line">        一个公关预案.有记者来访();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        店长 一个店长 = <span class="keyword">new</span> 店长();</div><div class="line">        公关预案 一个公关预案 = <span class="keyword">new</span> 公关预案(一个店长);</div><div class="line">        保安 一个保安 = <span class="keyword">new</span> 保安(一个公关预案);</div><div class="line">        一个保安.发现记者来了();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h2 id="解释器模式（Interpreter）"><a href="#解释器模式（Interpreter）" class="headerlink" title="解释器模式（Interpreter）"></a><strong>解释器模式（Interpreter）</strong></h2><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F24.png" alt=""></p><blockquote><p>在系统中如果某一特定类型的问题在频繁的发生，此时我们就有必要将这些问题的实例表述为一个语言中句子，因此可以构建一个解释器，然后利用该解释器来解释这些句子来解决这些问题。<br>两个记者分别来自不同的报社，一个是经济报社的，一个是美食报社的，虽然店长接受采访时和他们说了相同的内容，但是两个记者分别从两个角度完成了采访后稿件。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 采访的人 </span>&#123;</div><div class="line">    <span class="keyword">void</span> 写采访后的稿件(采访的内容 一次采访的内容);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 经济报社记者 <span class="keyword">implements</span> 采访的人 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 写采访后的稿件(采访的内容 一次采访的内容) &#123;</div><div class="line">        System.out.println(<span class="string">"从经济角度写采访后的稿件!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 美食报社记者 <span class="keyword">implements</span> 采访的人 </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 写采访后的稿件(采访的内容 一次采访的内容) &#123;</div><div class="line">        System.out.println(<span class="string">"从美食角度写采访后的稿件!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>测试<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> 美食报社记者().写采访后的稿件(店长接受采访时说的话);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ww
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 张量排序</title>
    <link href="http://www.weichao.io/2019/05/28/TensorFlow-%E5%BC%A0%E9%87%8F%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.weichao.io/2019/05/28/TensorFlow-张量排序/</id>
    <published>2019-05-28T01:45:13.000Z</published>
    <updated>2019-05-29T01:46:00.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="sort、argsort"><a href="#sort、argsort" class="headerlink" title="sort、argsort"></a><strong>sort、argsort</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">10</span>)</div><div class="line">arr1 = tf.random.shuffle(arr)</div><div class="line">arr21 = tf.sort(arr1, direction=<span class="string">'DESCENDING'</span>)</div><div class="line">arr22 = tf.argsort(arr1, direction=<span class="string">'DESCENDING'</span>)</div><div class="line">arr31 = tf.sort(arr1, direction=<span class="string">'ASCENDING'</span>)</div><div class="line">arr32 = tf.argsort(arr1, direction=<span class="string">'ASCENDING'</span>)</div><div class="line">print(arr1) <span class="comment"># tf.Tensor([8 5 3 2 4 0 7 1 9 6], shape=(10,), dtype=int32)</span></div><div class="line">print(arr21) <span class="comment"># tf.Tensor([9 8 7 6 5 4 3 2 1 0], shape=(10,), dtype=int32)</span></div><div class="line">print(arr22) <span class="comment"># tf.Tensor([8 0 6 9 1 4 2 3 7 5], shape=(10,), dtype=int32)</span></div><div class="line">print(arr31) <span class="comment"># tf.Tensor([0 1 2 3 4 5 6 7 8 9], shape=(10,), dtype=int32)</span></div><div class="line">print(arr32) <span class="comment"># tf.Tensor([5 7 3 2 4 1 9 6 0 8], shape=(10,), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="top-k"><a href="#top-k" class="headerlink" title="top_k"></a><strong>top_k</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">10</span>)</div><div class="line">arr1 = tf.random.shuffle(arr)</div><div class="line">res = tf.math.top_k(arr1, <span class="number">2</span>)</div><div class="line">print(arr1) <span class="comment"># tf.Tensor([8 7 3 2 9 5 0 6 4 1], shape=(10,), dtype=int32)</span></div><div class="line">print(res.values) <span class="comment"># tf.Tensor([9 8], shape=(2,), dtype=int32)</span></div><div class="line">print(res.indices) <span class="comment"># tf.Tensor([4 0], shape=(2,), dtype=int32)</span></div></pre></td></tr></table></figure><h2 id="计算-top-k-概率"><a href="#计算-top-k-概率" class="headerlink" title="计算 top_k 概率"></a><strong>计算 top_k 概率</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(output, target, topk=<span class="params">(<span class="number">1</span>,)</span>)</span>:</span></div><div class="line">    maxk = max(topk)</div><div class="line">    batch_size = target.shape[<span class="number">0</span>]</div><div class="line"></div><div class="line">    pred = tf.math.top_k(output, maxk).indices</div><div class="line">    print(pred) <span class="comment"># tf.Tensor(</span></div><div class="line">                <span class="comment"># [[1 0 2]</span></div><div class="line">                <span class="comment">#  [0 1 2]</span></div><div class="line">                <span class="comment">#  [1 0 2]</span></div><div class="line">                <span class="comment">#  [1 0 2]], shape=(4, 3), dtype=int32)</span></div><div class="line"></div><div class="line">    <span class="comment"># 转置</span></div><div class="line">    pred = tf.transpose(pred, perm=[<span class="number">1</span>, <span class="number">0</span>])</div><div class="line">    print(pred) <span class="comment"># tf.Tensor(</span></div><div class="line">                <span class="comment"># [[1 0 1 1]</span></div><div class="line">                <span class="comment">#  [0 1 0 0]</span></div><div class="line">                <span class="comment">#  [2 2 2 2]], shape=(3, 4), dtype=int32)</span></div><div class="line"></div><div class="line">    target_ = tf.broadcast_to(target, pred.shape)</div><div class="line">    print(target_) <span class="comment"># tf.Tensor(</span></div><div class="line">                   <span class="comment"># [[0 1 0 2]</span></div><div class="line">                   <span class="comment">#  [0 1 0 2]</span></div><div class="line">                   <span class="comment">#  [0 1 0 2]], shape=(3, 4), dtype=int32)</span></div><div class="line">    correct = tf.equal(pred, target_)</div><div class="line">    print(correct) <span class="comment"># tf.Tensor(</span></div><div class="line">                   <span class="comment"># [[False False False False]</span></div><div class="line">                   <span class="comment">#  [ True  True  True False]</span></div><div class="line">                   <span class="comment">#  [False False False  True]], shape=(3, 4), dtype=bool)</span></div><div class="line"></div><div class="line">    res = []</div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> topk:</div><div class="line">        correct_k = tf.cast(tf.reshape(correct[:k], [<span class="number">-1</span>]), dtype=tf.float32)</div><div class="line">        correct_k = tf.reduce_sum(correct_k)</div><div class="line">        acc = float(correct_k * (<span class="number">100.0</span> / batch_size))</div><div class="line">        res.append(acc)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"></div><div class="line">output = tf.random.normal([<span class="number">4</span>, <span class="number">3</span>])</div><div class="line">output = tf.math.softmax(output, axis=<span class="number">1</span>)</div><div class="line">print(<span class="string">'output:'</span>, output.numpy()) <span class="comment"># output: [[0.16469155 0.7675324  0.06777601]</span></div><div class="line">                                 <span class="comment">#  [0.50406045 0.31256208 0.18337746]</span></div><div class="line">                                 <span class="comment">#  [0.24097656 0.5227547  0.23626871]</span></div><div class="line">                                 <span class="comment">#  [0.2440812  0.5844257  0.17149314]]</span></div><div class="line">target = tf.random.uniform([<span class="number">4</span>], maxval=<span class="number">3</span>, dtype=tf.int32)</div><div class="line">print(<span class="string">'target:'</span>, target.numpy()) <span class="comment"># target: [0 1 0 2]</span></div><div class="line">acc = accuracy(output, target, topk=(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</div><div class="line">print(<span class="string">'top1-6 acc:'</span>, acc) <span class="comment"># top1-6 acc: [0.0, 75.0, 100.0]</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 数据统计</title>
    <link href="http://www.weichao.io/2019/05/22/TensorFlow-%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1/"/>
    <id>http://www.weichao.io/2019/05/22/TensorFlow-数据统计/</id>
    <published>2019-05-22T01:43:45.000Z</published>
    <updated>2019-05-29T01:44:32.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="norm"><a href="#norm" class="headerlink" title="norm"></a><strong>norm</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">-2</span>, <span class="number">4</span>)</div><div class="line">t = tf.cast(tf.reshape(arr, [<span class="number">2</span>, <span class="number">-1</span>]), tf.float32)</div><div class="line"></div><div class="line"><span class="comment"># = square root(|-2|^2+|-1|^2+|0|^2+|1|^2+|2|^2+|3|^2) = sqrt(19) = 4.358899</span></div><div class="line">t10 = tf.sqrt(tf.reduce_sum(tf.square(t)))</div><div class="line">t11 = tf.norm(t)</div><div class="line">t12 = tf.norm(t, ord=<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># = |-2|+|-1|+|0|+|1|+|2|+|3| = 9</span></div><div class="line">t21 = tf.norm(t, ord=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># = cubic root(|-2|^3+|-1|^3+|0|^3+|1|^3+|2|^3+|3|^3) = curt(45) = 3.5568933</span></div><div class="line">t22 = tf.norm(t, ord=<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># = [square root(|-2|^2+|1|^2), square root(|-1|^2+|2|^2), square root(|0|^2+|3|^2)] = [sqrt(5), sqrt(5), sqrt(9)] = [2.236068, 2.236068, 3]</span></div><div class="line">t31 = tf.norm(t, axis=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># = [square root(|-2|^2+|-1|^2+|0|^2), square root(|1|^2+|2|^2+|3|^2)] = [sqrt(5), sqrt(14)] = [2.236068, 3.7416575]</span></div><div class="line">t32 = tf.norm(t, axis=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment"># = [|-2|+|1|, |-1|+|2|, |0|+|3|] = [3, 3, 3]</span></div><div class="line">t41 = tf.norm(t, ord=<span class="number">1</span>, axis=<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># = [cubic root(|-2|^3+|1|^3), cubic root(|-1|^3+|2|^3), cubic root(|0|^3+|3|^3)] = [curt(9), curt(9), curt(27)] = [2.080084, 2.080084, 3]</span></div><div class="line">t42 = tf.norm(t, ord=<span class="number">3</span>, axis=<span class="number">0</span>)</div><div class="line"></div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[-2. -1.  0.]</span></div><div class="line">         <span class="comment">#  [ 1.  2.  3.]], shape=(2, 3), dtype=float32)</span></div><div class="line">print(t10) <span class="comment"># tf.Tensor(4.358899, shape=(), dtype=float32)</span></div><div class="line">print(t11) <span class="comment"># tf.Tensor(4.358899, shape=(), dtype=float32)</span></div><div class="line">print(t12) <span class="comment"># tf.Tensor(4.358899, shape=(), dtype=float32)</span></div><div class="line">print(t21) <span class="comment"># tf.Tensor(9.0, shape=(), dtype=float32)</span></div><div class="line">print(t22) <span class="comment"># tf.Tensor(3.5568933, shape=(), dtype=float32)</span></div><div class="line">print(t31) <span class="comment"># tf.Tensor([2.236068 2.236068 3.      ], shape=(3,), dtype=float32)</span></div><div class="line">print(t32) <span class="comment"># tf.Tensor([2.236068  3.7416575], shape=(2,), dtype=float32)</span></div><div class="line">print(t41) <span class="comment"># tf.Tensor([3. 3. 3.], shape=(3,), dtype=float32)</span></div><div class="line">print(t42) <span class="comment"># tf.Tensor([2.080084 2.080084 3.      ], shape=(3,), dtype=float32)</span></div></pre></td></tr></table></figure><hr><h1 id="reduce-min、reduce-max、reduce-mean、argmin、argmax、argmax"><a href="#reduce-min、reduce-max、reduce-mean、argmin、argmax、argmax" class="headerlink" title="reduce_min、reduce_max、reduce_mean、argmin、argmax、argmax"></a><strong>reduce_min、reduce_max、reduce_mean、argmin、argmax、argmax</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">arr0 = tf.range(<span class="number">12</span>)</div><div class="line">arr1 = tf.random.shuffle(arr0)</div><div class="line">arr = tf.reshape(arr1, [<span class="number">3</span>, <span class="number">4</span>])</div><div class="line">t11 = tf.reduce_min(arr)</div><div class="line">t12 = tf.reduce_min(arr, axis=<span class="number">1</span>)</div><div class="line">t21 = tf.reduce_max(arr)</div><div class="line">t22 = tf.reduce_max(arr, axis=<span class="number">1</span>)</div><div class="line">t31 = tf.reduce_mean(arr)</div><div class="line">t32 = tf.reduce_mean(arr, axis=<span class="number">1</span>)</div><div class="line">print(arr) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[ 1  8  0  4]</span></div><div class="line">           <span class="comment">#  [10 11  2  9]</span></div><div class="line">           <span class="comment">#  [ 6  7  5  3]], shape=(3, 4), dtype=int32)</span></div><div class="line">print(tf.argmin(arr)) <span class="comment"># tf.Tensor([0 2 0 2], shape=(4,), dtype=int64)</span></div><div class="line">print(tf.argmax(arr)) <span class="comment"># tf.Tensor([1 1 2 1], shape=(4,), dtype=int64)</span></div><div class="line">print(tf.argmax(arr)) <span class="comment"># tf.Tensor([1 1 2 1], shape=(4,), dtype=int64)</span></div><div class="line">print(t11) <span class="comment"># tf.Tensor(0, shape=(), dtype=int32)</span></div><div class="line">print(t12) <span class="comment"># tf.Tensor([0 2 3], shape=(3,), dtype=int32)</span></div><div class="line">print(tf.argmin(arr, axis=<span class="number">1</span>)) <span class="comment"># tf.Tensor([2 2 3], shape=(3,), dtype=int64)</span></div><div class="line">print(t21) <span class="comment"># tf.Tensor(11, shape=(), dtype=int32)</span></div><div class="line">print(t22) <span class="comment"># tf.Tensor([ 8 11  7], shape=(3,), dtype=int32)</span></div><div class="line">print(tf.argmax(arr, axis=<span class="number">1</span>)) <span class="comment"># tf.Tensor([1 1 1], shape=(3,), dtype=int64)</span></div><div class="line">print(t31) <span class="comment"># tf.Tensor(5, shape=(), dtype=int32)</span></div><div class="line">print(t32) <span class="comment"># tf.Tensor([3 8 5], shape=(3,), dtype=int32)</span></div><div class="line">print(tf.argmax(arr, axis=<span class="number">1</span>)) <span class="comment"># tf.Tensor([1 1 1], shape=(3,), dtype=int64)</span></div></pre></td></tr></table></figure><hr><h1 id="equal"><a href="#equal" class="headerlink" title="equal"></a><strong>equal</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">arr11 = tf.random.uniform([<span class="number">1</span>, <span class="number">10</span>], dtype=tf.int32, maxval=<span class="number">4</span>)</div><div class="line">arr1 = tf.squeeze(arr11)</div><div class="line">arr21 = tf.random.uniform([<span class="number">1</span>, <span class="number">10</span>], dtype=tf.int32, maxval=<span class="number">4</span>)</div><div class="line">arr2 = tf.squeeze(arr21)</div><div class="line">t = tf.equal(arr1, arr2)</div><div class="line">t1 = tf.reduce_sum(tf.cast(t, dtype=tf.int32))</div><div class="line">print(arr1) <span class="comment"># tf.Tensor([1 0 2 3 3 1 1 1 0 1], shape=(10,), dtype=int32)</span></div><div class="line">print(arr2) <span class="comment"># tf.Tensor([3 0 2 2 1 3 1 2 1 2], shape=(10,), dtype=int32)</span></div><div class="line">print(t) <span class="comment"># tf.Tensor([False  True  True False False False  True False False False], shape=(10,), dtype=bool)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(3, shape=(), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="unique"><a href="#unique" class="headerlink" title="unique"></a><strong>unique</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">arr0 = tf.random.uniform([<span class="number">1</span>, <span class="number">10</span>], dtype=tf.int32, maxval=<span class="number">8</span>)</div><div class="line">arr = tf.squeeze(arr0)</div><div class="line">y, idx = tf.unique(arr)</div><div class="line">arr1 = tf.gather(y, idx)</div><div class="line">print(arr) <span class="comment"># tf.Tensor([0 1 2 3 3 1 3 7 5 7], shape=(10,), dtype=int32)</span></div><div class="line">print(y) <span class="comment"># tf.Tensor([0 1 2 3 7 5], shape=(6,), dtype=int32)</span></div><div class="line">print(idx) <span class="comment"># tf.Tensor([0 1 2 3 3 1 3 4 5 4], shape=(10,), dtype=int32)</span></div><div class="line">print(arr1) <span class="comment"># tf.Tensor([0 1 2 3 3 1 3 7 5 7], shape=(10,), dtype=int32)</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 合并与分割</title>
    <link href="http://www.weichao.io/2019/05/21/TensorFlow-%E5%90%88%E5%B9%B6%E4%B8%8E%E5%88%86%E5%89%B2/"/>
    <id>http://www.weichao.io/2019/05/21/TensorFlow-合并与分割/</id>
    <published>2019-05-21T09:00:12.000Z</published>
    <updated>2019-05-21T09:00:52.803Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="concat"><a href="#concat" class="headerlink" title="concat"></a><strong>concat</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">a = tf.range(<span class="number">12</span>)</div><div class="line">b = tf.range(<span class="number">12</span>, <span class="number">36</span>)</div><div class="line">a1 = tf.reshape(a, [<span class="number">2</span>, <span class="number">6</span>])</div><div class="line">b1 = tf.reshape(b, [<span class="number">4</span>, <span class="number">6</span>])</div><div class="line">t = tf.concat([a1, b1], axis=<span class="number">0</span>)</div><div class="line">print(a) <span class="comment"># tf.Tensor([ 0  1  2  3  4  5  6  7  8  9 10 11], shape=(12,), dtype=int32)</span></div><div class="line">print(b) <span class="comment"># tf.Tensor([12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35], shape=(24,), dtype=int32)</span></div><div class="line">print(a1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4  5]</span></div><div class="line">          <span class="comment">#  [ 6  7  8  9 10 11]], shape=(2, 6), dtype=int32)</span></div><div class="line">print(b1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[12 13 14 15 16 17]</span></div><div class="line">          <span class="comment">#  [18 19 20 21 22 23]</span></div><div class="line">          <span class="comment">#  [24 25 26 27 28 29]</span></div><div class="line">          <span class="comment">#  [30 31 32 33 34 35]], shape=(4, 6), dtype=int32)</span></div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[ 0  1  2  3  4  5]</span></div><div class="line">         <span class="comment">#  [ 6  7  8  9 10 11]</span></div><div class="line">         <span class="comment">#  [12 13 14 15 16 17]</span></div><div class="line">         <span class="comment">#  [18 19 20 21 22 23]</span></div><div class="line">         <span class="comment">#  [24 25 26 27 28 29]</span></div><div class="line">         <span class="comment">#  [30 31 32 33 34 35]], shape=(6, 6), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a><strong>stack</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">a = tf.range(<span class="number">12</span>)</div><div class="line">c = tf.range(<span class="number">12</span>, <span class="number">24</span>)</div><div class="line">a1 = tf.reshape(a, [<span class="number">2</span>, <span class="number">6</span>])</div><div class="line">c1 = tf.reshape(c, [<span class="number">2</span>, <span class="number">6</span>])</div><div class="line">t = tf.stack([a1, c1], axis=<span class="number">0</span>)</div><div class="line">print(a) <span class="comment"># tf.Tensor([ 0  1  2  3  4  5  6  7  8  9 10 11], shape=(12,), dtype=int32)</span></div><div class="line">print(c) <span class="comment"># tf.Tensor([12 13 14 15 16 17 18 19 20 21 22 23], shape=(12,), dtype=int32)</span></div><div class="line">print(a1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4  5]</span></div><div class="line">          <span class="comment">#  [ 6  7  8  9 10 11]], shape=(2, 6), dtype=int32)</span></div><div class="line">print(c1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[12 13 14 15 16 17]</span></div><div class="line">          <span class="comment">#  [18 19 20 21 22 23]], shape=(2, 6), dtype=int32)</span></div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4  5]</span></div><div class="line">         <span class="comment">#   [ 6  7  8  9 10 11]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[12 13 14 15 16 17]</span></div><div class="line">         <span class="comment">#   [18 19 20 21 22 23]]], shape=(2, 2, 6), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="unstack"><a href="#unstack" class="headerlink" title="unstack"></a><strong>unstack</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">a = tf.range(<span class="number">12</span>)</div><div class="line">c = tf.range(<span class="number">12</span>, <span class="number">24</span>)</div><div class="line">a1 = tf.reshape(a, [<span class="number">2</span>, <span class="number">6</span>])</div><div class="line">c1 = tf.reshape(c, [<span class="number">2</span>, <span class="number">6</span>])</div><div class="line">t = tf.stack([a1, c1], axis=<span class="number">0</span>)</div><div class="line">t1 = tf.unstack(t, axis=<span class="number">0</span>)</div><div class="line">t2 = tf.unstack(t, axis=<span class="number">2</span>)</div><div class="line">print(a) <span class="comment"># tf.Tensor([ 0  1  2  3  4  5  6  7  8  9 10 11], shape=(12,), dtype=int32)</span></div><div class="line">print(c) <span class="comment"># tf.Tensor([12 13 14 15 16 17 18 19 20 21 22 23], shape=(12,), dtype=int32)</span></div><div class="line">print(a1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4  5]</span></div><div class="line">          <span class="comment">#  [ 6  7  8  9 10 11]], shape=(2, 6), dtype=int32)</span></div><div class="line">print(c1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[12 13 14 15 16 17]</span></div><div class="line">          <span class="comment">#  [18 19 20 21 22 23]], shape=(2, 6), dtype=int32)</span></div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4  5]</span></div><div class="line">         <span class="comment">#   [ 6  7  8  9 10 11]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[12 13 14 15 16 17]</span></div><div class="line">         <span class="comment">#   [18 19 20 21 22 23]]], shape=(2, 2, 6), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># [&lt;tf.Tensor: id=13, shape=(2, 6), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 0,  1,  2,  3,  4,  5],</span></div><div class="line">          <span class="comment">#        [ 6,  7,  8,  9, 10, 11]])&gt;, &lt;tf.Tensor: id=14, shape=(2, 6), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[12, 13, 14, 15, 16, 17],</span></div><div class="line">          <span class="comment">#        [18, 19, 20, 21, 22, 23]])&gt;]</span></div><div class="line">print(t2) <span class="comment"># [&lt;tf.Tensor: id=15, shape=(2, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 0,  6],</span></div><div class="line">          <span class="comment">#        [12, 18]])&gt;, &lt;tf.Tensor: id=16, shape=(2, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 1,  7],</span></div><div class="line">          <span class="comment">#        [13, 19]])&gt;, &lt;tf.Tensor: id=17, shape=(2, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 2,  8],</span></div><div class="line">          <span class="comment">#        [14, 20]])&gt;, &lt;tf.Tensor: id=18, shape=(2, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 3,  9],</span></div><div class="line">          <span class="comment">#        [15, 21]])&gt;, &lt;tf.Tensor: id=19, shape=(2, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 4, 10],</span></div><div class="line">          <span class="comment">#        [16, 22]])&gt;, &lt;tf.Tensor: id=20, shape=(2, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 5, 11],</span></div><div class="line">          <span class="comment">#        [17, 23]])&gt;]</span></div></pre></td></tr></table></figure><hr><h1 id="split"><a href="#split" class="headerlink" title="split"></a><strong>split</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">24</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">t0 = tf.unstack(t, axis=<span class="number">2</span>)</div><div class="line">t1 = tf.split(t, axis=<span class="number">2</span>, num_or_size_splits=<span class="number">2</span>)</div><div class="line">t2 = tf.split(t, axis=<span class="number">2</span>, num_or_size_splits=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3]</span></div><div class="line">         <span class="comment">#   [ 4  5  6  7]</span></div><div class="line">         <span class="comment">#   [ 8  9 10 11]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[12 13 14 15]</span></div><div class="line">         <span class="comment">#   [16 17 18 19]</span></div><div class="line">         <span class="comment">#   [20 21 22 23]]], shape=(2, 3, 4), dtype=int32)</span></div><div class="line">print(t0) <span class="comment"># [&lt;tf.Tensor: id=6, shape=(2, 3), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 0,  4,  8],</span></div><div class="line">          <span class="comment">#        [12, 16, 20]])&gt;, &lt;tf.Tensor: id=7, shape=(2, 3), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 1,  5,  9],</span></div><div class="line">          <span class="comment">#        [13, 17, 21]])&gt;, &lt;tf.Tensor: id=8, shape=(2, 3), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 2,  6, 10],</span></div><div class="line">          <span class="comment">#        [14, 18, 22]])&gt;, &lt;tf.Tensor: id=9, shape=(2, 3), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[ 3,  7, 11],</span></div><div class="line">          <span class="comment">#        [15, 19, 23]])&gt;]</span></div><div class="line">print(t1) <span class="comment"># [&lt;tf.Tensor: id=12, shape=(2, 3, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[[ 0,  1],</span></div><div class="line">          <span class="comment">#         [ 4,  5],</span></div><div class="line">          <span class="comment">#         [ 8,  9]],</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#        [[12, 13],</span></div><div class="line">          <span class="comment">#         [16, 17],</span></div><div class="line">          <span class="comment">#         [20, 21]]])&gt;, &lt;tf.Tensor: id=13, shape=(2, 3, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[[ 2,  3],</span></div><div class="line">          <span class="comment">#         [ 6,  7],</span></div><div class="line">          <span class="comment">#         [10, 11]],</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#        [[14, 15],</span></div><div class="line">          <span class="comment">#         [18, 19],</span></div><div class="line">          <span class="comment">#         [22, 23]]])&gt;]</span></div><div class="line">print(t2) <span class="comment"># [&lt;tf.Tensor: id=16, shape=(2, 3, 1), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[[ 0],</span></div><div class="line">          <span class="comment">#         [ 4],</span></div><div class="line">          <span class="comment">#         [ 8]],</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#        [[12],</span></div><div class="line">          <span class="comment">#         [16],</span></div><div class="line">          <span class="comment">#         [20]]])&gt;, &lt;tf.Tensor: id=17, shape=(2, 3, 2), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[[ 1,  2],</span></div><div class="line">          <span class="comment">#         [ 5,  6],</span></div><div class="line">          <span class="comment">#         [ 9, 10]],</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#        [[13, 14],</span></div><div class="line">          <span class="comment">#         [17, 18],</span></div><div class="line">          <span class="comment">#         [21, 22]]])&gt;, &lt;tf.Tensor: id=18, shape=(2, 3, 1), dtype=int32, numpy=</span></div><div class="line">          <span class="comment"># array([[[ 3],</span></div><div class="line">          <span class="comment">#         [ 7],</span></div><div class="line">          <span class="comment">#         [11]],</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#        [[15],</span></div><div class="line">          <span class="comment">#         [19],</span></div><div class="line">          <span class="comment">#         [23]]])&gt;]</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 实战——前向传播（张量）</title>
    <link href="http://www.weichao.io/2019/05/20/TensorFlow-%E5%AE%9E%E6%88%98%E2%80%94%E2%80%94%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD%EF%BC%88%E5%BC%A0%E9%87%8F%EF%BC%89/"/>
    <id>http://www.weichao.io/2019/05/20/TensorFlow-实战——前向传播（张量）/</id>
    <published>2019-05-20T08:57:27.000Z</published>
    <updated>2019-05-21T08:59:20.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="coding"><a href="#coding" class="headerlink" title="coding"></a><strong>coding</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</div><div class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> datasets</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></div><div class="line"></div><div class="line">print(<span class="string">'GPU'</span>, tf.test.is_gpu_available())</div><div class="line"></div><div class="line">(x, y), _ = datasets.mnist.load_data()</div><div class="line">x = tf.convert_to_tensor(x, dtype=tf.float32) / <span class="number">255.</span></div><div class="line">y = tf.convert_to_tensor(y, dtype=tf.int32)</div><div class="line">print(x.shape)  <span class="comment"># (60000, 28, 28)</span></div><div class="line">print(y.shape)  <span class="comment"># (60000,)</span></div><div class="line"></div><div class="line"><span class="comment"># 使用tf.Variable包装,因为tf.Variable有梯度信息</span></div><div class="line">w1 = tf.Variable(tf.random.truncated_normal([<span class="number">784</span>, <span class="number">256</span>], stddev=<span class="number">0.1</span>))</div><div class="line">b1 = tf.Variable(tf.zeros([<span class="number">256</span>]))</div><div class="line">w2 = tf.Variable(tf.random.truncated_normal([<span class="number">256</span>, <span class="number">128</span>], stddev=<span class="number">0.1</span>))</div><div class="line">b2 = tf.Variable(tf.zeros([<span class="number">128</span>]))</div><div class="line">w3 = tf.Variable(tf.random.truncated_normal([<span class="number">128</span>, <span class="number">10</span>], stddev=<span class="number">0.1</span>))</div><div class="line">b3 = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">print(w1.shape, b1.shape)  <span class="comment"># (784, 256) (256,)</span></div><div class="line">print(w2.shape, b2.shape)  <span class="comment"># (256, 128) (128,)</span></div><div class="line">print(w3.shape, b3.shape)  <span class="comment"># (128, 10) (10,)</span></div><div class="line"></div><div class="line">train_db = tf.data.Dataset.from_tensor_slices((x, y)).batch(<span class="number">128</span>)  <span class="comment"># 一次取128张图片</span></div><div class="line">lr = <span class="number">1e-3</span></div><div class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    <span class="keyword">for</span> step, (x, y) <span class="keyword">in</span> enumerate(train_db):</div><div class="line">        <span class="comment"># (128, 28, 28) =&gt; (128, 784)</span></div><div class="line">        x = tf.reshape(x, [<span class="number">-1</span>, <span class="number">28</span> * <span class="number">28</span>])</div><div class="line"></div><div class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</div><div class="line">            <span class="comment"># (128, 784)@(784, 256) + (256,) =&gt; (128, 256) + (256,) =&gt; (128, 256) + (128, 256) =&gt; (128, 256)</span></div><div class="line">            h1 = x @ w1 + b1</div><div class="line"></div><div class="line">            h1 = tf.nn.relu(h1)</div><div class="line">            h2 = h1 @ w2 + b2</div><div class="line">            h2 = tf.nn.relu(h2)</div><div class="line">            out = h2 @ w3 + b3</div><div class="line"></div><div class="line">            y_onehot = tf.one_hot(y, depth=<span class="number">10</span>)</div><div class="line">            loss = tf.square(y_onehot - out)</div><div class="line">            loss = tf.reduce_mean(loss)</div><div class="line"></div><div class="line">        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])  <span class="comment"># 计算梯度</span></div><div class="line">        <span class="comment"># w1 = w1 - lr * grads[0]会返回tf.Tensor类型的数据，使用assign_sub包装会原地更新</span></div><div class="line">        w1.assign_sub(lr * grads[<span class="number">0</span>])</div><div class="line">        b1.assign_sub(lr * grads[<span class="number">1</span>])</div><div class="line">        w2.assign_sub(lr * grads[<span class="number">2</span>])</div><div class="line">        b2.assign_sub(lr * grads[<span class="number">3</span>])</div><div class="line">        w3.assign_sub(lr * grads[<span class="number">4</span>])</div><div class="line">        b3.assign_sub(lr * grads[<span class="number">5</span>])</div><div class="line"></div><div class="line">        print(epoch, step, <span class="string">'loss: '</span>, float(loss))</div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow broadcasting</title>
    <link href="http://www.weichao.io/2019/05/14/TensorFlow-broadcasting/"/>
    <id>http://www.weichao.io/2019/05/14/TensorFlow-broadcasting/</id>
    <published>2019-05-14T01:33:53.000Z</published>
    <updated>2019-06-04T07:17:56.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="broadcasting"><a href="#broadcasting" class="headerlink" title="broadcasting"></a><strong>broadcasting</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">arr1 = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t = tf.cast(arr1, dtype=tf.float32)</div><div class="line">t1 = tf.ones(<span class="number">5</span>)</div><div class="line">t2 = tf.ones([<span class="number">4</span>, <span class="number">1</span>])</div><div class="line">t3 = tf.ones([<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>])</div><div class="line">t11 = t + t1</div><div class="line">t21 = t + t2</div><div class="line">t31 = t + t3</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0.  1.  2.  3.  4.]</span></div><div class="line">         <span class="comment">#   [ 5.  6.  7.  8.  9.]</span></div><div class="line">         <span class="comment">#   [10. 11. 12. 13. 14.]</span></div><div class="line">         <span class="comment">#   [15. 16. 17. 18. 19.]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20. 21. 22. 23. 24.]</span></div><div class="line">         <span class="comment">#   [25. 26. 27. 28. 29.]</span></div><div class="line">         <span class="comment">#   [30. 31. 32. 33. 34.]</span></div><div class="line">         <span class="comment">#   [35. 36. 37. 38. 39.]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40. 41. 42. 43. 44.]</span></div><div class="line">         <span class="comment">#   [45. 46. 47. 48. 49.]</span></div><div class="line">         <span class="comment">#   [50. 51. 52. 53. 54.]</span></div><div class="line">         <span class="comment">#   [55. 56. 57. 58. 59.]]], shape=(3, 4, 5), dtype=float32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor([1. 1. 1. 1. 1.], shape=(5,), dtype=float32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[1.]</span></div><div class="line">          <span class="comment">#  [1.]</span></div><div class="line">          <span class="comment">#  [1.]</span></div><div class="line">          <span class="comment">#  [1.]], shape=(4, 1), dtype=float32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[1.]</span></div><div class="line">          <span class="comment">#   [1.]</span></div><div class="line">          <span class="comment">#   [1.]</span></div><div class="line">          <span class="comment">#   [1.]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[1.]</span></div><div class="line">          <span class="comment">#   [1.]</span></div><div class="line">          <span class="comment">#   [1.]</span></div><div class="line">          <span class="comment">#   [1.]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[1.]</span></div><div class="line">          <span class="comment">#   [1.]</span></div><div class="line">          <span class="comment">#   [1.]</span></div><div class="line">          <span class="comment">#   [1.]]], shape=(3, 4, 1), dtype=float32)</span></div><div class="line">print(t11) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[[ 1.  2.  3.  4.  5.]</span></div><div class="line">           <span class="comment">#   [ 6.  7.  8.  9. 10.]</span></div><div class="line">           <span class="comment">#   [11. 12. 13. 14. 15.]</span></div><div class="line">           <span class="comment">#   [16. 17. 18. 19. 20.]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[21. 22. 23. 24. 25.]</span></div><div class="line">           <span class="comment">#   [26. 27. 28. 29. 30.]</span></div><div class="line">           <span class="comment">#   [31. 32. 33. 34. 35.]</span></div><div class="line">           <span class="comment">#   [36. 37. 38. 39. 40.]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[41. 42. 43. 44. 45.]</span></div><div class="line">           <span class="comment">#   [46. 47. 48. 49. 50.]</span></div><div class="line">           <span class="comment">#   [51. 52. 53. 54. 55.]</span></div><div class="line">           <span class="comment">#   [56. 57. 58. 59. 60.]]], shape=(3, 4, 5), dtype=float32)</span></div><div class="line">print(t21) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[[ 1.  2.  3.  4.  5.]</span></div><div class="line">           <span class="comment">#   [ 6.  7.  8.  9. 10.]</span></div><div class="line">           <span class="comment">#   [11. 12. 13. 14. 15.]</span></div><div class="line">           <span class="comment">#   [16. 17. 18. 19. 20.]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[21. 22. 23. 24. 25.]</span></div><div class="line">           <span class="comment">#   [26. 27. 28. 29. 30.]</span></div><div class="line">           <span class="comment">#   [31. 32. 33. 34. 35.]</span></div><div class="line">           <span class="comment">#   [36. 37. 38. 39. 40.]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[41. 42. 43. 44. 45.]</span></div><div class="line">           <span class="comment">#   [46. 47. 48. 49. 50.]</span></div><div class="line">           <span class="comment">#   [51. 52. 53. 54. 55.]</span></div><div class="line">           <span class="comment">#   [56. 57. 58. 59. 60.]]], shape=(3, 4, 5), dtype=float32)</span></div><div class="line">print(t31) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[[ 1.  2.  3.  4.  5.]</span></div><div class="line">           <span class="comment">#   [ 6.  7.  8.  9. 10.]</span></div><div class="line">           <span class="comment">#   [11. 12. 13. 14. 15.]</span></div><div class="line">           <span class="comment">#   [16. 17. 18. 19. 20.]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[21. 22. 23. 24. 25.]</span></div><div class="line">           <span class="comment">#   [26. 27. 28. 29. 30.]</span></div><div class="line">           <span class="comment">#   [31. 32. 33. 34. 35.]</span></div><div class="line">           <span class="comment">#   [36. 37. 38. 39. 40.]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[41. 42. 43. 44. 45.]</span></div><div class="line">           <span class="comment">#   [46. 47. 48. 49. 50.]</span></div><div class="line">           <span class="comment">#   [51. 52. 53. 54. 55.]</span></div><div class="line">           <span class="comment">#   [56. 57. 58. 59. 60.]]], shape=(3, 4, 5), dtype=float32)</span></div><div class="line"></div><div class="line">t4 = tf.ones([<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>])</div><div class="line">t41 = t + t4 <span class="comment"># tensorflow.python.framework.errors_impl.InvalidArgumentError: Incompatible shapes: [3,4,5] vs. [3,4,2] [Op:Add] name: add/</span></div></pre></td></tr></table></figure><hr><h1 id="broadcast-to"><a href="#broadcast-to" class="headerlink" title="broadcast_to"></a><strong>broadcast_to</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">12</span>)</div><div class="line">arr1 = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>])</div><div class="line">t = tf.cast(arr1, dtype=tf.float32)</div><div class="line">t1 = tf.broadcast_to(t, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0.]</span></div><div class="line">         <span class="comment">#   [ 1.]</span></div><div class="line">         <span class="comment">#   [ 2.]</span></div><div class="line">         <span class="comment">#   [ 3.]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[ 4.]</span></div><div class="line">         <span class="comment">#   [ 5.]</span></div><div class="line">         <span class="comment">#   [ 6.]</span></div><div class="line">         <span class="comment">#   [ 7.]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[ 8.]</span></div><div class="line">         <span class="comment">#   [ 9.]</span></div><div class="line">         <span class="comment">#   [10.]</span></div><div class="line">         <span class="comment">#   [11.]]], shape=(3, 4, 1), dtype=float32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0.  0.  0.  0.  0.]</span></div><div class="line">          <span class="comment">#   [ 1.  1.  1.  1.  1.]</span></div><div class="line">          <span class="comment">#   [ 2.  2.  2.  2.  2.]</span></div><div class="line">          <span class="comment">#   [ 3.  3.  3.  3.  3.]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[ 4.  4.  4.  4.  4.]</span></div><div class="line">          <span class="comment">#   [ 5.  5.  5.  5.  5.]</span></div><div class="line">          <span class="comment">#   [ 6.  6.  6.  6.  6.]</span></div><div class="line">          <span class="comment">#   [ 7.  7.  7.  7.  7.]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[ 8.  8.  8.  8.  8.]</span></div><div class="line">          <span class="comment">#   [ 9.  9.  9.  9.  9.]</span></div><div class="line">          <span class="comment">#   [10. 10. 10. 10. 10.]</span></div><div class="line">          <span class="comment">#   [11. 11. 11. 11. 11.]]], shape=(3, 4, 5), dtype=float32)</span></div></pre></td></tr></table></figure><hr><h1 id="tile"><a href="#tile" class="headerlink" title="tile"></a><strong>tile</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">12</span>)</div><div class="line">a = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>])</div><div class="line">a1 = tf.broadcast_to(a, [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</div><div class="line">a2 = tf.expand_dims(a, axis=<span class="number">0</span>)</div><div class="line">a21 = tf.tile(a2, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>])</div><div class="line">print(a) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[ 0  1  2  3]</span></div><div class="line">         <span class="comment">#  [ 4  5  6  7]</span></div><div class="line">         <span class="comment">#  [ 8  9 10 11]], shape=(3, 4), dtype=int32)</span></div><div class="line">print(a1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3]</span></div><div class="line">          <span class="comment">#   [ 4  5  6  7]</span></div><div class="line">          <span class="comment">#   [ 8  9 10 11]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[ 0  1  2  3]</span></div><div class="line">          <span class="comment">#   [ 4  5  6  7]</span></div><div class="line">          <span class="comment">#   [ 8  9 10 11]]], shape=(2, 3, 4), dtype=int32)</span></div><div class="line">print(a2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3]</span></div><div class="line">          <span class="comment">#   [ 4  5  6  7]</span></div><div class="line">          <span class="comment">#   [ 8  9 10 11]]], shape=(1, 3, 4), dtype=int32)</span></div><div class="line">print(a21) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[[ 0  1  2  3]</span></div><div class="line">           <span class="comment">#   [ 4  5  6  7]</span></div><div class="line">           <span class="comment">#   [ 8  9 10 11]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[ 0  1  2  3]</span></div><div class="line">           <span class="comment">#   [ 4  5  6  7]</span></div><div class="line">           <span class="comment">#   [ 8  9 10 11]]], shape=(2, 3, 4), dtype=int32)</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 维度变换</title>
    <link href="http://www.weichao.io/2019/05/13/TensorFlow-%E7%BB%B4%E5%BA%A6%E5%8F%98%E6%8D%A2/"/>
    <id>http://www.weichao.io/2019/05/13/TensorFlow-维度变换/</id>
    <published>2019-05-13T01:31:52.000Z</published>
    <updated>2019-05-20T01:33:29.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="reshape"><a href="#reshape" class="headerlink" title="reshape"></a><strong>reshape</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = tf.reshape(t, [<span class="number">3</span>, <span class="number">4</span> * <span class="number">5</span>])</div><div class="line">t2 = tf.reshape(t, [<span class="number">3</span>, <span class="number">-1</span>])</div><div class="line">t3 = tf.reshape(t, [<span class="number">-1</span>])</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]</span></div><div class="line">          <span class="comment">#  [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]</span></div><div class="line">          <span class="comment">#  [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]], shape=(3, 20), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]</span></div><div class="line">          <span class="comment">#  [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]</span></div><div class="line">          <span class="comment">#  [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]], shape=(3, 20), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</span></div><div class="line">          <span class="comment">#  24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47</span></div><div class="line">          <span class="comment">#  48 49 50 51 52 53 54 55 56 57 58 59], shape=(60,), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="transpose"><a href="#transpose" class="headerlink" title="transpose"></a><strong>transpose</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t1 = tf.reshape(arr, [<span class="number">3</span>, <span class="number">-1</span>])</div><div class="line">t2 = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t11 = tf.transpose(t1)</div><div class="line">t21 = tf.transpose(t2)</div><div class="line">t22 = tf.transpose(t2, perm=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]</span></div><div class="line">          <span class="comment">#  [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]</span></div><div class="line">          <span class="comment">#  [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]], shape=(3, 20), dtype=int32)</span></div><div class="line">print(t11) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[ 0 20 40]</span></div><div class="line">           <span class="comment">#  [ 1 21 41]</span></div><div class="line">           <span class="comment">#  [ 2 22 42]</span></div><div class="line">           <span class="comment">#  [ 3 23 43]</span></div><div class="line">           <span class="comment">#  [ 4 24 44]</span></div><div class="line">           <span class="comment">#  [ 5 25 45]</span></div><div class="line">           <span class="comment">#  [ 6 26 46]</span></div><div class="line">           <span class="comment">#  [ 7 27 47]</span></div><div class="line">           <span class="comment">#  [ 8 28 48]</span></div><div class="line">           <span class="comment">#  [ 9 29 49]</span></div><div class="line">           <span class="comment">#  [10 30 50]</span></div><div class="line">           <span class="comment">#  [11 31 51]</span></div><div class="line">           <span class="comment">#  [12 32 52]</span></div><div class="line">           <span class="comment">#  [13 33 53]</span></div><div class="line">           <span class="comment">#  [14 34 54]</span></div><div class="line">           <span class="comment">#  [15 35 55]</span></div><div class="line">           <span class="comment">#  [16 36 56]</span></div><div class="line">           <span class="comment">#  [17 37 57]</span></div><div class="line">           <span class="comment">#  [18 38 58]</span></div><div class="line">           <span class="comment">#  [19 39 59]], shape=(20, 3), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t21) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[[ 0 20 40]</span></div><div class="line">           <span class="comment">#   [ 5 25 45]</span></div><div class="line">           <span class="comment">#   [10 30 50]</span></div><div class="line">           <span class="comment">#   [15 35 55]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[ 1 21 41]</span></div><div class="line">           <span class="comment">#   [ 6 26 46]</span></div><div class="line">           <span class="comment">#   [11 31 51]</span></div><div class="line">           <span class="comment">#   [16 36 56]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[ 2 22 42]</span></div><div class="line">           <span class="comment">#   [ 7 27 47]</span></div><div class="line">           <span class="comment">#   [12 32 52]</span></div><div class="line">           <span class="comment">#   [17 37 57]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[ 3 23 43]</span></div><div class="line">           <span class="comment">#   [ 8 28 48]</span></div><div class="line">           <span class="comment">#   [13 33 53]</span></div><div class="line">           <span class="comment">#   [18 38 58]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[ 4 24 44]</span></div><div class="line">           <span class="comment">#   [ 9 29 49]</span></div><div class="line">           <span class="comment">#   [14 34 54]</span></div><div class="line">           <span class="comment">#   [19 39 59]]], shape=(5, 4, 3), dtype=int32)</span></div><div class="line">print(t22) <span class="comment"># tf.Tensor(</span></div><div class="line">           <span class="comment"># [[[ 0  5 10 15]</span></div><div class="line">           <span class="comment">#   [ 1  6 11 16]</span></div><div class="line">           <span class="comment">#   [ 2  7 12 17]</span></div><div class="line">           <span class="comment">#   [ 3  8 13 18]</span></div><div class="line">           <span class="comment">#   [ 4  9 14 19]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[20 25 30 35]</span></div><div class="line">           <span class="comment">#   [21 26 31 36]</span></div><div class="line">           <span class="comment">#   [22 27 32 37]</span></div><div class="line">           <span class="comment">#   [23 28 33 38]</span></div><div class="line">           <span class="comment">#   [24 29 34 39]]</span></div><div class="line">           <span class="comment"># </span></div><div class="line">           <span class="comment">#  [[40 45 50 55]</span></div><div class="line">           <span class="comment">#   [41 46 51 56]</span></div><div class="line">           <span class="comment">#   [42 47 52 57]</span></div><div class="line">           <span class="comment">#   [43 48 53 58]</span></div><div class="line">           <span class="comment">#   [44 49 54 59]]], shape=(3, 5, 4), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="expand-dims"><a href="#expand-dims" class="headerlink" title="expand_dims"></a><strong>expand_dims</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = tf.expand_dims(t, axis=<span class="number">0</span>)</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#    [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#    [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#    [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#   [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#    [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#    [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#    [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#   [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#    [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#    [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#    [55 56 57 58 59]]]], shape=(1, 3, 4, 5), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="squeeze"><a href="#squeeze" class="headerlink" title="squeeze"></a><strong>squeeze</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = tf.squeeze(t, axis=<span class="number">0</span>)</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#    [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#    [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#    [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#   [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#    [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#    [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#    [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#   [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#    [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#    [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#    [55 56 57 58 59]]]], shape=(1, 3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 索引与切片</title>
    <link href="http://www.weichao.io/2019/05/09/TensorFlow-%E7%B4%A2%E5%BC%95%E4%B8%8E%E5%88%87%E7%89%87/"/>
    <id>http://www.weichao.io/2019/05/09/TensorFlow-索引与切片/</id>
    <published>2019-05-09T01:30:11.000Z</published>
    <updated>2019-05-20T01:31:14.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="Basic-indexing"><a href="#Basic-indexing" class="headerlink" title="Basic indexing"></a><strong>Basic indexing</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t1 = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1[<span class="number">0</span>]) <span class="comment"># tf.Tensor(</span></div><div class="line">             <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">             <span class="comment">#  [ 5  6  7  8  9]</span></div><div class="line">             <span class="comment">#  [10 11 12 13 14]</span></div><div class="line">             <span class="comment">#  [15 16 17 18 19]], shape=(4, 5), dtype=int32)</span></div><div class="line">print(t1[<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># tf.Tensor([0 1 2 3 4], shape=(5,), dtype=int32)</span></div><div class="line">print(t1[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]) <span class="comment"># tf.Tensor(0, shape=(), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="numpy-style-indexing"><a href="#numpy-style-indexing" class="headerlink" title="numpy-style indexing"></a><strong>numpy-style indexing</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t1 = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1[<span class="number">0</span>]) <span class="comment"># tf.Tensor(</span></div><div class="line">             <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">             <span class="comment">#  [ 5  6  7  8  9]</span></div><div class="line">             <span class="comment">#  [10 11 12 13 14]</span></div><div class="line">             <span class="comment">#  [15 16 17 18 19]], shape=(4, 5), dtype=int32)</span></div><div class="line">print(t1[<span class="number">0</span>, <span class="number">0</span>]) <span class="comment"># tf.Tensor([0 1 2 3 4], shape=(5,), dtype=int32)</span></div><div class="line">print(t1[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]) <span class="comment"># tf.Tensor(0, shape=(), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="截取"><a href="#截取" class="headerlink" title="截取"></a><strong>截取</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">t = tf.range(<span class="number">10</span>)</div><div class="line">t1 = t[<span class="number">2</span>:]</div><div class="line">t2 = t[<span class="number">-2</span>:]</div><div class="line">t3 = t[:<span class="number">2</span>]</div><div class="line">t4 = t[:<span class="number">-2</span>]</div><div class="line">print(t) <span class="comment"># tf.Tensor([0 1 2 3 4 5 6 7 8 9], shape=(10,), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor([2 3 4 5 6 7 8 9], shape=(8,), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor([8 9], shape=(2,), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor([0 1], shape=(2,), dtype=int32)</span></div><div class="line">print(t4) <span class="comment"># tf.Tensor([0 1 2 3 4 5 6 7], shape=(8,), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="indexing-by"><a href="#indexing-by" class="headerlink" title="indexing by :"></a><strong>indexing by :</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = t[<span class="number">0</span>, :, :]</div><div class="line">t2 = t[:, <span class="number">0</span>, :]</div><div class="line">t3 = t[:, :, <span class="number">0</span>]</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#  [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#  [15 16 17 18 19]], shape=(4, 5), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [20 21 22 23 24]</span></div><div class="line">          <span class="comment">#  [40 41 42 43 44]], shape=(3, 5), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  5 10 15]</span></div><div class="line">          <span class="comment">#  [20 25 30 35]</span></div><div class="line">          <span class="comment">#  [40 45 50 55]], shape=(3, 4), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="indexing-by-1"><a href="#indexing-by-1" class="headerlink" title="indexing by ::"></a><strong>indexing by ::</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = t[:, ::<span class="number">2</span>, :]</div><div class="line">t2 = t[<span class="number">0</span>::<span class="number">2</span>, :, :]</div><div class="line">t3 = t[<span class="number">0</span>, ::<span class="number">2</span>, :]</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]]], shape=(3, 2, 5), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(2, 4, 5), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [10 11 12 13 14]], shape=(2, 5), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="…"><a href="#…" class="headerlink" title="…"></a><strong>…</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = t[<span class="number">0</span>, ...]</div><div class="line">t2 = t[..., <span class="number">0</span>]</div><div class="line">t3 = t[<span class="number">0</span>, <span class="number">0</span>, ...]</div><div class="line">t4 = t[..., <span class="number">0</span>, <span class="number">0</span>]</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#  [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#  [15 16 17 18 19]], shape=(4, 5), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  5 10 15]</span></div><div class="line">          <span class="comment">#  [20 25 30 35]</span></div><div class="line">          <span class="comment">#  [40 45 50 55]], shape=(3, 4), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor([0 1 2 3 4], shape=(5,), dtype=int32)</span></div><div class="line">print(t4) <span class="comment"># tf.Tensor([ 0 20 40], shape=(3,), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="gather"><a href="#gather" class="headerlink" title="gather"></a><strong>gather</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = tf.gather(t, axis=<span class="number">0</span>, indices=[<span class="number">0</span>, <span class="number">2</span>])</div><div class="line">t2 = tf.gather(t, axis=<span class="number">0</span>, indices=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line">t3 = tf.gather(t, axis=<span class="number">1</span>, indices=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>])</div><div class="line">t4 = tf.gather(t, axis=<span class="number">1</span>, indices=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</div><div class="line">t5 = tf.gather(t, axis=<span class="number">2</span>, indices=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>])</div><div class="line">t6 = tf.gather(t, axis=<span class="number">2</span>, indices=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(2, 4, 5), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]]], shape=(3, 3, 5), dtype=int32)</span></div><div class="line">print(t4) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t5) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  2  1  4]</span></div><div class="line">          <span class="comment">#   [ 5  7  6  9]</span></div><div class="line">          <span class="comment">#   [10 12 11 14]</span></div><div class="line">          <span class="comment">#   [15 17 16 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 22 21 24]</span></div><div class="line">          <span class="comment">#   [25 27 26 29]</span></div><div class="line">          <span class="comment">#   [30 32 31 34]</span></div><div class="line">          <span class="comment">#   [35 37 36 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 42 41 44]</span></div><div class="line">          <span class="comment">#   [45 47 46 49]</span></div><div class="line">          <span class="comment">#   [50 52 51 54]</span></div><div class="line">          <span class="comment">#   [55 57 56 59]]], shape=(3, 4, 4), dtype=int32)</span></div><div class="line">print(t6) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  2  1  4  3]</span></div><div class="line">          <span class="comment">#   [ 5  7  6  9  8]</span></div><div class="line">          <span class="comment">#   [10 12 11 14 13]</span></div><div class="line">          <span class="comment">#   [15 17 16 19 18]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 22 21 24 23]</span></div><div class="line">          <span class="comment">#   [25 27 26 29 28]</span></div><div class="line">          <span class="comment">#   [30 32 31 34 33]</span></div><div class="line">          <span class="comment">#   [35 37 36 39 38]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 42 41 44 43]</span></div><div class="line">          <span class="comment">#   [45 47 46 49 48]</span></div><div class="line">          <span class="comment">#   [50 52 51 54 53]</span></div><div class="line">          <span class="comment">#   [55 57 56 59 58]]], shape=(3, 4, 5), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="gather-nd"><a href="#gather-nd" class="headerlink" title="gather_nd"></a><strong>gather_nd</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = tf.gather_nd(t, [<span class="number">0</span>])</div><div class="line">t2 = tf.gather_nd(t, [<span class="number">0</span>, <span class="number">1</span>])</div><div class="line">t3 = tf.gather_nd(t, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</div><div class="line">t4 = tf.gather_nd(t, [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</div><div class="line">t5 = tf.gather_nd(t, [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]])</div><div class="line">t6 = tf.gather_nd(t, [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>]])</div><div class="line">t7 = tf.gather_nd(t, [[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]])</div><div class="line">t8 = tf.gather_nd(t, [[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]]])</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#  [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#  [15 16 17 18 19]], shape=(4, 5), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor([5 6 7 8 9], shape=(5,), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(7, shape=(), dtype=int32)</span></div><div class="line">print(t4) <span class="comment"># tf.Tensor([7], shape=(1,), dtype=int32)</span></div><div class="line">print(t5) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [25 26 27 28 29]], shape=(2, 5), dtype=int32)</span></div><div class="line">print(t6) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [25 26 27 28 29]</span></div><div class="line">          <span class="comment">#  [50 51 52 53 54]], shape=(3, 5), dtype=int32)</span></div><div class="line">print(t7) <span class="comment"># tf.Tensor([ 0 26 52], shape=(3,), dtype=int32)</span></div><div class="line">print(t8) <span class="comment"># tf.Tensor([[ 0 26 52]], shape=(1, 3), dtype=int32)</span></div></pre></td></tr></table></figure><hr><h1 id="boolean-mask"><a href="#boolean-mask" class="headerlink" title="boolean_mask"></a><strong>boolean_mask</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">arr = tf.range(<span class="number">60</span>)</div><div class="line">t = tf.reshape(arr, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</div><div class="line">t1 = tf.boolean_mask(t, mask=[<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>])</div><div class="line">t2 = tf.boolean_mask(t, mask=[<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>], axis=<span class="number">1</span>)</div><div class="line">t3 = tf.boolean_mask(t, mask=[[<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">True</span>], [<span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">False</span>, <span class="keyword">True</span>], [<span class="keyword">False</span>, <span class="keyword">True</span>, <span class="keyword">False</span>, <span class="keyword">True</span>]])</div><div class="line">print(t) <span class="comment"># tf.Tensor(</span></div><div class="line">         <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">         <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">         <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">         <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">         <span class="comment">#   [25 26 27 28 29]</span></div><div class="line">         <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">         <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">         <span class="comment"># </span></div><div class="line">         <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">         <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">         <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">         <span class="comment">#   [55 56 57 58 59]]], shape=(3, 4, 5), dtype=int32)</span></div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [ 5  6  7  8  9]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(2, 4, 5), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#   [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#   [15 16 17 18 19]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[20 21 22 23 24]</span></div><div class="line">          <span class="comment">#   [30 31 32 33 34]</span></div><div class="line">          <span class="comment">#   [35 36 37 38 39]]</span></div><div class="line">          <span class="comment"># </span></div><div class="line">          <span class="comment">#  [[40 41 42 43 44]</span></div><div class="line">          <span class="comment">#   [50 51 52 53 54]</span></div><div class="line">          <span class="comment">#   [55 56 57 58 59]]], shape=(3, 3, 5), dtype=int32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 0  1  2  3  4]</span></div><div class="line">          <span class="comment">#  [10 11 12 13 14]</span></div><div class="line">          <span class="comment">#  [15 16 17 18 19]</span></div><div class="line">          <span class="comment">#  [20 21 22 23 24]</span></div><div class="line">          <span class="comment">#  [35 36 37 38 39]</span></div><div class="line">          <span class="comment">#  [45 46 47 48 49]</span></div><div class="line">          <span class="comment">#  [55 56 57 58 59]], shape=(7, 5), dtype=int32)</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow 数据类型</title>
    <link href="http://www.weichao.io/2019/05/06/TensorFlow-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.weichao.io/2019/05/06/TensorFlow-数据类型/</id>
    <published>2019-05-06T01:23:38.000Z</published>
    <updated>2019-05-20T01:27:46.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" title="https://study.163.com/course/courseMain.htm?courseId=1209092816&amp;share=1&amp;shareId=1143588469" target="_blank" rel="external">深度学习与 TensorFlow 2 入门实战</a></li><li><a href="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" title="https://github.com/dragen1860/TensorFlow-2.x-Tutorials" target="_blank" rel="external">TensorFlow-2.x-Tutorials</a></li></ul><hr><h1 id="list"><a href="#list" class="headerlink" title="list"></a><strong>list</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">1.2</span>, <span class="string">'Hello'</span>, (<span class="number">1</span>, <span class="number">2</span>), layers]</div><div class="line">[<span class="number">64</span>, <span class="number">32</span>, <span class="number">32</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><hr><h1 id="np-array"><a href="#np-array" class="headerlink" title="np.array"></a><strong>np.array</strong></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">64</span>, <span class="number">224</span>, <span class="number">224</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure><p>解决同类型数据运算。</p><p>深度计算之前已经设计好的科学计算库，不支持 GPU，不支持自动求导。TensorFlow 解决了这一问题。</p><hr><h1 id="tf-Tensor"><a href="#tf-Tensor" class="headerlink" title="tf.Tensor"></a><strong>tf.Tensor</strong></h1><h2 id="int-float-double-bool-string"><a href="#int-float-double-bool-string" class="headerlink" title="int, float, double, bool, string"></a><strong>int, float, double, bool, string</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">a = tf.constant(<span class="number">1</span>)</div><div class="line">print(a) <span class="comment"># tf.Tensor(1, shape=(), dtype=int32)</span></div><div class="line"></div><div class="line">a = tf.constant(<span class="number">1.</span>)</div><div class="line">print(a) <span class="comment"># tf.Tensor(1.0, shape=(), dtype=float32)</span></div><div class="line"></div><div class="line">a = tf.constant(<span class="number">2.2</span>, dtype=tf.int32)</div><div class="line">print(a) <span class="comment"># TypeError: Cannot convert provided value to EagerTensor. Provided value: 2.2 Requested dtype: int32</span></div><div class="line"></div><div class="line">a = tf.constant(<span class="number">2.2</span>, dtype=tf.double)</div><div class="line">print(a) <span class="comment"># tf.Tensor(2.2, shape=(), dtype=float64)</span></div><div class="line"></div><div class="line">a = tf.constant([<span class="keyword">True</span>, <span class="keyword">False</span>])</div><div class="line">print(a) <span class="comment"># tf.Tensor([ True False], shape=(2,), dtype=bool)</span></div><div class="line"></div><div class="line">a = tf.constant(<span class="string">'Hello, world!'</span>)</div><div class="line">print(a) <span class="comment"># tf.Tensor(b'Hello, world!', shape=(), dtype=string)</span></div></pre></td></tr></table></figure><h2 id="scalar"><a href="#scalar" class="headerlink" title="scalar"></a><strong>scalar</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.1</span></div></pre></td></tr></table></figure><h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a><strong>vector</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1.1</span>], [<span class="number">1.1</span>, <span class="number">1.2</span>]</div></pre></td></tr></table></figure><h2 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a><strong>matrix</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="number">1.1</span>, <span class="number">2.2</span>], [<span class="number">3.3</span>, <span class="number">4.4</span>], [<span class="number">5.5</span>, <span class="number">6.6</span>]]</div></pre></td></tr></table></figure><h2 id="tensor"><a href="#tensor" class="headerlink" title="tensor"></a><strong>tensor</strong></h2><p>rank &gt; 2</p><hr><h1 id="Tensor-Property"><a href="#Tensor-Property" class="headerlink" title="Tensor Property"></a><strong>Tensor Property</strong></h1><h2 id="切换-Tensor-到-CPU-或-GPU"><a href="#切换-Tensor-到-CPU-或-GPU" class="headerlink" title="切换 Tensor 到 CPU 或 GPU"></a><strong>切换 Tensor 到 CPU 或 GPU</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> tf.device(<span class="string">"cpu"</span>):</div><div class="line">    a = tf.constant([<span class="number">1</span>])</div><div class="line"><span class="keyword">with</span> tf.device(<span class="string">"gpu"</span>):</div><div class="line">    b = tf.range(<span class="number">4</span>)</div><div class="line">print(a.device) <span class="comment"># /job:localhost/replica:0/task:0/device:CPU:0</span></div><div class="line">print(b.device) <span class="comment"># /job:localhost/replica:0/task:0/device:GPU:0</span></div><div class="line"></div><div class="line">aa = a.gpu()</div><div class="line">bb = b.cpu()</div><div class="line">print(aa.device) <span class="comment"># /job:localhost/replica:0/task:0/device:GPU:0</span></div><div class="line">print(bb.device) <span class="comment"># /job:localhost/replica:0/task:0/device:CPU:0</span></div></pre></td></tr></table></figure><h2 id="Tensor-转-numpy"><a href="#Tensor-转-numpy" class="headerlink" title="Tensor 转 numpy"></a><strong>Tensor 转 numpy</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">b = tf.range(<span class="number">4</span>)</div><div class="line">bb = b.numpy()</div><div class="line">print(b) <span class="comment"># tf.Tensor([0 1 2 3], shape=(4,), dtype=int32)</span></div><div class="line">print(bb) <span class="comment"># [0 1 2 3]</span></div></pre></td></tr></table></figure><h2 id="numpy-转-Tensor"><a href="#numpy-转-Tensor" class="headerlink" title="numpy 转 Tensor"></a><strong>numpy 转 Tensor</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a = np.arange(<span class="number">5</span>)</div><div class="line">a1 = a.dtype</div><div class="line">a2 = tf.convert_to_tensor(a)</div><div class="line">a3 = tf.convert_to_tensor(a, dtype=tf.int64)</div><div class="line">print(a1) <span class="comment"># int32</span></div><div class="line">print(a2) <span class="comment"># tf.Tensor([0 1 2 3 4], shape=(5,), dtype=int32)</span></div><div class="line">print(a3) <span class="comment"># tf.Tensor([0 1 2 3 4], shape=(5,), dtype=int64)</span></div></pre></td></tr></table></figure><h2 id="int32-转-float32-double-int64"><a href="#int32-转-float32-double-int64" class="headerlink" title="int32 转 float32/double/int64"></a><strong>int32 转 float32/double/int64</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">b = tf.range(<span class="number">4</span>)</div><div class="line">b1 = tf.cast(b, dtype=tf.float32)</div><div class="line">b2 = tf.cast(b, dtype=tf.double)</div><div class="line">b3 = tf.cast(b, dtype=tf.int64)</div><div class="line">print(b) <span class="comment"># tf.Tensor([0 1 2 3], shape=(4,), dtype=int32)</span></div><div class="line">print(b1) <span class="comment"># tf.Tensor([0. 1. 2. 3.], shape=(4,), dtype=float32)</span></div><div class="line">print(b2) <span class="comment"># tf.Tensor([0. 1. 2. 3.], shape=(4,), dtype=float64)</span></div><div class="line">print(b3) <span class="comment"># tf.Tensor([0 1 2 3], shape=(4,), dtype=int64)</span></div><div class="line"></div><div class="line">a = tf.ones([])</div><div class="line">a1 = int(a)</div><div class="line">a2 = float(a)</div><div class="line">print(a) <span class="comment"># tf.Tensor(1.0, shape=(), dtype=float32)</span></div><div class="line">print(a1) <span class="comment"># 1</span></div><div class="line">print(a2) <span class="comment"># 1.0</span></div></pre></td></tr></table></figure><h2 id="int32-和-bool-的相互转换"><a href="#int32-和-bool-的相互转换" class="headerlink" title="int32 和 bool 的相互转换"></a><strong>int32 和 bool 的相互转换</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">b = tf.constant([<span class="number">0</span>, <span class="number">1</span>])</div><div class="line">b1 = tf.cast(b, dtype=tf.bool)</div><div class="line">b2 = tf.cast(b1, dtype=tf.int32)</div><div class="line">print(b1) <span class="comment"># tf.Tensor([False  True], shape=(2,), dtype=bool)</span></div><div class="line">print(b2) <span class="comment"># tf.Tensor([0 1], shape=(2,), dtype=int32)</span></div></pre></td></tr></table></figure><h2 id="Tensor-转-Variable"><a href="#Tensor-转-Variable" class="headerlink" title="Tensor 转 Variable"></a><strong>Tensor 转 Variable</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a = tf.range(<span class="number">5</span>)</div><div class="line">b = tf.Variable(a)</div><div class="line">print(b.trainable) <span class="comment"># True</span></div><div class="line"></div><div class="line">b1 = isinstance(b, tf.Tensor)</div><div class="line">b2 = isinstance(b, tf.Variable)</div><div class="line">b3 = tf.is_tensor(b)</div><div class="line">print(b1) <span class="comment"># False</span></div><div class="line">print(b2) <span class="comment"># True</span></div><div class="line">print(b3) <span class="comment"># True</span></div></pre></td></tr></table></figure><h2 id="获取-Tensor-的-rank"><a href="#获取-Tensor-的-rank" class="headerlink" title="获取 Tensor 的 rank"></a><strong>获取 Tensor 的 rank</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = tf.constant(<span class="number">1.1</span>)</div><div class="line">b = tf.constant([<span class="number">1.1</span>])</div><div class="line">print(a.ndim) <span class="comment"># 0</span></div><div class="line">print(b.ndim) <span class="comment"># 1</span></div><div class="line">print(tf.rank(a)) <span class="comment"># tf.Tensor(0, shape=(), dtype=int32)</span></div><div class="line">print(tf.rank(b)) <span class="comment"># tf.Tensor(1, shape=(), dtype=int32)</span></div></pre></td></tr></table></figure><h2 id="判断是否为-Tensor"><a href="#判断是否为-Tensor" class="headerlink" title="判断是否为 Tensor"></a><strong>判断是否为 Tensor</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">a = tf.constant([<span class="number">1.</span>])</div><div class="line">d = np.arange(<span class="number">4</span>)</div><div class="line">a1 = isinstance(a, tf.Tensor)</div><div class="line">a2 = tf.is_tensor(a)</div><div class="line">d1 = isinstance(d, tf.Tensor)</div><div class="line">d2 = tf.is_tensor(d)</div><div class="line">print(a1) <span class="comment"># True</span></div><div class="line">print(a2) <span class="comment"># True</span></div><div class="line">print(d1) <span class="comment"># False</span></div><div class="line">print(d2) <span class="comment"># False</span></div></pre></td></tr></table></figure><h2 id="获取-Tensor-的数据类型"><a href="#获取-Tensor-的数据类型" class="headerlink" title="获取 Tensor 的数据类型"></a><strong>获取 Tensor 的数据类型</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = tf.constant([<span class="number">1.</span>])</div><div class="line">d = np.arange(<span class="number">4</span>)</div><div class="line">print(a.dtype) <span class="comment"># &lt;dtype: 'float32'&gt;</span></div><div class="line">print(d.dtype) <span class="comment"># int32</span></div></pre></td></tr></table></figure><h2 id="判断-Tensor-是否为指定的数据类型"><a href="#判断-Tensor-是否为指定的数据类型" class="headerlink" title="判断 Tensor 是否为指定的数据类型"></a><strong>判断 Tensor 是否为指定的数据类型</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = tf.constant([<span class="number">1.</span>])</div><div class="line">d = np.arange(<span class="number">4</span>)</div><div class="line">print(a.dtype == tf.float32) <span class="comment"># True</span></div><div class="line">print(d.dtype == np.int32) <span class="comment"># True</span></div></pre></td></tr></table></figure><hr><h1 id="Tensor-初始化"><a href="#Tensor-初始化" class="headerlink" title="Tensor 初始化"></a><strong>Tensor 初始化</strong></h1><h2 id="from-numpy-list"><a href="#from-numpy-list" class="headerlink" title="from numpy, list"></a><strong>from numpy, list</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">t1 = tf.convert_to_tensor(np.ones([<span class="number">2</span>, <span class="number">3</span>]))</div><div class="line">t2 = tf.convert_to_tensor([<span class="number">2</span>, <span class="number">3</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[1. 1. 1.]</span></div><div class="line">          <span class="comment">#  [1. 1. 1.]], shape=(2, 3), dtype=float64)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor([2 3], shape=(2,), dtype=int32)</span></div></pre></td></tr></table></figure><h2 id="zeros"><a href="#zeros" class="headerlink" title="zeros"></a><strong>zeros</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t1 = tf.zeros([<span class="number">2</span>, <span class="number">3</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[0. 0. 0.]</span></div><div class="line">          <span class="comment">#  [0. 0. 0.]], shape=(2, 3), dtype=float32)</span></div></pre></td></tr></table></figure><h2 id="ones"><a href="#ones" class="headerlink" title="ones"></a><strong>ones</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t1 = tf.ones([<span class="number">2</span>, <span class="number">3</span>])</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[1. 1. 1.]</span></div><div class="line">          <span class="comment">#  [1. 1. 1.]], shape=(2, 3), dtype=float32)</span></div></pre></td></tr></table></figure><h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a><strong>fill</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t1 = tf.fill([<span class="number">2</span>, <span class="number">3</span>], <span class="number">3.14</span>)</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[3.14 3.14 3.14]</span></div><div class="line">          <span class="comment">#  [3.14 3.14 3.14]], shape=(2, 3), dtype=float32)</span></div></pre></td></tr></table></figure><h2 id="random"><a href="#random" class="headerlink" title="random"></a><strong>random</strong></h2><h3 id="normal-truncated-normal"><a href="#normal-truncated-normal" class="headerlink" title="normal, truncated_normal"></a><strong>normal, truncated_normal</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">t1 = tf.random.normal([<span class="number">2</span>, <span class="number">3</span>], mean=<span class="number">1</span>, stddev=<span class="number">1</span>)</div><div class="line">t2 = tf.random.normal([<span class="number">2</span>, <span class="number">3</span>], mean=<span class="number">1</span>, stddev=<span class="number">1</span>)</div><div class="line">t3 = tf.random.truncated_normal([<span class="number">2</span>, <span class="number">3</span>], mean=<span class="number">1</span>, stddev=<span class="number">1</span>)</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[1.2308737 0.8250756 2.6446304]</span></div><div class="line">          <span class="comment">#  [2.714213  2.0199542 1.3591613]], shape=(2, 3), dtype=float32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 1.5890408  -0.8608984   1.7205659 ]</span></div><div class="line">          <span class="comment">#  [ 1.9205048   0.7741975   0.73170424]], shape=(2, 3), dtype=float32)</span></div><div class="line">print(t3) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[ 1.3489898 -0.4739654  0.5768948]</span></div><div class="line">          <span class="comment">#  [ 2.3000512  0.7400613  1.8497746]], shape=(2, 3), dtype=float32)</span></div></pre></td></tr></table></figure><h3 id="uniform"><a href="#uniform" class="headerlink" title="uniform"></a><strong>uniform</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">t1 = tf.random.uniform([<span class="number">2</span>, <span class="number">3</span>], minval=<span class="number">0</span>, maxval=<span class="number">100</span>)</div><div class="line">print(t1) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[19.821571  44.24106   29.511225 ]</span></div><div class="line">          <span class="comment">#  [ 0.7015109  7.66474    5.251384 ]], shape=(2, 3), dtype=float32)</span></div></pre></td></tr></table></figure><h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a><strong>shuffle</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">id = tf.range(<span class="number">10</span>)</div><div class="line">id1 = tf.random.shuffle(id)</div><div class="line">print(id) <span class="comment"># tf.Tensor([0 1 2 3 4 5 6 7 8 9], shape=(10,), dtype=int32)</span></div><div class="line">print(id1) <span class="comment"># tf.Tensor([8 1 4 0 7 2 5 3 9 6], shape=(10,), dtype=int32)</span></div></pre></td></tr></table></figure><h2 id="constant"><a href="#constant" class="headerlink" title="constant"></a><strong>constant</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t1 = tf.constant(<span class="number">1</span>)</div><div class="line">print(t1) <span class="comment"># tf.Tensor(1, shape=(), dtype=int32)</span></div></pre></td></tr></table></figure><h2 id="range"><a href="#range" class="headerlink" title="range"></a><strong>range</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">t1 = tf.range(<span class="number">4</span>)</div><div class="line">t2 = tf.one_hot(t1, <span class="number">6</span>)</div><div class="line">print(t1) <span class="comment"># tf.Tensor([0 1 2 3], shape=(4,), dtype=int32)</span></div><div class="line">print(t2) <span class="comment"># tf.Tensor(</span></div><div class="line">          <span class="comment"># [[1. 0. 0. 0. 0. 0.]</span></div><div class="line">          <span class="comment">#  [0. 1. 0. 0. 0. 0.]</span></div><div class="line">          <span class="comment">#  [0. 0. 1. 0. 0. 0.]</span></div><div class="line">          <span class="comment">#  [0. 0. 0. 1. 0. 0.]], shape=(4, 6), dtype=float32)</span></div></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flutter 学习（0）</title>
    <link href="http://www.weichao.io/2018/12/06/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%89/"/>
    <id>http://www.weichao.io/2018/12/06/Flutter-学习（0）/</id>
    <published>2018-12-06T13:50:04.000Z</published>
    <updated>2018-12-07T11:03:52.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://flutter.io/" title="https://flutter.io/" target="_blank" rel="external">Flutter</a></li><li><a href="https://plugins.jetbrains.com/androidstudio" title="https://plugins.jetbrains.com/androidstudio" target="_blank" rel="external">Android Studio Plugins</a></li></ul><hr><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a><strong>搭建开发环境</strong></h1><h2 id="安装-Flutter-SDK"><a href="#安装-Flutter-SDK" class="headerlink" title="安装 Flutter SDK"></a><strong>安装 Flutter SDK</strong></h2><h3 id="下载-SDK"><a href="#下载-SDK" class="headerlink" title="下载 SDK"></a><strong>下载 SDK</strong></h3><p>打开下载 SDK 的<a href="https://flutter.io/docs/get-started/install/windows" title="https://flutter.io/docs/get-started/install/windows" target="_blank" rel="external">网站</a></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%891.png" alt=""></p><h3 id="安装-SDK"><a href="#安装-SDK" class="headerlink" title="安装 SDK"></a><strong>安装 SDK</strong></h3><p>1、下载并解压缩 zip 包到本地，找到 \flutter\bin\flutter.bat，双击运行</p><p>2、在 \flutter\bin 路径下打开 cmd，运行 <code>flutter --version</code> 验证是否安装成功</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%892.png" alt=""></p><h3 id="将-Flutter-加入环境变量"><a href="#将-Flutter-加入环境变量" class="headerlink" title="将 Flutter 加入环境变量"></a><strong>将 Flutter 加入环境变量</strong></h3><p>1、创建 Flutter 环境变量</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%893.png" alt=""></p><p>2、将 Flutter 环境变量加入 Path</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%894.png" alt=""><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%895.png" alt=""></p><p>3、重启 cmd，在非 \flutter\bin 路径下运行 <code>flutter --version</code> 验证是否加入成功</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%896.png" alt=""></p><h3 id="查询-Flutter-依赖是否完全已安装"><a href="#查询-Flutter-依赖是否完全已安装" class="headerlink" title="查询 Flutter 依赖是否完全已安装"></a><strong>查询 Flutter 依赖是否完全已安装</strong></h3><p>1、运行 <code>flutter doctor</code>，未安装的依赖会有相关提示</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%897.png" alt=""></p><p>2、根据提示安装依赖、插入设备</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%898.png" alt=""></p><p>3、再次查询，则没有问题了</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%899.png" alt=""></p><h2 id="Android-Studio-关联-Flutter"><a href="#Android-Studio-关联-Flutter" class="headerlink" title="Android Studio 关联 Flutter"></a><strong>Android Studio 关联 Flutter</strong></h2><h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a><strong>下载插件</strong></h3><p>1、打开下载插件的<a href="https://plugins.jetbrains.com/androidstudio" title="https://plugins.jetbrains.com/androidstudio" target="_blank" rel="external">网站</a></p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8910.png" alt=""></p><p>2、查看 Android Studio 对应的 Intellij 版本</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8911.png" alt=""><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8912.png" alt=""></p><p>3、搜索 Flutter，下载匹配的版本，下载下来的是个 zip 包</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8913.png" alt=""></p><p>4、因为 Flutter 依赖 Dart，所以参照 Flutter， 一并下载了</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8914.png" alt=""></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a><strong>安装插件</strong></h3><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8915.png" alt=""><br><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8916.png" alt=""></p><p>选择下载好的 Dart 和 Flutter 的 zip 包并安装，重新启动 Android Studio。</p><h3 id="验证关联成功"><a href="#验证关联成功" class="headerlink" title="验证关联成功"></a><strong>验证关联成功</strong></h3><p>Android Studio 可以创建 Flutter 项目。</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8917.png" alt=""></p><hr><h1 id="运行-demo"><a href="#运行-demo" class="headerlink" title="运行 demo"></a><strong>运行 demo</strong></h1><p>1、新建 Flutter 项目</p><p>2、运行</p><p><img src="https://weichao-io-1257283924.cos.ap-beijing.myqcloud.com/qldownload/Flutter-%E5%AD%A6%E4%B9%A0%EF%BC%880%EF%BC%8918.jpeg" alt=""></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fl
      
    
    </summary>
    
    
  </entry>
  
</feed>
