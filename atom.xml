<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>『魏超』的 blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.weichao.io/"/>
  <updated>2017-10-23T15:44:48.860Z</updated>
  <id>http://www.weichao.io/</id>
  
  <author>
    <name>魏超</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>相机的分辨率</title>
    <link href="http://www.weichao.io/2017/10/22/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <id>http://www.weichao.io/2017/10/22/相机的分辨率/</id>
    <published>2017-10-22T13:12:11.000Z</published>
    <updated>2017-10-23T15:44:48.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="显示区域"><a href="#显示区域" class="headerlink" title="显示区域"></a><strong>显示区域</strong></h1><p><img src="http://otkw6sse5.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87_1.png" alt=""></p><p>如图所示，长、宽同一比例的分辨率显示的区域相同，不同比例对应圆中不同的最大的内接矩形。</p><hr><h1 id="预览分辨率"><a href="#预览分辨率" class="headerlink" title="预览分辨率"></a><strong>预览分辨率</strong></h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h2><ol><li><p>全屏预览</p></li><li><p>预览尽可能没有拉伸</p></li><li><p>预览尽可能清晰</p></li></ol><h2 id="全屏预览"><a href="#全屏预览" class="headerlink" title="全屏预览"></a><strong>全屏预览</strong></h2><h3 id="隐藏状态栏、标题栏、虚拟按键栏"><a href="#隐藏状态栏、标题栏、虚拟按键栏" class="headerlink" title="隐藏状态栏、标题栏、虚拟按键栏"></a><strong>隐藏状态栏、标题栏、虚拟按键栏</strong></h3><ol><li><p>在 activity 中加入代码</p><pre><code>if (Build.VERSION.SDK_INT &gt; 11 &amp;&amp; Build.VERSION.SDK_INT &lt; 19) {    getWindow().getDecorView().setSystemUiVisibility(View.GONE);} else if (Build.VERSION.SDK_INT &gt;= 19) {    View decorView = getWindow().getDecorView();    int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY            | View.SYSTEM_UI_FLAG_FULLSCREEN;    decorView.setSystemUiVisibility(uiOptions);}</code></pre></li></ol><h3 id="获取屏幕分辨率"><a href="#获取屏幕分辨率" class="headerlink" title="获取屏幕分辨率"></a><strong>获取屏幕分辨率</strong></h3><ol><li><p>HardwareInfoUtil 的方法</p><pre><code>public static DisplayMetrics getRealDisplayMetrics(Context context) {    DisplayMetrics displayMetrics = new DisplayMetrics();    WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);    try {        Class clazz = Class.forName(&quot;android.view.Display&quot;);        Method method = clazz.getMethod(&quot;getRealMetrics&quot;, DisplayMetrics.class);        method.invoke(wm.getDefaultDisplay(), displayMetrics);    } catch (Exception e) {        e.printStackTrace();    }    return displayMetrics;}</code></pre></li><li><p>调用</p><pre><code>DisplayMetrics displayMetrics = HardwareInfoUtil.getRealDisplayMetrics(context);int height = displayMetrics.heightPixels;int width = displayMetrics.widthPixels;Log.i(TAG, &quot;屏幕分辨率:（&quot; + width + &quot;,&quot; + height + &quot;)&quot;);</code></pre></li></ol><h2 id="预览尽可能没有拉伸"><a href="#预览尽可能没有拉伸" class="headerlink" title="预览尽可能没有拉伸"></a><strong>预览尽可能没有拉伸</strong></h2><h3 id="获取设备支持的预览分辨率"><a href="#获取设备支持的预览分辨率" class="headerlink" title="获取设备支持的预览分辨率"></a><strong>获取设备支持的预览分辨率</strong></h3><pre><code>Camera.Parameters parameters = camera.getParameters();List&lt;Camera.Size&gt; rawSupportedSizes = parameters.getSupportedPreviewSizes();</code></pre><p>如果获取不到设备支持的预览分辨率，则获取默认的预览分辨率，再判断该分辨率是否存在，如果存在，则使用该分辨率作为预览分辨率。</p><pre><code>if (rawSupportedSizes == null) {    Log.w(TAG, &quot;Device returned no supported preview sizes; using default&quot;);    Camera.Size defaultSize = parameters.getPreviewSize();    if (defaultSize == null) {        throw new IllegalStateException(&quot;Parameters contained no preview size!&quot;);    }    return new Point(defaultSize.width, defaultSize.height);}</code></pre><p>如果能获取到设备支持的预览分辨率，则打印所有预览分辨率。</p><pre><code>if (Log.isLoggable(TAG, Log.INFO)) {    StringBuilder previewSizesString = new StringBuilder();    for (Camera.Size size : rawSupportedSizes) {        previewSizesString.append(size.width).append(&apos;x&apos;).append(size.height).append(&apos; &apos;);    }    Log.i(TAG, &quot;Supported preview sizes: &quot; + previewSizesString);}</code></pre><h3 id="选择和屏幕分辨率比例最接近的预览分辨率"><a href="#选择和屏幕分辨率比例最接近的预览分辨率" class="headerlink" title="选择和屏幕分辨率比例最接近的预览分辨率"></a><strong>选择和屏幕分辨率比例最接近的预览分辨率</strong></h3><p>最佳的预览分辨率就是屏幕分辨率，所以先判断设备支持的预览分辨率中是否包含屏幕分辨率，如果包含，则直接使用该分辨率。</p><pre><code>Camera.Size bestSize = camera.new Size(screenResolution.x, screenResolution.y);if (rawSupportedSizes.contains(bestSize)) {    return new Point(bestSize.width, bestSize.height);}</code></pre><p>如果设备支持的预览分辨率中不包含屏幕分辨率，则需要遍历预览分辨率，计算每个分辨率的长、宽比，选择其中和屏幕分辨率长、宽比最接近的。</p><pre><code>bestSize = null;float screenRatio = screenResolution.y * 1.0f / screenResolution.x;float bestRatio = Integer.MAX_VALUE;for (Camera.Size size : rawSupportedSizes) {    float aspectRatio = size.height * 1.0f / size.width;    float ratioSub = Math.abs(aspectRatio - screenRatio);    if (ratioSub &lt; bestRatio) {        bestRatio = ratioSub;        bestSize = size;    }}</code></pre><h2 id="预览尽可能清晰"><a href="#预览尽可能清晰" class="headerlink" title="预览尽可能清晰"></a><strong>预览尽可能清晰</strong></h2><h3 id="选择比屏幕分辨率稍高或接近的预览分辨率"><a href="#选择比屏幕分辨率稍高或接近的预览分辨率" class="headerlink" title="选择比屏幕分辨率稍高或接近的预览分辨率"></a><strong>选择比屏幕分辨率稍高或接近的预览分辨率</strong></h3><p>在上面的基础上添加处理，如果预览分辨率的长、宽比一样，且都是最接近屏幕分辨率的长、宽比时，比较预览分辨率宽距离屏幕宽的差，如果差不一样，选择差小的，如果差一样，选择预览分辨率大的。</p><pre><code>int maxHeight = 0;bestSize = null;float screenRatio = screenResolution.y * 1.0f / screenResolution.x;float bestRatio = Integer.MAX_VALUE;for (Camera.Size size : rawSupportedSizes) {    float aspectRatio = size.height * 1.0f / size.width;    float ratioSub = Math.abs(aspectRatio - screenRatio);    if (ratioSub &lt; bestRatio) {        bestRatio = ratioSub;        maxHeight = size.height;        bestSize = size;    } else if (ratioSub == bestRatio) {        int sizeHeight2ScreenHeight = Math.abs(size.height - screenResolution.y);        int maxHeight2ScreenHeight = Math.abs(maxHeight - screenResolution.y);        if ((sizeHeight2ScreenHeight &lt; maxHeight2ScreenHeight) || (sizeHeight2ScreenHeight == maxHeight2ScreenHeight &amp;&amp; size.height &gt; screenResolution.y)) {            maxHeight = size.height;            bestSize = size;        }    }}</code></pre><hr><h1 id="拍照分辨率"><a href="#拍照分辨率" class="headerlink" title="拍照分辨率"></a><strong>拍照分辨率</strong></h1><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a><strong>需求</strong></h2><ol><li><p>裁剪图片在预览区域中指定方框中的区域，例如：</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87_2.png" alt=""></p><p> 黑框表示全屏预览的区域，红框表示裁剪区域，红框边长为屏幕高度的 2/3，水平、垂直方向均居中。</p></li><li><p>裁剪区域的图片分辨率为 1080x1080</p></li><li><p>裁剪区域的图片尽量不失真</p></li></ol><h2 id="裁剪图片在预览区域中指定方框中的区域"><a href="#裁剪图片在预览区域中指定方框中的区域" class="headerlink" title="裁剪图片在预览区域中指定方框中的区域"></a><strong>裁剪图片在预览区域中指定方框中的区域</strong></h2><h3 id="获取设备支持的拍照分辨率"><a href="#获取设备支持的拍照分辨率" class="headerlink" title="获取设备支持的拍照分辨率"></a><strong>获取设备支持的拍照分辨率</strong></h3><pre><code>Camera.Parameters parameters = camera.getParameters();List&lt;Camera.Size&gt; rawSupportedSizes = parameters.getSupportedPictureSizes();</code></pre><p>如果获取不到设备支持的拍照分辨率，则获取默认的拍照分辨率，再判断该分辨率是否存在，如果存在，则使用该分辨率作为拍照分辨率。</p><pre><code>if (rawSupportedSizes == null) {    Log.w(TAG, &quot;Device returned no supported picture sizes; using default&quot;);    Camera.Size defaultSize = parameters.getPictureSize();    if (defaultSize == null) {        throw new IllegalStateException(&quot;Parameters contained no picture size!&quot;);    }    return new Point(defaultSize.width, defaultSize.height);}</code></pre><p>如果能获取到设备支持的拍照分辨率，则打印所有拍照分辨率。</p><pre><code>if (Log.isLoggable(TAG, Log.INFO)) {    StringBuilder pictureSizesString = new StringBuilder();    for (Camera.Size size : rawSupportedSizes) {        pictureSizesString.append(size.width).append(&apos;x&apos;).append(size.height).append(&apos; &apos;);    }    Log.i(TAG, &quot;Supported picture sizes: &quot; + pictureSizesString);}</code></pre><h3 id="裁剪图片在预览区域中指定方框中的区域-1"><a href="#裁剪图片在预览区域中指定方框中的区域-1" class="headerlink" title="裁剪图片在预览区域中指定方框中的区域"></a><strong>裁剪图片在预览区域中指定方框中的区域</strong></h3><h4 id="预览分辨率和拍照分辨率一致"><a href="#预览分辨率和拍照分辨率一致" class="headerlink" title="预览分辨率和拍照分辨率一致"></a><strong>预览分辨率和拍照分辨率一致</strong></h4><ol><li><p>BitmapUtil 的方法</p><pre><code>public static Bitmap createSquareCropBitmap(Bitmap bitmap) {    int width = bitmap.getWidth();    int height = bitmap.getHeight();    int cropWidthIndex = 0, cropHeightIndex = 0;    int cropWidth = width;    int cropHeight = height;    if (width == height) {        return bitmap;    } else if (width &gt; height) {        cropWidthIndex = (width - height) &gt;&gt; 1;        cropWidth = height;    } else {        cropHeightIndex = (height - width) &gt;&gt; 1;        cropHeight = width;    }    return Bitmap.createBitmap(bitmap, cropWidthIndex, cropHeightIndex, cropWidth, cropHeight);}public static Bitmap createCropBitmap(Bitmap bitmap, float cropXPercent, float cropYPercent) {    if (cropXPercent &lt; 0) {        cropXPercent = 0;    }    if (cropYPercent &lt; 0) {        cropYPercent = 0;    }    int width = bitmap.getWidth();    int height = bitmap.getHeight();    int cropWidthIndex = (int) (width * cropXPercent);    int cropHeightIndex = (int) (height * cropYPercent);    int cropWidth = width - (cropWidthIndex &lt;&lt; 1);    int cropHeight = height - (cropHeightIndex &lt;&lt; 1);    return Bitmap.createBitmap(bitmap, cropWidthIndex, cropHeightIndex, cropWidth, cropHeight);}</code></pre></li><li><p>调用</p><pre><code>Bitmap squareCropBitmap = BitmapUtil.createSquareCropBitmap(bitmap);Bitmap cropBitmap = BitmapUtil.createCropBitmap(squareCropBitmap, CameraActivity.RED_LINE_MARGIN, CameraActivity.RED_LINE_MARGIN);</code></pre></li></ol><h4 id="预览分辨率和拍照分辨率不一致"><a href="#预览分辨率和拍照分辨率不一致" class="headerlink" title="预览分辨率和拍照分辨率不一致"></a><strong>预览分辨率和拍照分辨率不一致</strong></h4><ol><li><p>获取预览分辨率，比如 previewRatio（在上面设置预览分辨率时保存，且值为宽:长，因为容易整除），拍照分辨率 pictureRatio</p></li><li><p>获取因拍照分辨率和预览分辨率不一致导致的自动被裁剪/添加的区域，比如预览分辨率是 16:9，拍照分辨率是 4:3</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87_3.png" alt=""></p><p> 实际拍出的照片区域和在屏幕中预览的区域不一致，再按照原来的比例在图片中裁剪，裁剪所得的照片并不是预览时方框中显示的区域，垂直方向需要多裁剪 x，水平方向需要少裁剪 y。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87_4.png" alt=""></p></li><li><p>x 计算</p><p> 为了有助于计算，添加一个辅助矩形，该矩形和预览分辨率有相同长，但比例为 4:3，所以<br> $$lx’ = \frac{16a * pictureRatio}{2}$$<br> ，如果不是因为相机传感器是圆形的，实际 x 应该是<br> $$x’ = \frac{16a * pictureRatio - 16a * previewRatio}{2 * 16a * pictureRatio} = \frac{pictureRatio - previewRatio}{2 * pictureRatio}$$</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87_5.png" alt=""></p><p> 由于相机传感器是圆形的，所以 lx’ 缩小成 lx，x’ 缩小成 x</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%9B%B8%E6%9C%BA%E7%9A%84%E5%88%86%E8%BE%A8%E7%8E%87_6.png" alt=""></p><p> 因为圆，所以<br> $$t1 = t4$$<br> 即<br> $$t2^2 + t3^2 = t5^2 + t6^2$$<br> 因为<br> $$t2 = t3 * pictureRatio，t5 = t6 * previewRatio$$<br> 所以<br> $${(t3 * pictureRatio)}^2 + t3^2 = {(t6 * previewRatio)}^2 + t6^2$$<br> 即<br> $${(1 + pictureRatio)}^2 * t3^2 = {(1 + previewRatio)}^2 * t6^2$$<br> 即<br> $$\frac{t3}{t6} = \sqrt{\frac{(1 + previewRatio)}{(1 + pictureRatio)}}$$<br> 因为三角形相似，所以<br> $$\frac{lx}{lx’} = \frac{t3}{t6} = \sqrt{\frac{(1 + previewRatio)}{(1 + pictureRatio)}}$$<br> 则<br> $$x = x’ - \frac{lx’ - lx}{lx’} = x’ - 1 + \frac{lx}{lx’} = \frac{pictureRatio - previewRatio}{2 * pictureRatio} - 1 + \sqrt{\frac{(1 + previewRatio)}{(1 + pictureRatio)}}$$</p></li><li><p>y 计算</p><p> $$y = \frac{t6 - t3}{t3} = \frac{t6}{t3} - 1 = \frac{1}{\sqrt{\frac{(1 + previewRatio)}{(1 + pictureRatio)}}} - 1$$</p></li><li><p>BitmapUtil 的方法</p><pre><code>public static AutoCropPercent getPreview2PictureAutoCropPercent(float pictureRatio, float previewRatio) {    if (pictureRatio == previewRatio) {        return new AutoCropPercent(0, 0);    } else {        float sqrt = (float) (Math.sqrt((1 + previewRatio) / (1 + pictureRatio)));        float ap = (pictureRatio - previewRatio) / (2 * pictureRatio) - 1 + sqrt;        float bp = 1.0f / sqrt - 1;        return new AutoCropPercent(-bp, ap);    }}</code></pre></li><li><p>调用</p><pre><code>BitmapUtil.AutoCropPercent autoCropPercent = BitmapUtil.getPreview2PictureAutoCropPercent(aspectRatio, ratio);Bitmap cropBitmap = BitmapUtil.createCropBitmap(bitmap, 0, CameraActivity.RED_LINE_MARGIN + autoCropPercent.getYp());cropBitmap = BitmapUtil.createSquareCropBitmap(cropBitmap);</code></pre></li></ol><h2 id="裁剪区域的图片分辨率为-1080x1080"><a href="#裁剪区域的图片分辨率为-1080x1080" class="headerlink" title="裁剪区域的图片分辨率为 1080x1080"></a><strong>裁剪区域的图片分辨率为 1080x1080</strong></h2><pre><code>Bitmap.createScaledBitmap(cropBitmap, CameraActivity.PICTURE_WIDTH, CameraActivity.PICTURE_WIDTH, false);</code></pre><h2 id="裁剪区域的图片尽量不失真"><a href="#裁剪区域的图片尽量不失真" class="headerlink" title="裁剪区域的图片尽量不失真"></a><strong>裁剪区域的图片尽量不失真</strong></h2><p>遍历设备支持的拍照分辨率，获取拍照分辨率相对于预览分辨率由于长、宽比例变化（如果有的话）导致的水平、垂直方向裁剪比例的变化，将该变化计算到图片裁剪后的高度，确保图片宽&gt;=1080（因为长&gt;=宽，所以不用考虑长）。在未找到能获取宽&gt;=1080的分辨率时，保留能获取宽最大的拍照分辨率，已找到能获取宽&gt;=1080的分辨率后，保留规格最小的。</p><pre><code>int minLength = Integer.MAX_VALUE;int maxY = 0;bestSize = null;boolean hasLegalBestSize = false;HashMap&lt;Float, BitmapUtil.AutoCropPercent&gt; autoCropPercentMap = new HashMap&lt;&gt;();StringBuilder pictureFitPreviewSizesString = new StringBuilder();for (Camera.Size size : rawSupportedSizes) {    float aspectRatio = size.height * 1.0f / size.width;    BitmapUtil.AutoCropPercent autoCropPercent;    if (autoCropPercentMap.containsKey(aspectRatio)) {        autoCropPercent = autoCropPercentMap.get(aspectRatio);    } else {        autoCropPercent = BitmapUtil.getPreview2PictureAutoCropPercent(aspectRatio, ratio);        autoCropPercentMap.put(aspectRatio, autoCropPercent);    }    float yMargin = CameraActivity.RED_LINE_MARGIN + autoCropPercent.getYp();    int y = (int) (size.height * (1 - 2 * yMargin) + 0.5f);    if (hasLegalBestSize &amp;&amp; y &lt; CameraActivity.PICTURE_WIDTH) {        continue;    }    if (!hasLegalBestSize &amp;&amp; y &gt;= CameraActivity.PICTURE_WIDTH) {        hasLegalBestSize = true;        pictureFitPreviewSizesString.append(size.width).append(&apos;x&apos;).append(size.height).append(&apos; &apos;);        minLength = size.height * size.width;        bestSize = size;        mAutoCropPercent = autoCropPercent;        continue;    }    if (hasLegalBestSize) {        pictureFitPreviewSizesString.append(size.width).append(&apos;x&apos;).append(size.height).append(&apos; &apos;);    }    if (hasLegalBestSize) {        int length = size.height * size.width;        if (length &lt; minLength) {            minLength = length;            bestSize = size;            mAutoCropPercent = autoCropPercent;        }    } else {        if (y &gt; maxY) {            maxY = y;            bestSize = size;            mAutoCropPercent = autoCropPercent;        }    }}Log.i(TAG, &quot;Supported picture fit preview sizes: &quot; + pictureFitPreviewSizesString);if (bestSize != null) {    return new Point(bestSize.width, bestSize.height);}</code></pre><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;显示区域&quot;&gt;&lt;a href=&quot;#显示区域&quot; class=&quot;headerlink&quot; title=&quot;显示区域&quot;&gt;&lt;/a&gt;&lt;strong&gt;显示区域&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://otkw6sse5.bkt.clouddn.com/%E
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>编译、运行源码</title>
    <link href="http://www.weichao.io/2017/10/15/%E7%BC%96%E8%AF%91%E3%80%81%E8%BF%90%E8%A1%8C%E6%BA%90%E7%A0%81/"/>
    <id>http://www.weichao.io/2017/10/15/编译、运行源码/</id>
    <published>2017-10-15T06:18:51.000Z</published>
    <updated>2017-10-23T14:21:04.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://source.android.com/" title="https://source.android.com/" target="_blank" rel="external">Android Open Source Project</a></li><li><a href="http://blog.csdn.net/gjy211/article/details/53488377" title="http://blog.csdn.net/gjy211/article/details/53488377" target="_blank" rel="external">手动编译 Android 源码</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" title="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="external">Android 镜像使用帮助</a></li></ul><hr><h1 id="软、硬件环境"><a href="#软、硬件环境" class="headerlink" title="软、硬件环境"></a><strong>软、硬件环境</strong></h1><ol><li><p>PC</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E3%80%81%E8%BF%90%E8%A1%8C%E6%BA%90%E7%A0%81_1.png" alt=""></p></li><li><p>手机</p><p> Pixel XL 欧版 32GB 银色</p></li></ol><hr><h1 id="构建编译环境"><a href="#构建编译环境" class="headerlink" title="构建编译环境"></a><strong>构建编译环境</strong></h1><h2 id="安装-Git-并配置用户名、密码"><a href="#安装-Git-并配置用户名、密码" class="headerlink" title="安装 Git 并配置用户名、密码"></a><strong>安装 Git 并配置用户名、密码</strong></h2><p>在命令行运行：</p><pre><code>$ sudo apt-get install git $ git config --global user.email &quot;xx@xx.com&quot;$ git config --global user.name &quot;xx&quot;</code></pre><h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a><strong>安装 JDK</strong></h2><p>在命令行运行：</p><pre><code>$ sudo apt-get update$ sudo apt-get install openjdk-8-jdk</code></pre><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a><strong>安装依赖</strong></h2><p>在命令行运行：</p><pre><code>$ sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib $ sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 $ sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 $ sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev$ sudo apt-get install git-core gnupg flex bison gperf build-essential  $ sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib $ sudo apt-get install libc6-dev-i386 $ sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev $ sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4$ sudo apt-get install lib32z-dev ccache</code></pre><hr><h1 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a><strong>下载源码</strong></h1><h2 id="安装-Repo-工具"><a href="#安装-Repo-工具" class="headerlink" title="安装 Repo 工具"></a><strong>安装 Repo 工具</strong></h2><blockquote><p>Repo 工具通过调用 Git 命令实现对 AOSP 的管理。</p></blockquote><ol><li><p>确保主目录下有一个 bin/ 目录，并且该目录包含在路径中</p><p> 在命令行运行：</p><pre><code>$ mkdir ~/bin$ PATH=~/bin:$PATH</code></pre></li><li><p>下载 Repo 工具，并确保它可执行</p><p> 在命令行运行：</p><pre><code>$ curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo$ chmod a+x ~/bin/repo</code></pre></li><li><p>注意！以下 URL 不可用：</p><pre><code>$ curl https://storage-googleapis.lug.ustc.edu.cn/git-repo-downloads/repo &gt; ~/bin/repo</code></pre><p> 否则会报错：</p><pre><code>line 1: html: No such file or directoryline 2: syntax error near unexpected token `&lt;&apos;line 2: `&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/hea&apos;&gt;</code></pre></li><li><p>如果下载失败，原因是未翻墙，可在别处下载好并复制到特定目录中</p><p> 在命令行运行：</p><pre><code>$ cp repo ~/bin</code></pre></li></ol><h2 id="同步源码"><a href="#同步源码" class="headerlink" title="同步源码"></a><strong>同步源码</strong></h2><ol><li><p>下载初始化包</p><p> 在命令行运行：</p><pre><code>$ wget https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar</code></pre></li><li><p>解压缩下载的 tar 文件</p><p> 在命令行运行：</p><pre><code>$ tar xf aosp-latest.tar</code></pre></li><li><p>进入 aosp 目录</p><p> 在命令行运行：</p><pre><code>$ cd aosp</code></pre></li><li><p>修改 repo 文件</p><p> 在命令行运行：</p><pre><code>$ sudo gedit ~/bin/repo</code></pre><p> 修改<code>REPO_URL = &#39;https://gerrit.googlesource.com/git-repo&#39;</code>为<code>REPO_URL = &#39;https://gerrit-google.tuna.tsinghua.edu.cn/git-repo&#39;</code></p><p> 否则同步源码树时会报错：</p><pre><code>fatal: unable to access &apos;https://gerrit.googlesource.com/git-repo/&apos;: Failed to connect to gerrit.googlesource.com port 443: Connection timed outfatal: unable to access &apos;https://gerrit.googlesource.com/git-repo/&apos;: Failed to connect to gerrit.googlesource.com port 443: Connection timed outerror: Cannot fetch repo</code></pre></li><li><p>查询版本</p><p> 登录<a href="https://source.android.com/source/build-numbers#source-code-tags-and-builds" title="https://source.android.com/source/build-numbers#source-code-tags-and-builds" target="_blank" rel="external">源代码标记和细分版本</a>查看，比如 Pixel XL 最新的是 android-7.1.1_r26。</p></li><li><p>设置获取的源码的版本</p><p> 在命令行运行：</p><pre><code>$ repo init -b android-7.1.1_r26</code></pre></li><li><p>同步源码树</p><p> 在命令行运行：</p><pre><code>$ repo sync</code></pre></li><li><p>同步完成后 aosp 会显示内容</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E3%80%81%E8%BF%90%E8%A1%8C%E6%BA%90%E7%A0%81_2.png" alt=""></p></li></ol><hr><h1 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a><strong>编译源码</strong></h1><h2 id="设置环境"><a href="#设置环境" class="headerlink" title="设置环境"></a><strong>设置环境</strong></h2><ol><li><p>执行 envsetup.sh 脚本</p><p> 在命令行运行：</p><pre><code>$ source build/envsetup.sh</code></pre></li></ol><h2 id="设置目标"><a href="#设置目标" class="headerlink" title="设置目标"></a><strong>设置目标</strong></h2><ol><li><p>获取目标</p><blockquote><p>目标就是生成的镜像要运行在什么样的设备上。</p><p>登录<a href="https://source.android.com/source/running#selecting-device-build" title="https://source.android.com/source/running#selecting-device-build" target="_blank" rel="external">选择设备编译系统</a>查看，BUILD 为 <code>aosp_x86_64</code> 对应 Intel 平台的模拟器，BUILD 为 <code>aosp_marlin</code> 对应 Pixel XL。</p><p>BUILD 包含 <code>arm</code>，表示系统运行在 arm 架构的处理器上，<code>arm64</code> 表示系统运行在 64 位 arm 架构的处理器上。<code>x86</code> 和 <code>mips</code> 同理。</p><p>BUILDTYPE 是 <code>user</code>，表示编译出的系统镜像是可以用来正式发布到市场的版本，没有 root 权限和 debug 权限。<code>userdebug</code> 表示有 root 权限和 debug 权限。<code>eng</code> 表示系统镜像是开发版，有最大的权限。</p></blockquote><p> 在命令行运行：</p><pre><code>$ lunch</code></pre><p> 会打印出所有目标，通过输入序号可以选择目标：</p><pre><code>You&apos;re building on LinuxLunch menu... pick a combo:     1. aosp_arm-eng     2. aosp_arm64-eng     3. aosp_mips-eng     4. aosp_mips64-eng     5. aosp_x86-eng     6. aosp_x86_64-eng     7. full_fugu-userdebug     8. aosp_fugu-userdebug     9. car_emu_arm64-userdebug     10. car_emu_arm-userdebug     11. car_emu_x86_64-userdebug     12. car_emu_x86-userdebug     13. mini_emulator_arm64-userdebug     14. m_e_arm-userdebug     15. m_e_mips64-eng     16. m_e_mips-userdebug     17. mini_emulator_x86_64-userdebug     18. mini_emulator_x86-userdebug     19. uml-userdebug     20. aosp_dragon-userdebug     21. aosp_dragon-eng     22. aosp_marlin-userdebug     23. aosp_marlin_svelte-userdebug     24. aosp_sailfish-userdebug     25. aosp_angler-userdebug     26. aosp_bullhead-userdebug     27. aosp_bullhead_svelte-userdebug     28. hikey-userdebug     29. hikey960-userdebugWhich would you like? [aosp_arm-eng] 6============================================PLATFORM_VERSION_CODENAME=PPLATFORM_VERSION=PTARGET_PRODUCT=aosp_x86_64TARGET_BUILD_VARIANT=engTARGET_BUILD_TYPE=releaseTARGET_PLATFORM_VERSION=PPR1TARGET_BUILD_APPS=TARGET_ARCH=x86_64TARGET_ARCH_VARIANT=x86_64TARGET_CPU_VARIANT=TARGET_2ND_ARCH=x86TARGET_2ND_ARCH_VARIANT=x86_64TARGET_2ND_CPU_VARIANT=HOST_ARCH=x86_64HOST_2ND_ARCH=x86HOST_OS=linuxHOST_OS_EXTRA=Linux-4.4.0-59-generic-x86_64-Ubuntu-16.04.1-LTSHOST_CROSS_OS=windowsHOST_CROSS_ARCH=x86HOST_CROSS_2ND_ARCH=x86_64HOST_BUILD_TYPE=releaseBUILD_ID=OCOUT_DIR=outAUX_OS_VARIANT_LIST=============================================</code></pre></li><li><p>也可以直接选择目标</p><p> 在命令行运行：</p><pre><code>$ lunch aosp_x86_64-eng</code></pre></li><li><p>设置 8 个线程参与编译，并开始编译</p><p> 在命令行运行：</p><pre><code>$ make -j8</code></pre><p> 当看到<code>#### build completed successfully (01:45:47 (hh:mm:ss)) ####</code>即表示编译成功，括号内为编译共计耗时。</p></li></ol><hr><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a><strong>运行</strong></h1><h2 id="在模拟器中运行"><a href="#在模拟器中运行" class="headerlink" title="在模拟器中运行"></a><strong>在模拟器中运行</strong></h2><ol><li><p>如果不是刚刚执行过编译，则需要在命令行运行：</p><pre><code>$ source build/envsetup.sh$ lunch aosp_x86_64-eng</code></pre></li><li><p>运行</p><p> 在命令行运行：</p><pre><code>$ emulator -memory 2048 -partition-size 4096</code></pre><p> 运行成功：</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E3%80%81%E8%BF%90%E8%A1%8C%E6%BA%90%E7%A0%81_3.png" alt=""></p></li></ol><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a><strong>配置参数</strong></h3><ol><li><p>增加 system/data 分区大小</p><p> 在命令行运行：</p><pre><code>$ emulator -partition-size 4096</code></pre><p> 否则会报错：</p><pre><code>emulator: WARNING: system partition size adjusted to match image file (2048 MB &gt; 200 MB)emulator: WARNING: data partition size adjusted to match image file (550 MB &gt; 200 MB)</code></pre></li><li><p>增加 RAM 大小</p><p> 在命令行运行：</p><pre><code>$ emulator -memory 2048</code></pre><p> 否则会报错：</p><pre><code>emulator: WARNING: Increasing RAM size to 1GB</code></pre><p> 设置成功：</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/%E7%BC%96%E8%AF%91%E3%80%81%E8%BF%90%E8%A1%8C%E6%BA%90%E7%A0%81_4.png" alt=""></p></li></ol><blockquote><p>模拟器运行所需要的 4 个文件包括：<code>Linux Kernel</code>、<code>system.img</code>、<code>userdate.img</code>、<code>ramdisk.img</code>。</p><p>aosp_arm-eng 使用的是 prebuilds/qemu-kernel/arm/kernel-qemu 目录中的 <code>Linux Kernel</code>，out/target/product/generic 目录中的 <code>system.img</code>、<code>userdate.img</code>、<code>ramdisk.img</code>。</p><p>aosp_arm64-eng 使用的是 prebuilds/qemu-kernel/arm64/kernel-qemu 目录中的 <code>Linux Kernel</code>，out/target/product/generic64 目录中的 <code>system.img</code>、<code>userdate.img</code>、<code>ramdisk.img</code>。</p></blockquote><h2 id="模块编译"><a href="#模块编译" class="headerlink" title="模块编译"></a><strong>模块编译</strong></h2><ol><li><p>编译 Launcher2 模块</p><p> 在命令行运行：</p><pre><code>$ mmm packages/apps/Launcher2/</code></pre><p> 编译生成的 apk 文件位置：</p><pre><code>out/target/product/对应平台的generic文件夹/data/app/LauncherRotationStressTest/LauncherRotationStressTest.apk</code></pre><p> <em>TODO</em></p><ol><li>执行 <code>mmm packages/apps/Launcher2/</code> 应该生成 <code>out/target/product/gereric/system/app/Launcher2.apk</code>，但是实际生成的是 <code>out/target/product/generic_x86_64/data/app/LauncherRotationStressTest/LauncherRotationStressTest.apk</code>，经查询，该文件对应的是 Launcher3。</li></ol></li><li><p>编译 Launcher3 模块</p><p> 在命令行运行：</p><pre><code>$ mma packages/apps/Launcher3/</code></pre><p> 不能使用 <code>mmm packages/apps/Launcher3/</code>，否则会报错：</p><pre><code>ninja: error: &apos;out/host/linux-x86/framework/host-libprotobuf-java-nano.jar&apos;, needed by &apos;out/host/common/obj/JAVA_LIBRARIES/launcher_proto_lib_intermediates/classes-full-debug.jar&apos;, missing and no known rule to make itbuild/core/ninja.mk:148: recipe for target &apos;ninja_wrapper&apos; failed</code></pre><p> <em>TODO</em></p><ol><li>找不到 apk 文件。</li></ol></li><li><p>安装 apk 文件</p><p> 在命令行运行（比如 64 位 Intel 平台）：</p><pre><code>adb install out/target/product/generic_x86_64/data/app/LauncherRotationStressTest/LauncherRotationStressTest.apk</code></pre></li><li><p>重新打包 apk 文件到系统镜像中</p><p> 在命令行运行：</p><pre><code>make snod</code></pre></li></ol><blockquote><p>系统自带应用的 apk 文件的位置: out/target/product/对应平台的generic文件夹/system/app</p><p>可执行文件的位置: out/target/product/对应平台的generic文件夹/system/bin</p><p>动态链接库文件的位置: out/target/product/对应平台的generic文件夹/system/lib</p><p>硬件抽象层文件的位置: out/target/product/对应平台的generic文件夹/system/lib/hw</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://so
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pixel XL 刷机</title>
    <link href="http://www.weichao.io/2017/10/11/Pixel-XL-%E5%88%B7%E6%9C%BA/"/>
    <id>http://www.weichao.io/2017/10/11/Pixel-XL-刷机/</id>
    <published>2017-10-11T12:49:25.000Z</published>
    <updated>2017-10-23T14:21:04.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://sspai.com/post/38319" title="https://sspai.com/post/38319" target="_blank" rel="external">从 Bootloader 解锁到必备应用推荐：我的 Google Pixel 折腾手记</a></li></ul><hr><h1 id="手动刷入工厂镜像"><a href="#手动刷入工厂镜像" class="headerlink" title="手动刷入工厂镜像"></a><strong>手动刷入工厂镜像</strong></h1><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a><strong>下载文件</strong></h3><ol><li><p>从<a href="https://developers.google.cn/android/images" title="https://developers.google.cn/android/images" target="_blank" rel="external">工厂镜像官网</a>下载对应版本的 zip 文件</p><p><img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E5%88%B7%E6%9C%BA_1.png" alt=""></p></li></ol><h3 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a><strong>刷机</strong></h3><ol><li><p>解压 zip 文件</p><p> 比如将 zip 文件解压到 f 盘根目录。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E5%88%B7%E6%9C%BA_2.png" alt=""></p></li><li><p>修改文件，用于刷机时保留系统数据</p><p> 使用文本编辑器修改 <code>flash-all.bat</code> 中的 <code>fastboot -w update image-marlin-opr3.170623.008.zip</code> 为 <code>fastboot update image-marlin-opr3.170623.008.zip</code>，即去掉 <code>-w</code>。</p></li><li><p>通过 USB 线连接手机和 PC</p></li><li><p>让手机进入 fastboot 模式</p><p> 在命令行中执行<code>adb reboot bootloader</code>。</p></li><li><p>进入 <code>flash-all.bat</code> 所在目录</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E5%88%B7%E6%9C%BA_3.png" alt=""></p></li><li><p>执行 <code>flash-all.bat</code>，等待刷机完成</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E5%88%B7%E6%9C%BA_4.png" alt=""></p><p> 重启后进入<code>设置</code>-&gt;<code>系统</code>可以看到系统版本。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E5%88%B7%E6%9C%BA_5.png" alt=""></p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ss
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Pixel XL 解锁</title>
    <link href="http://www.weichao.io/2017/10/10/Pixel-XL-%E8%A7%A3%E9%94%81/"/>
    <id>http://www.weichao.io/2017/10/10/Pixel-XL-解锁/</id>
    <published>2017-10-10T13:03:07.000Z</published>
    <updated>2017-10-23T14:21:04.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://sspai.com/post/38319" title="https://sspai.com/post/38319" target="_blank" rel="external">从 Bootloader 解锁到必备应用推荐：我的 Google Pixel 折腾手记</a></li></ul><hr><h1 id="Pixel-XL"><a href="#Pixel-XL" class="headerlink" title="Pixel XL"></a><strong>Pixel XL</strong></h1><p><img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_1.jpg" alt=""></p><hr><h1 id="解锁-BootLoader"><a href="#解锁-BootLoader" class="headerlink" title="解锁 BootLoader"></a><strong>解锁 BootLoader</strong></h1><h2 id="必要性"><a href="#必要性" class="headerlink" title="必要性"></a><strong>必要性</strong></h2><ul><li>只有解锁了 BootLoader，才能安装第三方的 Recovery。</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h2><h3 id="让手机具备翻墙能力"><a href="#让手机具备翻墙能力" class="headerlink" title="让手机具备翻墙能力"></a><strong>让手机具备翻墙能力</strong></h3><ol><li><p>用 PC 下载 SS 的 Android 版 App</p></li><li><p>安装 App</p><p> Pixel XL 默认没有安装<code>文件管理器</code>等类似的 App，所以不能通过将 apk 文件导入内部存储空间后再使用<code>文件管理器</code>安装的方式进行安装。</p><p> 可将 apk 文件（比如 ss.apk）放到某个位置（比如 d 盘根目录）下，通过在命令行中执行<code>adb install d:/ss.apk</code>的方式进行安装。</p></li><li><p>安装好 App 后，打开并配置服务器，连接网络</p><p> 配置完成后状态栏会出现一个钥匙的标志。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_2.png" alt=""></p></li></ol><h3 id="解锁-OEM"><a href="#解锁-OEM" class="headerlink" title="解锁 OEM"></a><strong>解锁 OEM</strong></h3><ol><li><p>打开<code>开发者选项</code></p><p> <code>设置</code>-&gt;<code>关于手机</code>，连续多次点击<code>版本号</code>。</p></li><li><p>点击<code>OEM 解锁</code>（必须已联网，必须设定了图形锁或密码锁）</p></li></ol><h3 id="解锁-BootLoader-1"><a href="#解锁-BootLoader-1" class="headerlink" title="解锁 BootLoader"></a><strong>解锁 BootLoader</strong></h3><ol><li><p>通过 USB 线连接手机和 PC</p><p> 如果没弹出调试许可，在命令行中执行<code>adb shell</code>。</p></li><li><p>让手机进入 fastboot 模式</p><p> 在命令行中执行<code>adb reboot bootloader</code>。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_3.jpg" alt=""></p></li><li><p>进入 BootLoader 解锁界面</p><p> 在命令行中执行<code>fastboot oem unlock</code>。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_4.jpg" alt=""></p></li><li><p>解锁</p><p> 使用音量键控制选择<code>Yes</code>，使用电源键确定。</p><p> 解锁完成后，最后一行是<code>Device is UNLOCKED</code>。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_5.jpg" alt=""></p></li></ol><hr><h1 id="刷第三方-Recovery——TWRP"><a href="#刷第三方-Recovery——TWRP" class="headerlink" title="刷第三方 Recovery——TWRP"></a><strong>刷第三方 Recovery——TWRP</strong></h1><h2 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h2><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a><strong>下载文件</strong></h3><ol><li>在 <a href="https://twrp.me/" title="https://twrp.me/" target="_blank" rel="external">TWRP 官网</a>中找到 <a href="https://eu.dl.twrp.me/marlin/" title="https://eu.dl.twrp.me/marlin/" target="_blank" rel="external">TWRP for marlin</a>，下载最新版的 zip 文件和 img 文件。</li></ol><h3 id="刷-TWRP"><a href="#刷-TWRP" class="headerlink" title="刷 TWRP"></a><strong>刷 TWRP</strong></h3><ol><li><p>将 zip 文件放入手机的内部存储空间中</p></li><li><p>让手机进入 fastboot 模式</p><p> 在命令行中执行<code>adb reboot bootloader</code>。</p></li><li><p>进入临时 TWRP</p><p> 可将 img 文件（比如 twrp-3.1.1-1-fastboot-marlin.img）放到某个位置（比如 d 盘根目录）下，在命令行中执行<code>fastboot boot d:/twrp-3.1.1-1-fastboot-marlin.img</code>，等待重启。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_6.jpg" alt=""></p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_7.jpg" alt=""></p></li><li><p>刷 TWRP</p><p> 选择<code>Install</code>，选择内部存储空间中的 zip 文件并刷入。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_8.jpg" alt=""></p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_9.jpg" alt=""></p></li></ol><hr><h1 id="获取-ROOT-权限"><a href="#获取-ROOT-权限" class="headerlink" title="获取 ROOT 权限"></a><strong>获取 ROOT 权限</strong></h1><h2 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a><strong>操作步骤</strong></h2><h3 id="下载文件-1"><a href="#下载文件-1" class="headerlink" title="下载文件"></a><strong>下载文件</strong></h3><ol><li>在 <a href="http://www.supersu.com/" title="http://www.supersu.com/" target="_blank" rel="external">SuperSU 官网</a>的 <a href="http://www.supersu.com/download" title="http://www.supersu.com/download" target="_blank" rel="external">Download</a> 中下载最新版的 zip 文件。</li></ol><h3 id="刷-SuperSU"><a href="#刷-SuperSU" class="headerlink" title="刷 SuperSU"></a><strong>刷 SuperSU</strong></h3><ol><li><p>将 zip 文件放入手机的内部存储空间中</p></li><li><p>让手机进入 TWRP 模式</p><p> 在命令行中执行<code>adb reboot bootloader</code>，等待重启。</p><p> 使用音量键控制选择<code>Recovery Mode</code>。</p></li><li><p>刷 SuperSU</p><p> 选择内部存储空间中的 zip 文件并刷入。</p><p> <img src="http://otkw6sse5.bkt.clouddn.com/Pixel-XL-%E8%A7%A3%E9%94%81_10.jpg" alt=""></p></li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ss
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建 blog</title>
    <link href="http://www.weichao.io/2017/07/24/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog/"/>
    <id>http://www.weichao.io/2017/07/24/Hexo-GitHub-Pages-搭建-blog/</id>
    <published>2017-07-24T04:14:46.000Z</published>
    <updated>2017-10-23T14:21:04.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><strong>Reference</strong></h1><ul><li><a href="https://hexo.io/docs/" title="https://hexo.io/docs/" target="_blank" rel="external">Hexo Documentation</a></li><li><a href="https://nodejs.org/en/" title="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></li><li><a href="https://git-scm.com/" title="https://git-scm.com/" target="_blank" rel="external">git</a></li><li><a href="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" title="http://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="external">手把手教你用Hexo+Github 搭建属于自己的博客</a></li><li><a href="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" title="https://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html" target="_blank" rel="external">window下配置SSH连接GitHub、GitHub配置ssh key</a></li><li><a href="http://theme-next.iissnan.com/getting-started.html" title="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">NexT</a></li><li><a href="http://www.jianshu.com/p/f054333ac9e6" title="http://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="external">hexo的next主题个性化教程:打造炫酷网站</a></li><li><a href="http://www.jianshu.com/p/ec2c8acf63cd" title="http://www.jianshu.com/p/ec2c8acf63cd" target="_blank" rel="external">Hexo文章图片存储选七牛（当然支持MD都可以）</a></li></ul><hr><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a><strong>环境搭建</strong></h1><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a><strong>安装 Node.js</strong></h2><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a><strong>安装 Git</strong></h2><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a><strong>安装 Hexo</strong></h2><p>在本地创建文件夹，比如 <code>D:\weichao\hexo</code></p><p>windows + r 调出运行，输入 <code>cmd</code>，进入刚才创建的目录<br><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008ec.png" alt=""></p><p>输入<code>npm install -g hexo-cli</code><br><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008ed.png" alt=""><br>warn 不会影响正常使用</p><p>输入<code>npm install hexo --save</code>，等待安装完成</p><p>输入<code>hexo -v</code>，显示<br><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008e6.png" alt=""><br>说明 Hexo 安装完成</p><hr><h1 id="clone-Hexo-项目"><a href="#clone-Hexo-项目" class="headerlink" title="clone Hexo 项目"></a><strong>clone Hexo 项目</strong></h1><p>在本地创建文件夹，比如 <code>D:\weichao\hexo\config</code></p><p>windows + r 调出运行，输入 <code>cmd</code>，进入刚才创建的目录</p><p>输入<code>hexo init</code></p><p>输入<code>npm install</code></p><p>输入<code>hexo g</code></p><p>输入<code>hexo s</code>，会提示浏览器访问地址：<br><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008ea.png" alt=""></p><p>在任意浏览器中输入该地址：<br><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008eb.png" alt=""></p><hr><h1 id="关联-Hexo-和-GitHub-Pages"><a href="#关联-Hexo-和-GitHub-Pages" class="headerlink" title="关联 Hexo 和 GitHub Pages"></a><strong>关联 Hexo 和 GitHub Pages</strong></h1><p>windows + r 调出运行，输入 <code>cmd</code>，进入 <code>D:\weichao\hexo\config</code></p><h2 id="配置-Git"><a href="#配置-Git" class="headerlink" title="配置 Git"></a><strong>配置 Git</strong></h2><p>输入用户名、邮箱</p><pre><code>git config --global user.name &quot;xx&quot;git config --global user.email &quot;xx@yy.com&quot;</code></pre><p><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008e5.png" alt=""></p><p>修改 <code>D:\weichao\hexo\config\_config.yml</code></p><pre><code>deploy:  type:</code></pre><p>为</p><pre><code>deploy:  type: git  repo: git@github.com:yourname/yourname.github.io.git  branch: master</code></pre><h2 id="安装-git-扩展"><a href="#安装-git-扩展" class="headerlink" title="安装 git 扩展"></a><strong>安装 git 扩展</strong></h2><pre><code>npm install hexo-deployer-git --save</code></pre><h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a><strong>配置 SSH</strong></h2><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a><strong>生成密钥</strong></h3><p>进入 <code>C:\Users\itpiz\.ssh</code></p><p>右键 -&gt; Git Bash Here</p><pre><code>ssh-keygen -t rsa -C &quot;xx@yy.com&quot;</code></pre><p><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008e7.png" alt=""><br><code>id_rsa</code> 是密钥，<code>id_rsa.pub</code> 是公钥</p><h3 id="添加密钥到-ssh-agent"><a href="#添加密钥到-ssh-agent" class="headerlink" title="添加密钥到 ssh-agent"></a><strong>添加密钥到 ssh-agent</strong></h3><pre><code>eval &quot;$(ssh-agent -s)&quot;ssh-add ~/.ssh/id_rsa</code></pre><p><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972ce32ab644125a100096c.png" alt=""></p><h3 id="添加密钥到-GitHub"><a href="#添加密钥到-GitHub" class="headerlink" title="添加密钥到 GitHub"></a><strong>添加密钥到 GitHub</strong></h3><p>复制 <code>id_rsa.pub</code> 中的内容</p><p><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008e9.png" alt=""></p><h3 id="测试-ssh-keys-是否设置成功"><a href="#测试-ssh-keys-是否设置成功" class="headerlink" title="测试 ssh keys 是否设置成功"></a><strong>测试 ssh keys 是否设置成功</strong></h3><p>输入 <code>ssh -T git@github.com</code></p><p><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008e8.png" alt=""></p><hr><h1 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a><strong>设置主题</strong></h1><p>windows + r 调出运行，输入 <code>cmd</code></p><p>进入 <code>D:\weichao\hexo\config</code></p><h2 id="clone-主题"><a href="#clone-主题" class="headerlink" title="clone 主题"></a><strong>clone 主题</strong></h2><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a><strong>修改配置文件</strong></h2><p>修改 <code>D:\weichao\hexo\config\_config.yml</code></p><pre><code>theme: landscape</code></pre><p>为</p><pre><code>theme: next</code></pre><h2 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a><strong>清除缓存</strong></h2><pre><code>hexo clean</code></pre><h2 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a><strong>验证主题</strong></h2><pre><code>hexo s -debug</code></pre><hr><h1 id="创建文章并上传"><a href="#创建文章并上传" class="headerlink" title="创建文章并上传"></a><strong>创建文章并上传</strong></h1><p>windows + r 调出运行，输入 <code>cmd</code></p><p>进入 <code>D:\weichao\hexo\config</code></p><p>新建一篇博客：</p><pre><code>hexo new post &quot;article title&quot;</code></pre><p>生成并部署</p><pre><code>hexo d -g</code></pre><p><img src="http://otkw6sse5.bkt.clouddn.com/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA-blog_files5972c794ab644125a10008e4.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://he
      
    
    </summary>
    
    
  </entry>
  
</feed>
